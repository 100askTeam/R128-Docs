"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3329],{6529:(e,_,n)=>{n.r(_),n.d(_,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>i});var u=n(5893),a=n(1151);const l={},s="Mbus",t={id:"developer-guide/part2/chapter17",title:"Mbus",description:"MSI\uff08Memory System Interconnet\uff09\u662fSoC\u7cfb\u7edf\u4e2d\u7edf\u7b79\u6240\u6709\u6a21\u5757\u8bbf\u95eedram\u7684\u603b\u7ebf\u4e92\u8054\u5668\u3002MSI\u652f\u6301AXI\u3001MBUS\u3001MBUS\u548cMSB\u63a5\u53e3\uff0c\u5404\u79cd\u63a5\u53e3\u7684\u6570\u91cf\u5355\u72ec\u53ef\u914d\uff0c\u4e3a\u5404\u4e2a\u6a21\u5757\u63d0\u4f9b\u9ad8\u6548\u7684\u5b58\u50a8\u4ea4\u4e92\u3002MSI\u5177\u6709\u4ee5\u4e0b\u7279\u70b9",source:"@site/docs/developer-guide/part2/chapter17.md",sourceDirName:"developer-guide/part2",slug:"/developer-guide/part2/chapter17",permalink:"/en/developer-guide/part2/chapter17",draft:!1,unlisted:!1,editUrl:"https://github.com/100askTeam/R128-Docs/tree/main/docs/developer-guide/part2/chapter17.md",tags:[],version:"current",frontMatter:{},sidebar:"classpartoneSidebar",previous:{title:"TRNG",permalink:"/en/developer-guide/part2/chapter16"},next:{title:"MMC",permalink:"/en/developer-guide/part2/chapter18"}},d={},i=[{value:"\u6a21\u5757\u914d\u7f6e",id:"\u6a21\u5757\u914d\u7f6e",level:2},{value:"\u6e90\u7801\u7ed3\u6784",id:"\u6e90\u7801\u7ed3\u6784",level:2},{value:"\u6a21\u5757\u63a5\u53e3\u4ecb\u7ecd",id:"\u6a21\u5757\u63a5\u53e3\u4ecb\u7ecd",level:2},{value:"Mbus \u83b7\u53d6\u5e26\u5bbd\u679a\u4e3e",id:"mbus-\u83b7\u53d6\u5e26\u5bbd\u679a\u4e3e",level:3},{value:"\u8fd4\u56de\u503c\u679a\u4e3e",id:"\u8fd4\u56de\u503c\u679a\u4e3e",level:3},{value:"Mbus \u603b\u7ebf\u4f7f\u80fd\u63a5\u53e3",id:"mbus-\u603b\u7ebf\u4f7f\u80fd\u63a5\u53e3",level:3},{value:"\u83b7\u53d6\u5e26\u5bbd\u63a5\u53e3",id:"\u83b7\u53d6\u5e26\u5bbd\u63a5\u53e3",level:3},{value:"\u6a21\u5757\u4f7f\u7528\u8303\u4f8b",id:"\u6a21\u5757\u4f7f\u7528\u8303\u4f8b",level:2}];function v(e){const _={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(_.h1,{id:"mbus",children:"Mbus"}),"\n",(0,u.jsx)(_.p,{children:"MSI\uff08Memory System Interconnet\uff09\u662fSoC\u7cfb\u7edf\u4e2d\u7edf\u7b79\u6240\u6709\u6a21\u5757\u8bbf\u95eedram\u7684\u603b\u7ebf\u4e92\u8054\u5668\u3002MSI\u652f\u6301AXI\u3001MBUS\u3001MBUS\u548cMSB\u63a5\u53e3\uff0c\u5404\u79cd\u63a5\u53e3\u7684\u6570\u91cf\u5355\u72ec\u53ef\u914d\uff0c\u4e3a\u5404\u4e2a\u6a21\u5757\u63d0\u4f9b\u9ad8\u6548\u7684\u5b58\u50a8\u4ea4\u4e92\u3002MSI\u5177\u6709\u4ee5\u4e0b\u7279\u70b9"}),"\n",(0,u.jsxs)(_.ul,{children:["\n",(0,u.jsx)(_.li,{children:"\u4f18\u5148\u7ea7\u63a7\u5236"}),"\n",(0,u.jsx)(_.li,{children:"\u5e26\u5bbd\u76d1\u63a7"}),"\n",(0,u.jsx)(_.li,{children:"\u6570\u636e\u52a0\u6270"}),"\n",(0,u.jsx)(_.li,{children:"\u5b89\u5168\u63a7\u5236\u529f\u80fd"}),"\n"]}),"\n",(0,u.jsx)(_.p,{children:"\u5176\u4e2d\u7684Mbus\u6a21\u5757\u63d0\u4f9b\u7ed9\u7528\u6237\u4f7f\u7528\u7684\u5305\u62ec\u603b\u7ebf\u4f7f\u80fd\u548c\u83b7\u53d6\u5e26\u5bbd\u63a5\u53e3\u3002"}),"\n",(0,u.jsx)(_.h2,{id:"\u6a21\u5757\u914d\u7f6e",children:"\u6a21\u5757\u914d\u7f6e"}),"\n",(0,u.jsx)(_.p,{children:"\u914d\u7f6e\u8def\u5f84\u5982\u4e0b:"}),"\n",(0,u.jsx)(_.pre,{children:(0,u.jsx)(_.code,{children:"Kernel Setup ---\x3e\n    Drivers Setup ---\x3e\n        SoC HAL Drivers ---\x3e\n            MBUS Devices ---\x3e\n                [*] enable mbus driver\n"})}),"\n",(0,u.jsx)(_.h2,{id:"\u6e90\u7801\u7ed3\u6784",children:"\u6e90\u7801\u7ed3\u6784"}),"\n",(0,u.jsx)(_.pre,{children:(0,u.jsx)(_.code,{className:"language-c",children:"rtos-hal/\n|-- hal/source/mbus/hal_mbus.c   // hal\u5c42\u63a5\u53e3\u4ee3\u7801\n|-- include/hal/sunxi_hal_mbus.h // \u5934\u6587\u4ef6\n"})}),"\n",(0,u.jsx)(_.h2,{id:"\u6a21\u5757\u63a5\u53e3\u4ecb\u7ecd",children:"\u6a21\u5757\u63a5\u53e3\u4ecb\u7ecd"}),"\n",(0,u.jsx)(_.h3,{id:"mbus-\u83b7\u53d6\u5e26\u5bbd\u679a\u4e3e",children:"Mbus \u83b7\u53d6\u5e26\u5bbd\u679a\u4e3e"}),"\n",(0,u.jsx)(_.pre,{children:(0,u.jsx)(_.code,{className:"language-c",children:"/* MBUS PMU ids */\nenum mbus_pmu {\n    MBUS_PMU_CPU    = 0,    /* CPU bandwidth */\n    MBUS_PMU_GPU,           /* GPU bandwidth */\n    MBUS_PMU_VE,            /* VE */\n    MBUS_PMU_DISP,          /* DISPLAY */\n    MBUS_PMU_OTH,           /* other masters */\n    MBUS_PMU_TOTAL,         /* total masters */\n    MBUS_PMU_RV_SYS,        /* RV_SYS */\n    MBUS_PMU_CE,            /* CE */\n    MBUS_PMU_DE,            /* DE */\n    MBUS_PMU_G2D,           /* G2D */\n    MBUS_PMU_TVD,           /* TVD */\n    MBUS_PMU_CSI,           /* CSI */\n    MBUS_PMU_DSP_SYS,       /* DSP_SYS */\n    MBUS_PMU_DI,            /* DI */\n    MBUS_PMU_IOMMU,         /* IOMMU */\n    MBUS_PMU_DMA0,          /* DMA0 */\n    MBUS_PMU_DMA1,          /* DMA1 */\n    MBUS_PMU_MAHB,          /* MAHB */\n};\n"})}),"\n",(0,u.jsx)(_.h3,{id:"\u8fd4\u56de\u503c\u679a\u4e3e",children:"\u8fd4\u56de\u503c\u679a\u4e3e"}),"\n",(0,u.jsx)(_.pre,{children:(0,u.jsx)(_.code,{className:"language-c",children:"typedef enum{\n    HAL_MBUS_STATUS_ERROR_PARAMETER = -3,\n    HAL_MBUS_STATUS_ERROR_CHANNEL = -2,\n    HAL_MBUS_STATUS_ERROR = -1,\n    HAL_MBUS_STATUS_OK = 0\n}hal_mbus_status_t;\n"})}),"\n",(0,u.jsx)(_.h3,{id:"mbus-\u603b\u7ebf\u4f7f\u80fd\u63a5\u53e3",children:"Mbus \u603b\u7ebf\u4f7f\u80fd\u63a5\u53e3"}),"\n",(0,u.jsx)(_.p,{children:"\u4f7f\u80fdMbus\u603b\u7ebf"}),"\n",(0,u.jsx)(_.p,{children:"\u51fd\u6570\u539f\u578b\uff1a"}),"\n",(0,u.jsx)(_.pre,{children:(0,u.jsx)(_.code,{className:"language-c",children:"hal_mbus_status_t hal_mbus_pmu_enable(void);\n"})}),"\n",(0,u.jsx)(_.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,u.jsxs)(_.ul,{children:["\n",(0,u.jsx)(_.li,{children:"\u65e0"}),"\n"]}),"\n",(0,u.jsx)(_.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,u.jsxs)(_.ul,{children:["\n",(0,u.jsx)(_.li,{children:"\u53c2\u8003hal_mbus_status_t\u679a\u4e3e"}),"\n"]}),"\n",(0,u.jsx)(_.h3,{id:"\u83b7\u53d6\u5e26\u5bbd\u63a5\u53e3",children:"\u83b7\u53d6\u5e26\u5bbd\u63a5\u53e3"}),"\n",(0,u.jsx)(_.p,{children:"\u83b7\u53d6\u4e0d\u540c\u6a21\u5757\u5728\u603b\u7ebf\u4e0a\u7684\u5e26\u5bbd"}),"\n",(0,u.jsx)(_.p,{children:"\u51fd\u6570\u539f\u578b\uff1a"}),"\n",(0,u.jsx)(_.pre,{children:(0,u.jsx)(_.code,{className:"language-c",children:"hal_mbus_status_t hal_mbus_pmu_get_value(enum mbus_pmu type, unsigned int *value);\n"})}),"\n",(0,u.jsx)(_.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,u.jsxs)(_.ul,{children:["\n",(0,u.jsx)(_.li,{children:"type\uff1a\u6a21\u5757\u7c7b\u578b"}),"\n",(0,u.jsx)(_.li,{children:"value\uff0c\u4fdd\u5b58\u83b7\u53d6\u7684\u5e26\u5bbd\u6570\u636e"}),"\n"]}),"\n",(0,u.jsx)(_.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,u.jsxs)(_.ul,{children:["\n",(0,u.jsx)(_.li,{children:"\u53c2\u8003hal_mbus_status_t\u679a\u4e3e"}),"\n"]}),"\n",(0,u.jsx)(_.h2,{id:"\u6a21\u5757\u4f7f\u7528\u8303\u4f8b",children:"\u6a21\u5757\u4f7f\u7528\u8303\u4f8b"}),"\n",(0,u.jsx)(_.pre,{children:(0,u.jsx)(_.code,{className:"language-c",children:'#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n#include <hal_cmd.h>\n#include <sunxi_hal_mbus.h>\n\nint cmd_mbus(int argc, char **argv)\n{\n    int cnt = 1;\n    int ms_delay = 0;\n    int windows_us;\n    uint32_t cpu_value = 0, gpu_value = 0, ve_value = 0, disp_value = 0;\n    uint32_t total_value = 0, di_value = 0, oth_value = 0, csi_value = 0;\n    uint32_t tvd_value = 0, g2d_value = 0, iommu_value = 0, rv_value = 0;\n    uint32_t dsp_value = 0, dma0_value = 0, dma1_value = 0, de_value = 0;\n    uint32_t ce_value = 0, mahb_value = 0,rv_sys_value = 0;\n\n    printf("============MBUS TEST===============\\n");\n    hal_mbus_pmu_enable();\n\n    if (argc >= 2)\n        cnt = atoi(argv[1]);\n\n    if (argc >= 3)\n        ms_delay = atoi(argv[2]);\n\n    printf("the bus bandwidth occupancy status is :\\n");\n    while (cnt--) {\n        hal_mbus_pmu_get_value(MBUS_PMU_CPU, &cpu_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_GPU, &gpu_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_RV_SYS, &rv_sys_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_VE, &ve_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DISP, &disp_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_OTH, &oth_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_CE, &ce_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DI, &di_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DE, &de_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_CSI, &csi_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_TVD, &tvd_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_G2D, &g2d_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_IOMMU, &iommu_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_RV_SYS, &rv_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DSP_SYS, &dsp_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DMA0, &dma0_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DMA1, &dma1_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_MAHB, &mahb_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_TOTAL, &total_value); //mbus calculate bw every window time, total is the max one\n        hal_mbus_pmu_get_window(&windows_us);\n        printf("window(us) maxbw(k) cpu      gpu      ve       disp     di       csi      tvd      g2d      iommu    rv       dsp      dma0     dma1     cd       de       mahb     others  rv_sys\\n");\n        printf("%-10d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d\\n",\\\n                windows_us , total_value, cpu_value, gpu_value, ve_value, disp_value,\\\n                di_value, csi_value, tvd_value, g2d_value, iommu_value,\\\n                rv_value, dsp_value, dma0_value, dma1_value, ce_value,\\\n                de_value, mahb_value, oth_value,rv_sys_value);\n\n        if (cnt && ms_delay)\n            mdelay(ms_delay);\n    }\n\n    return 0;\n}\n\nFINSH_FUNCTION_EXPORT_CMD(cmd_mbus, mbus_test, Mbus hal APIs tests);\n\nint cmd_mbus_enable(int argc, char **argv)\n{\n    hal_mbus_pmu_enable();\n\n    return 0;\n}\n\nFINSH_FUNCTION_EXPORT_CMD(cmd_mbus_enable, mbus_enable, Mbus hal enable APIs tests);\n\nint cmd_mbus_value(int argc, char **argv)\n{\n\n    int cnt = 1;\n    int ms_delay = 0;\n    int windows_us;\n    uint32_t cpu_value = 0, gpu_value = 0, ve_value = 0, disp_value = 0;\n    uint32_t total_value = 0, di_value = 0, oth_value = 0, csi_value = 0;\n    uint32_t tvd_value = 0, g2d_value = 0, iommu_value = 0, rv_value = 0;\n    uint32_t dsp_value = 0, dma0_value = 0, dma1_value = 0, de_value = 0;\n    uint32_t ce_value = 0, mahb_value = 0,rv_sys_value = 0;\n\n    if (argc >= 2)\n        cnt = atoi(argv[1]);\n\n    if (argc >= 3)\n        ms_delay = atoi(argv[2]);\n\n    printf("the bus bandwidth occupancy status is :\\n");\n    while (cnt--) {\n        hal_mbus_pmu_get_value(MBUS_PMU_CPU, &cpu_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_GPU, &gpu_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_VE, &ve_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DISP, &disp_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_OTH, &oth_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_CE, &ce_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DI, &di_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DE, &de_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_CSI, &csi_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_TVD, &tvd_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_G2D, &g2d_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_IOMMU, &iommu_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_RV_SYS, &rv_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DSP_SYS, &dsp_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DMA0, &dma0_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_DMA1, &dma1_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_MAHB, &mahb_value);\n        hal_mbus_pmu_get_value(MBUS_PMU_TOTAL, &total_value); //mbus calculate bw every window time, total is the max one\n        hal_mbus_pmu_get_window(&windows_us);\n        printf("window(us) maxbw(k) cpu      gpu      ve       disp     di       csi      tvd      g2d      iommu    rv       dsp      dma0     dma1     cd       de       mahb     others \\n");\n        printf("%-10d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d %-8d   0x%08x  %-8d %-8d %-8d %-8d %-8d %-8d %-8d \\n",\\\n                windows_us , total_value, cpu_value, gpu_value, ve_value, disp_value,\\\n                di_value, csi_value, tvd_value, g2d_value, iommu_value,\\\n                rv_value, dsp_value, dma0_value, dma1_value, ce_value,\\\n                de_value, mahb_value, oth_value);\n\n        if (cnt && ms_delay)\n            mdelay(ms_delay);\n    }\n\n    return 0;\n}\n\nFINSH_FUNCTION_EXPORT_CMD(cmd_mbus_value, mbus_test_value, Mbus hal value APIs tests);\n``\n'})})]})}function m(e={}){const{wrapper:_}={...(0,a.a)(),...e.components};return _?(0,u.jsx)(_,{...e,children:(0,u.jsx)(v,{...e})}):v(e)}},1151:(e,_,n)=>{n.d(_,{Z:()=>t,a:()=>s});var u=n(7294);const a={},l=u.createContext(a);function s(e){const _=u.useContext(l);return u.useMemo((function(){return"function"==typeof e?e(_):{..._,...e}}),[_,e])}function t(e){let _;return _=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),u.createElement(l.Provider,{value:_},e.children)}}}]);