"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6325],{6226:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>_});var r=a(5893),t=a(1151);const i={},d="RTOS \u5f02\u6784\u591a\u6838\u901a\u4fe1",s={id:"developer-guide/part1/chapter11",title:"RTOS \u5f02\u6784\u591a\u6838\u901a\u4fe1",description:"\u5f02\u6784\u591a\u6838\u901a\u4fe1\u4ecb\u7ecd",source:"@site/docs/developer-guide/part1/chapter11.md",sourceDirName:"developer-guide/part1",slug:"/developer-guide/part1/chapter11",permalink:"/en/developer-guide/part1/chapter11",draft:!1,unlisted:!1,editUrl:"https://github.com/100askTeam/R128-Docs/tree/main/docs/developer-guide/part1/chapter11.md",tags:[],version:"current",frontMatter:{},sidebar:"classpartoneSidebar",previous:{title:"Wi-Fi - Wi-Fi Manager",permalink:"/en/developer-guide/part1/chapter10"},next:{title:"RTOS \u5b58\u50a8\u7b80\u4ecb",permalink:"/en/developer-guide/part1/chapter12"}},c={},_=[{value:"\u5f02\u6784\u591a\u6838\u901a\u4fe1\u4ecb\u7ecd",id:"\u5f02\u6784\u591a\u6838\u901a\u4fe1\u4ecb\u7ecd",level:2},{value:"Sunxi\u2011AMP \u7b80\u4ecb",id:"sunxiamp-\u7b80\u4ecb",level:2},{value:"Sunxi\u2011AMP \u5de5\u4f5c\u6d41\u7a0b\u56fe",id:"sunxiamp-\u5de5\u4f5c\u6d41\u7a0b\u56fe",level:3},{value:"\u7ebf\u7a0b\u6c60",id:"\u7ebf\u7a0b\u6c60",level:3},{value:"\u8fdc\u7a0b\u8c03\u7528\u5b9e\u73b0\u65b9\u5f0f",id:"\u8fdc\u7a0b\u8c03\u7528\u5b9e\u73b0\u65b9\u5f0f",level:3},{value:"Sunxi\u2011AMP \u6570\u636e\u7ed3\u6784",id:"sunxiamp-\u6570\u636e\u7ed3\u6784",level:3},{value:"\u6d88\u606f\u7ed3\u6784",id:"\u6d88\u606f\u7ed3\u6784",level:4},{value:"\u6d88\u606f\u7c7b\u578b",id:"\u6d88\u606f\u7c7b\u578b",level:4},{value:"\u6307\u9488\u4f20\u9012\u8fdc\u7a0b\u8c03\u7528\u65f6\u7684\u53c2\u6570\u7ed3\u6784\u4f53",id:"\u6307\u9488\u4f20\u9012\u8fdc\u7a0b\u8c03\u7528\u65f6\u7684\u53c2\u6570\u7ed3\u6784\u4f53",level:4},{value:"\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u7684\u670d\u52a1\u51fd\u6570\u8868",id:"\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u7684\u670d\u52a1\u51fd\u6570\u8868",level:4},{value:"Sunxi-AMP \u6e90\u7801\u7ed3\u6784",id:"sunxi-amp-\u6e90\u7801\u7ed3\u6784",level:2},{value:"\u6a21\u5757\u914d\u7f6e",id:"\u6a21\u5757\u914d\u7f6e",level:3},{value:"Sunxi-AMP \u63a5\u53e3\u8bf4\u660e",id:"sunxi-amp-\u63a5\u53e3\u8bf4\u660e",level:2},{value:"\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u51fd\u6570\u7ed3\u6784\u4f53",id:"\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u51fd\u6570\u7ed3\u6784\u4f53",level:3},{value:"AMP \u4fe1\u606f\u7ed3\u6784\u4f53",id:"amp-\u4fe1\u606f\u7ed3\u6784\u4f53",level:3},{value:"AMP \u6d88\u606f\u7ed3\u6784\u4f53",id:"amp-\u6d88\u606f\u7ed3\u6784\u4f53",level:3},{value:"AMP\u64cd\u4f5c\u7ed3\u6784\u4f53",id:"amp\u64cd\u4f5c\u7ed3\u6784\u4f53",level:3},{value:"AMP \u6d88\u606f\u7c7b\u578b\u679a\u4e3e",id:"amp-\u6d88\u606f\u7c7b\u578b\u679a\u4e3e",level:3},{value:"AMP \u6d88\u606f\u8fd4\u56de\u503c\u679a\u4e3e",id:"amp-\u6d88\u606f\u8fd4\u56de\u503c\u679a\u4e3e",level:3},{value:"AMP \u6d88\u606f\u53d1\u9001\u65b9\u5411\u679a\u4e3e",id:"amp-\u6d88\u606f\u53d1\u9001\u65b9\u5411\u679a\u4e3e",level:3},{value:"AMP \u6d88\u606f\u53c2\u6570",id:"amp-\u6d88\u606f\u53c2\u6570",level:3},{value:"AMP \u51fd\u6570\u8868\u7ed3\u6784\u4f53",id:"amp-\u51fd\u6570\u8868\u7ed3\u6784\u4f53",level:3},{value:"\u83b7\u53d6 AMP \u7cfb\u7edf\u4fe1\u606f",id:"\u83b7\u53d6-amp-\u7cfb\u7edf\u4fe1\u606f",level:3},{value:"AMP\u53d1\u9001\u6d88\u606f",id:"amp\u53d1\u9001\u6d88\u606f",level:3},{value:"\u83b7\u53d6 AMP \u64cd\u4f5c",id:"\u83b7\u53d6-amp-\u64cd\u4f5c",level:3},{value:"AMP\u63a5\u6536\u6d88\u606f",id:"amp\u63a5\u6536\u6d88\u606f",level:3},{value:"\u53d1\u8d77\u8fdc\u7a0b\u51fd\u6570\u8c03\u7528",id:"\u53d1\u8d77\u8fdc\u7a0b\u51fd\u6570\u8c03\u7528",level:3},{value:"\u7533\u8bf7 cacheline \u5bf9\u9f50\u7684\u5185\u5b58",id:"\u7533\u8bf7-cacheline-\u5bf9\u9f50\u7684\u5185\u5b58",level:3},{value:"\u91ca\u653e cacheline \u5bf9\u9f50\u7684\u5185\u5b58",id:"\u91ca\u653e-cacheline-\u5bf9\u9f50\u7684\u5185\u5b58",level:3},{value:"\u7533\u8bf7 AMP \u5185\u5b58",id:"\u7533\u8bf7-amp-\u5185\u5b58",level:3},{value:"\u91ca\u653e AMP \u5185\u5b58",id:"\u91ca\u653e-amp-\u5185\u5b58",level:3},{value:"Sunxi-AMP \u4f7f\u7528\u8303\u4f8b",id:"sunxi-amp-\u4f7f\u7528\u8303\u4f8b",level:2},{value:"\u6dfb\u52a0\u6307\u9488\u4f20\u9012\u8c03\u7528\u670d\u52a1",id:"\u6dfb\u52a0\u6307\u9488\u4f20\u9012\u8c03\u7528\u670d\u52a1",level:3},{value:"RPCLI \u8de8\u6838\u7ec8\u7aef\u5b9e\u73b0",id:"rpcli-\u8de8\u6838\u7ec8\u7aef\u5b9e\u73b0",level:3},{value:"Sunxi\u2011AMP \u6ce8\u610f\u4e8b\u9879",id:"sunxiamp-\u6ce8\u610f\u4e8b\u9879",level:2},{value:"RPDATA \u6838\u95f4\u901a\u8baf",id:"rpdata-\u6838\u95f4\u901a\u8baf",level:2},{value:"rpdata \u63a5\u53e3\u4ecb\u7ecd",id:"rpdata-\u63a5\u53e3\u4ecb\u7ecd",level:3},{value:"\u521b\u5efa rpdata",id:"\u521b\u5efa-rpdata",level:4},{value:"\u8fde\u63a5 rpdata",id:"\u8fde\u63a5-rpdata",level:4},{value:"\u5f97\u5230 buffer \u7684\u503c",id:"\u5f97\u5230-buffer-\u7684\u503c",level:4},{value:"\u5224\u65ad rpdata \u662f\u5426\u4e3a\u8fde\u63a5\u72b6\u6001",id:"\u5224\u65ad-rpdata-\u662f\u5426\u4e3a\u8fde\u63a5\u72b6\u6001",level:4},{value:"\u7b49\u5f85 rpdata \u53d8\u6210\u8fde\u63a5\u72b6\u6001",id:"\u7b49\u5f85-rpdata-\u53d8\u6210\u8fde\u63a5\u72b6\u6001",level:4},{value:"\u8de8\u6838\u6570\u636e\u5904\u7406",id:"\u8de8\u6838\u6570\u636e\u5904\u7406",level:4},{value:"\u8de8\u6838\u6570\u636e\u53d1\u9001",id:"\u8de8\u6838\u6570\u636e\u53d1\u9001",level:4},{value:"\u63a5\u53d7\u8de8\u6838\u4f20\u8f93\u7684\u6570\u636e",id:"\u63a5\u53d7\u8de8\u6838\u4f20\u8f93\u7684\u6570\u636e",level:4},{value:"\u8bbe\u7f6e\u6570\u636e\u63a5\u53d7\u56de\u8c03",id:"\u8bbe\u7f6e\u6570\u636e\u63a5\u53d7\u56de\u8c03",level:4},{value:"\u6570\u636e\u63a5\u53d7\u56de\u8c03\u51fd\u6570",id:"\u6570\u636e\u63a5\u53d7\u56de\u8c03\u51fd\u6570",level:4},{value:"\u9500\u6bc1 rpdata",id:"\u9500\u6bc1-rpdata",level:4},{value:"rpdata \u4f7f\u7528\u6d41\u7a0b",id:"rpdata-\u4f7f\u7528\u6d41\u7a0b",level:3},{value:"rpdata \u793a\u4f8b",id:"rpdata-\u793a\u4f8b",level:3}];function l(n){const e={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"rtos-\u5f02\u6784\u591a\u6838\u901a\u4fe1",children:"RTOS \u5f02\u6784\u591a\u6838\u901a\u4fe1"}),"\n",(0,r.jsx)(e.h2,{id:"\u5f02\u6784\u591a\u6838\u901a\u4fe1\u4ecb\u7ecd",children:"\u5f02\u6784\u591a\u6838\u901a\u4fe1\u4ecb\u7ecd"}),"\n",(0,r.jsx)(e.p,{children:"R128 \u6240\u5e26\u6709\u7684 M33 \u4e3b\u6838\u5fc3\u4e0e C906, HIFI5 DSP \u6838\u5fc3\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u6838\u5fc3\uff0c\u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u7684\u53d1\u6325\u4ed6\u4eec\u7684\u6027\u80fd\uff0c\u534f\u540c\u5b8c\u6210\u67d0\u4e00\u4efb\u52a1\uff0c\u6240\u4ee5\u5728\u4e0d\u540c\u7684\u6838\u5fc3\u4e0a\u9762\u8fd0\u884c\u7684\u7cfb\u7edf\u4e5f\u5404\u4e0d\u76f8\u540c\u3002\u8fd9\u4e9b\u4e0d\u540c\u67b6\u6784\u7684\u6838\u5fc3\u4ee5\u53ca\u4ed6\u4eec\u4e0a\u9762\u6240\u8fd0\u884c\u7684\u8f6f\u4ef6\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5c31\u6210\u4e86 AMP \u7cfb\u7edf \uff08Asymmetric Multiprocessing System, \u5f02\u6784\u591a\u5904\u7406\u7cfb\u7edf\uff09\u3002"}),"\n",(0,r.jsx)(e.p,{children:"\u4e3a\u4e86\u591a\u6838\u5fc3\u534f\u540c\u5de5\u4f5c\uff0c\u5bf9\u4e8e\u9700\u8981\u5f02\u6784\u591a\u6838\u901a\u4fe1\u6846\u67b6\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u529f\u80fd\uff1a"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"\u9694\u79bb\u6838\u95f4\u5dee\u5f02\uff0c\u628a\u4e00\u90e8\u5206\u670d\u52a1\u90e8\u7f72\u5728\u4e00\u4e2a\u6838\u4e0a\uff0c\u53e6\u4e00\u90e8\u5206\u670d\u52a1\u90e8\u7f72\u5728\u53e6\u5916\u7684\u6838\u4e0a\uff0c\u5e94\u7528\u5c42\u4ee3\u7801\u53ea\u9700\u901a\u8fc7\u6807\u51c6\u63a5\u53e3\u6765\u7533\u8bf7\u670d\u52a1\uff0c\u5176\u5bf9\u5e95\u5c42\u670d\u52a1\u5177\u4f53\u5728\u54ea\u4e2a\u6838\u4e0a\u5b9e\u73b0\u65e0\u611f\u77e5\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u540c\u4e00\u4e2a\u6838\uff0c\u65e2\u53ef\u4f5c\u4e3a\u8fdc\u7a0b\u670d\u52a1\u7aef\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5ba2\u6237\u7aef\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u9488\u5bf9\u5f02\u6784\u591a\u6838\u7cfb\u7edf\u7684\u7279\u6027\uff0c\u5728\u8fdb\u884c\u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\u65f6\uff0c\u9700\u8981\u89e3\u51b3\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"\u7f13\u5b58\u4e00\u81f4\u6027\u95ee\u9898\u3002\u7f13\u5b58\u4e00\u81f4\u6027\u662f\u5728\u5f02\u6784\u591a\u6838\u7cfb\u7edf\u4e2d\u5341\u5206\u91cd\u8981\u7684\u95ee\u9898\uff0c\u8de8\u6838\u8c03\u7528\u8005\u548c\u670d\u52a1\u63d0\u4f9b\u8005\u5fc5\u987b\u77e5\u9053\u5176\u4f7f\u7528\u7684 buffer \u662f\u5426\u4f1a\u7ecf\u8fc7\u5176\u4ed6\u6838\u7684\u4fee\u6539\uff0c\u662f\u5426\u4f1a\u88ab\u5176\u4ed6\u6838\u8bfb\u53d6\u6570\u636e\u3002\u82e5\u88ab\u5176\u4ed6\u6838\u4fee\u6539\uff0c\u90a3\u5f53\u524d\u6838\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u5148\u65e0\u6548 buffer \u5bf9\u5e94\u7684 dcache\uff1b\u82e5\u4f1a\u88ab\u5176\u4ed6\u6838\u8bfb\u53d6\uff0c\u5219\u5f53\u524d\u6838\u5199\u5b8c\u6570\u636e\u540e\uff0c\u9700\u8981\u5c06 buffer \u5bf9\u5e94\u7684 dcache \u5237\u56de\u4e0b\u4e00\u7ea7\u5185\u5b58\u3002\u5982\u6b64\u4e00\u6765\uff0c\u4e00\u65e6\u8fdc\u7a0b\u670d\u52a1\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u6bd4\u8f83\u590d\u6742\uff0c\u90a3\u4e48\u4f7f\u7528\u8005\u548c\u670d\u52a1\u63d0\u4f9b\u8005\u5c31\u9700\u8981\u82b1\u5927\u91cf\u7684\u7cbe\u529b\u6765\u7406\u6e05\u6bcf\u4e2a buffer \u7684\u4f7f\u7528\u5173\u7cfb\uff0c\u6781\u5927\u5730\u589e\u52a0\u4e86\u4ed6\u4eec\u7684\u8d1f\u62c5\u3002\u5e76\u4e14\uff0c\u4e3a\u4e86\u907f\u514d\u5bf9\u5176\u4ed6\u6570\u636e\u9020\u6210\u5f71\u54cd\uff0c\u51b2\u5237 dcache \u65f6\u4e5f\u8fd8\u9700\u8981\u4fdd\u8bc1\u5176\u6570\u636e\u72ec\u5360\u4e00\u4e2a cacheline\uff0c\u5426\u5219\u4f1a\u5c06\u5176\u4ed6\u6570\u636e\u8bef\u5237\u3002\u8fd9\u4e5f\u4f1a\u589e\u52a0\u5904\u7406\u7f13\u5b58\u4e00\u81f4\u6027\u95ee\u9898\u7684\u96be\u5ea6\u3002"}),"\n",(0,r.jsx)(e.li,{children:"CPU \u4f4d\u5bbd\u4e0d\u4e00\u81f4\u95ee\u9898\u3002\u5728 R128 \u9879\u76ee\u4e2d\uff0cHIFI5 \u7684 CPU \u4f4d\u5bbd\u4e3a 32bit\uff0cC906 \u7684 CPU \u4f4d\u5bbd\u4e3a64bit\uff0cM33 \u7684 CPU \u4f4d\u5bbd\u4e3a 32bit\u3002\u5bf9\u4e8e\u4e09\u79cd\u4e0d\u540c\u7684\u6838\uff0c\u8f6f\u4ef6\u4e0a\u6307\u9488\u53d8\u91cf\u3001long \u7c7b\u578b\u53d8\u91cf\u7684\u6570\u636e\u5927\u5c0f\u5e76\u4e0d\u4e00\u81f4\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u5728\u4e0d\u540c\u4f4d\u5bbd\u7684\u6838\u4e0a\uff0c\u5176\u5185\u5b58\u5e03\u5c40\u5e76\u4e0d\u4e00\u81f4\uff0c\u4e09\u4e2a\u6838\u82e5\u76f4\u63a5\u8bfb\u53d6\u5219\u4f1a\u53d1\u751f\u9519\u8bef\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u590d\u6742\u573a\u666f\u5904\u7406\u95ee\u9898\u3002\u5728\u591a\u4e2a\u6838\u4e4b\u95f4\uff0c\u9700\u8981\u8003\u8651\u5230\u8fdc\u7a0b\u670d\u52a1\u7aef\u7684\u5e76\u53d1\u5904\u7406\u80fd\u529b\u3001\u6838\u95f4\u7684\u5d4c\u5957\u8c03\u7528\u5173\u7cfb\u3001\u670d\u52a1\u7aef\u51fd\u6570\u7684\u4f11\u7720\u3001\u5982\u4f55\u964d\u4f4e\u5185\u5b58\u4f7f\u7528\u5f00\u9500\u7b49\u3002\u8fd9\u4e9b\u573a\u666f\u90fd\u662f\u9700\u8981\u8fdb\u884c\u4f18\u5316\u5904\u7406\u7684\uff0c\u670d\u52a1\u7aef\u7684\u5e76\u53d1\u5904\u7406\u80fd\u529b\u4f1a\u5f71\u54cd\u5230\u8de8\u6838\u8fdc\u7a0b\u670d\u52a1\u7684\u9ad8\u6548\u6027\uff1b\u6838\u95f4\u7684\u5d4c\u5957\u8c03\u7528\u4ee5\u53ca\u670d\u52a1\u51fd\u6570\u7684\u4f11\u7720\uff0c\u5f71\u54cd\u5230\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u7684\u7a33\u5b9a\u6027\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter11/image1.png",alt:""})}),"\n",(0,r.jsx)(e.p,{children:"\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u63d0\u4f9b\u4e86 Sunxi-AMP \u6846\u67b6\u63d0\u4f9b\u5f02\u6784\u901a\u8baf\u7684\u63a5\u53e3\u3002\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86 rpdata \u5b9e\u73b0\u66f4\u52a0\u5e95\u5c42\u7684\u5f02\u6784\u901a\u8baf"}),"\n",(0,r.jsx)(e.h2,{id:"sunxiamp-\u7b80\u4ecb",children:"Sunxi\u2011AMP \u7b80\u4ecb"}),"\n",(0,r.jsx)(e.h3,{id:"sunxiamp-\u5de5\u4f5c\u6d41\u7a0b\u56fe",children:"Sunxi\u2011AMP \u5de5\u4f5c\u6d41\u7a0b\u56fe"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter11/image2.png",alt:""})}),"\n",(0,r.jsx)(e.h3,{id:"\u7ebf\u7a0b\u6c60",children:"\u7ebf\u7a0b\u6c60"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"amp_threadpool.c"})," \u6587\u4ef6\u4e2d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u6613\u7ebf\u7a0b\u6c60\uff0c\u5728\u7cfb\u7edf\u542f\u52a8\u65f6\u521b\u5efa\u6307\u5b9a\u7ebf\u7a0b\u6570\u91cf\u7684\u7ebf\u7a0b\u6c60\uff0c\u4ee5\u63d0\u5347\u8fdc\u7a0b\u6d88\u606f\u7684\u5904\u7406\u6548\u7387\u3002\u82e5\u5904\u7406\u8fdc\u7a0b\u6d88\u606f\u8f83\u591a\uff0c\u65e0\u6cd5\u53ca\u65f6\u5904\u7406\uff0c\u5219\u7531\u52a8\u6001\u589e\u52a0\u7ebf\u7a0b\u6c60\u4e2d\u7ebf\u7a0b\u7684\u6570\u91cf\uff1b\u82e5\u6d88\u606f\u8f83\u5c11\uff0c\u5219\u52a8\u6001\u5220\u9664\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u3002\u521d\u59cb\u5316\u65f6\u521b\u5efa\u7684\u7ebf\u7a0b\u6570\u91cf\u7531 ",(0,r.jsx)(e.code,{children:"amp_threadpool.h"})," \u4e2d\u7684 ",(0,r.jsx)(e.code,{children:"AMP_THD_POOL_MIN_NUM"})," \u5b8f\u6765\u51b3\u5b9a\uff0c\u5176\u4e5f\u8868\u793a\u7ebf\u7a0b\u6c60\u4e2d\u81f3\u5c11\u5b58\u5728\u7684\u6700\u5c0f\u6570\u91cf\u7684\u5904\u7406\u7ebf\u7a0b\u3002",(0,r.jsx)(e.code,{children:"AMP_THD_POOL_MAX_NUM"})," \u8868\u793a\u7ebf\u7a0b\u6c60\u4e2d\u80fd\u540c\u65f6\u5b58\u5728\u7684\u5904\u7406\u7ebf\u7a0b\u7684\u6700\u5927\u6570\u91cf\u3002\u52a8\u6001\u65b0\u589e\u5904\u7406\u7ebf\u7a0b\u7684\u6761\u4ef6\u662f\u6d88\u606f\u63a5\u53d7\u961f\u5217\u4e2d\u5b58\u5728\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u672a\u5904\u7406\u6d88\u606f\u5e76\u4e14\u5f53\u524d\u7ebf\u7a0b\u6c60\u4e2d\u5b58\u6d3b\u7ebf\u7a0b\u6570\u91cf\u5c0f\u4e8e ",(0,r.jsx)(e.code,{children:"AMP_THD_POOL_MAX_NUM"}),"\u3002\u52a8\u6001\u5220\u9664\u5904\u7406\u7ebf\u7a0b\u7684\u6761\u4ef6\u662f (\u6b63\u5728\u5904\u7406\u6d88\u606f\u7684\u7ebf\u7a0b\u7684\u6570\u91cf * 2) \u5c0f\u4e8e\u7cfb\u7edf\u4e2d\u5b58\u6d3b\u7ebf\u7a0b\u6570\u91cf\u5e76\u4e14\u5f53\u524d\u7ebf\u7a0b\u6c60\u4e2d\u5b58\u6d3b\u7ebf\u7a0b\u6570\u91cf\u5927\u4e8e ",(0,r.jsx)(e.code,{children:"AMP_THD_POOL_MAX_NUM"}),"\u3002"]}),"\n",(0,r.jsx)(e.h3,{id:"\u8fdc\u7a0b\u8c03\u7528\u5b9e\u73b0\u65b9\u5f0f",children:"\u8fdc\u7a0b\u8c03\u7528\u5b9e\u73b0\u65b9\u5f0f"}),"\n",(0,r.jsx)(e.p,{children:"Sunxi\u2011AMP \u76ee\u524d\u652f\u6301 1 \u79cd\u8fdc\u7a0b\u8de8\u6838\u8c03\u7528\u5b9e\u73b0\u65b9\u5f0f\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u53c2\u6570\u6307\u9488\u4f20\u9012\uff1a\u5c06\u8fdc\u7a0b\u8de8\u6838\u8c03\u7528\u670d\u52a1\u53c2\u6570\u7684\u6307\u9488\u6216\u8005\u6570\u636e\u503c\u8fdb\u884c\u76f4\u63a5\u4f20\u9012\u3002\u5982\u679c\u53c2\u6570\u662f\u6307\u9488\u7c7b\u578b\uff0c\u5219\u76f4\u63a5\u4f20\u9012\u8be5\u6307\u9488\uff1b\u5982\u679c\u53c2\u6570\u662f\u6570\u503c\uff0c\u5219\u76f4\u63a5\u4f20\u9012\u8be5\u6570\u503c\u3002\u53c2\u6570\u6307\u9488\u4f20\u9012\u6bd4\u8f83\u9002\u5408\u53c2\u6570\u7ed3\u6784\u4f53\u7b80\u5355\u3001\u6838\u95f4\u6570\u636e\u4f20\u9012\u91cf\u5927\u7684\u573a\u666f\u3002\u5176\u7f3a\u70b9\u662f\u5904\u7406\u7f13\u5b58\u4e00\u81f4\u6027\u6bd4\u8f83\u9ebb\u70e6\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u76f4\u63a5\u901a\u8fc7\u6307\u9488\u6765\u4f20\u9012\u53c2\u6570\u53ca\u8fd4\u56de\u503c\uff0c\u6570\u636e\u4f20\u9012\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u514d\u4e8e\u62f7\u8d1d\uff0c\u6d88\u8017\u5185\u5b58\u8f83\u5c11\uff0c\u6027\u80fd\u8f83\u9ad8\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["\u4ee5 ",(0,r.jsx)(e.code,{children:"setConfig(struct config *data)"})," \u51fd\u6570\u4e3a\u4f8b\uff0c\u5728\u53d1\u8d77 ",(0,r.jsx)(e.code,{children:"setConfig"})," \u8fdc\u7a0b\u8c03\u7528\u65f6\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a",(0,r.jsx)(e.code,{children:"sunxi_amp_msg_args"})," \u7ed3\u6784\u4f53\uff0c\u4f1a\u5c06 ",(0,r.jsx)(e.code,{children:"setConfig"})," \u7684\u53c2\u6570\u4f9d\u6b21\u8bbe\u7f6e\u5230 ",(0,r.jsx)(e.code,{children:"sunxi_amp_msg_args"})," \u7684 ",(0,r.jsx)(e.code,{children:"args"})," \u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u5c06 ",(0,r.jsx)(e.code,{children:"sunxi_amp_msg"})," \u7684 ",(0,r.jsx)(e.code,{children:"data"})," \u5b57\u6bb5\u8bbe\u7f6e\u4e3a ",(0,r.jsx)(e.code,{children:"sunxi_amp_msg_args"})," \u7ed3\u6784\u4f53\u5730\u5740\u3002\u901a\u8fc7 ",(0,r.jsx)(e.code,{children:"msgbox"})," \u5c06",(0,r.jsx)(e.code,{children:"sunxi_amp_msg"})," \u53d1\u9001\u7ed9\u53e6\u5916\u7684\u4e00\u4e2a\u6838\u540e\uff0c\u53e6\u5916\u4e00\u4e2a\u6838\u91cd\u65b0\u7ec4\u88c5 ",(0,r.jsx)(e.code,{children:"sunxi_map_msg"}),"\uff0c\u5373\u53ef\u62ff\u5230\u53c2\u6570\u6570\u636e\u3002"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter11/image3.png",alt:""})}),"\n",(0,r.jsx)(e.h3,{id:"sunxiamp-\u6570\u636e\u7ed3\u6784",children:"Sunxi\u2011AMP \u6570\u636e\u7ed3\u6784"}),"\n",(0,r.jsx)(e.h4,{id:"\u6d88\u606f\u7ed3\u6784",children:"\u6d88\u606f\u7ed3\u6784"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"sunxi_amp_msg"})," \u7ed3\u6784\u4f53\u8868\u793a\u901a\u8fc7 ",(0,r.jsx)(e.code,{children:"msgbox"})," \u4f20\u8f93\u7684\u6d88\u606f\u5185\u5bb9\uff0cSunxi\u2011AMP \u8fdc\u7a0b\u8de8\u6838\u8c03\u7528\u6846\u67b6\u57fa\u4e8e",(0,r.jsx)(e.code,{children:"sunxi_amp_msg"})," \u6d88\u606f\u6765\u5b8c\u6210\u5404\u79cd\u529f\u80fd\u3002\u4e00\u4e2a\u5b8c\u6574\u7684 ",(0,r.jsx)(e.code,{children:"sunxi_amp_msg"}),"\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff0c\u603b\u5171 12\u5b57\u8282\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"typedef struct _sunxi_amp_msg_t\n{\n    uint32_t rpcid: 16; // \u8fdc\u7a0b\u8c03\u7528 ID \u503c\uff0c\u9ad8 8 \u4f4d\u8868\u793a service id\uff0c\u4f4e 8 \u4f4d\u8868\u793a function id\n    uint32_t prio: 5;   // \u53d1\u9001\u7aef\u4efb\u52a1\u4f18\u5148\u7ea7\n    uint32_t type: 5;   // \u6d88\u606f\u7c7b\u578b\n    uint32_t src: 3;    // \u6e90\u5730\u5740\uff0c\u5373\u8868\u793a\u4ece\u54ea\u4e2a\u6838\u53d1\u51fa\u7684\u6d88\u606f\n    uint32_t dst: 3;    // \u76ee\u7684\u5730\u5740\uff0c\u5373\u8868\u793a\u8be5\u6d88\u606f\u53d1\u9001\u5230\u54ea\u4e2a\u6838\u4e0a\n    uint32_t data;      // \u6d88\u606f\u6570\u636e\n    uint32_t flags;     // \u6d88\u606f\u6807\u8bc6\uff0c\u5f53\u524d\u8bbe\u7f6e\u4e3a\u7ebf\u7a0b\u53e5\u67c4\uff0c\u7528\u4e8e\u5728\u8fdc\u7a0b\u8c03\u7528\u5835\u585e\u7b49\u5f85\u65f6\u5524\u9192\u8be5\u7ebf\u7a0b\n} sunxi_amp_msg;\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u5176\u4e2d\u8fdc\u7a0b\u8c03\u7528\u7684 ID \u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u9ad8 8 \u4f4d\u8868\u793a\u8fdc\u7a0b\u670d\u52a1\u7ec4 ID\uff0c\u4f4e 8 \u4f4d\u8868\u793a\u67d0\u4e2a\u8fdc\u7a0b\u670d\u52a1\u7ec4\u4e2d\u7684 ",(0,r.jsx)(e.code,{children:"function ID"}),"\uff0c\u4e5f\u5c31\u662f\u6700\u591a\u652f\u6301 256 \u4e2a\u8fdc\u7a0b\u670d\u52a1\u7ec4\uff0c\u6bcf\u4e2a\u8fdc\u7a0b\u670d\u52a1\u7ec4\u6700\u591a\u652f\u6301 256 \u4e2a\u8fdc\u7a0b\u8c03\u7528\u3002\u4e0b\u9762\u4ee5 FSYS \u6587\u4ef6\u7cfb\u7edf\u670d\u52a1\u4e3a\u4f8b\uff0c\u4ecb\u7ecd ",(0,r.jsx)(e.code,{children:"rpcid"})," \u7684\u7ec4\u6210\u53ca\u5176\u8ba1\u7b97\u65b9\u6cd5\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"#define RPCCALL_FSYS(y) (RPCNO(RPCNO_FSYS, RPCHandler_FSYS_t, y) | (RPCSERVICE_FSYS_DIR << 29) | SELF_DIRECTION << 26)\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"RPCCALL_FSYS(y)"})," \u5b8f\u4f1a\u81ea\u52a8\u8ba1\u7b97 ",(0,r.jsx)(e.code,{children:"rpcid"})," \u4ee5\u53ca ",(0,r.jsx)(e.code,{children:"src"}),", ",(0,r.jsx)(e.code,{children:"dst"})," \u4e09\u4e2a\u5b57\u6bb5\u7684\u503c\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"RPCSERVICE_FSYS_DIR"})," \u8868\u793a ",(0,r.jsx)(e.code,{children:"FSYS"})," \u670d\u52a1\u6240\u5728\u7684\u6838\uff0c\u5b83\u7528\u6765\u8bbe\u7f6e ",(0,r.jsx)(e.code,{children:"dst"})," \u5b57\u6bb5\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"SELF_DIRECTION"})," \u8868\u793a\u5f53\u524d\u6240\u5728\u7684\u6838\uff0c\u7528\u4e8e\u8bbe\u7f6e src \u5b57\u6bb5\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"RPCNO(RPCNO_FSYS"}),", ",(0,r.jsx)(e.code,{children:"RPCHandler_FSYS_t, y)"})," \u7528\u4e8e\u8ba1\u7b97 ",(0,r.jsx)(e.code,{children:"rpcid"}),"\u3002\u5176\u4e2d\uff0c",(0,r.jsx)(e.code,{children:"RPCNO_FSYS"})," \u8ba1\u7b97\u51fa ",(0,r.jsx)(e.code,{children:"service ID"}),"\uff0c\u653e\u7f6e\u4e8e\u9ad8 8 \u4f4d\uff0c",(0,r.jsx)(e.code,{children:"RPCNO"})," \u8ba1\u7b97\u51fa ",(0,r.jsx)(e.code,{children:"function ID"}),"\uff0c\u653e\u7f6e\u4e8e\u4f4e 8 \u4f4d\u3002"]}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u6d88\u606f\u7c7b\u578b",children:"\u6d88\u606f\u7c7b\u578b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"MSG_SERIAL_FUNC_CALL   // \u5e8f\u5217\u5316\u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\nMSG_SERIAL_FUNC_RET    // \u5e8f\u5217\u5316\u8fdc\u7a0b\u670d\u52a1\u8fd4\u56de\u503c\nMSG_SERIAL_FREE_BUFFER // \u5e8f\u5217\u5316\u8fdc\u7a0b\u670d\u52a1\u91ca\u653e\u5185\u5b58\nMSG_DIRECT_FUNC_CALL   // \u53c2\u6570\u6307\u9488\u4f20\u9012\u8fdc\u7a0b\u670d\u52a1\u8c03\u7528\nMSG_DIRECT_FUNC_RET    // \u53c2\u6570\u6307\u9488\u4f20\u9012\u8fdc\u7a0b\u670d\u52a1\u8fd4\u56de\u503c\n"})}),"\n",(0,r.jsx)(e.h4,{id:"\u6307\u9488\u4f20\u9012\u8fdc\u7a0b\u8c03\u7528\u65f6\u7684\u53c2\u6570\u7ed3\u6784\u4f53",children:"\u6307\u9488\u4f20\u9012\u8fdc\u7a0b\u8c03\u7528\u65f6\u7684\u53c2\u6570\u7ed3\u6784\u4f53"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"sunxi_amp_msg_args"})," \u7528\u6765\u8868\u793a\u4f7f\u7528\u6307\u9488\u4f20\u9012\u8fdc\u7a0b\u8c03\u7528\u65f6\u7684\u53c2\u6570\u4fe1\u606f\uff0c",(0,r.jsx)(e.code,{children:"sunxi_amp_msg_args"})," \u7ed3\u6784\u4f53\u7684\u5730\u5740\u4f1a\u88ab\u8bbe\u7f6e\u5230 ",(0,r.jsx)(e.code,{children:"sunxi_amp_msg"})," \u7684 ",(0,r.jsx)(e.code,{children:"data"})," \u5b57\u6bb5\u8fdb\u884c\u4f20\u9012\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"typedef struct _sunxi_amp_msg_args_t\n{\n    uint32_t args_num: 8;\n    uint32_t reserved;\n    uint32_t args[SUNXI_AMP_MAX_ARGS_NUM];\n} sunxi_amp_msg_args;\n"})}),"\n",(0,r.jsx)(e.h4,{id:"\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u7684\u670d\u52a1\u51fd\u6570\u8868",children:"\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u7684\u670d\u52a1\u51fd\u6570\u8868"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"sunxi_amp_func_table"})," \u7528\u6765\u8868\u793a\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u7684\u670d\u52a1\u51fd\u6570\u8868\u3002",(0,r.jsx)(e.code,{children:"args_num"})," \u8868\u793a\u8be5\u670d\u52a1\u7684\u53c2\u6570\u4e2a\u6570\uff0c",(0,r.jsx)(e.code,{children:"return_type"})," \u8868\u793a\u8be5\u670d\u52a1\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff0c",(0,r.jsx)(e.code,{children:"func"})," \u8868\u793a\u670d\u52a1\u51fd\u6570\u6307\u9488\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"typedef struct _sunxi_amp_func_table\n{\n    uint32_t args_num: 8;\n    uint32_t return_type: 8;\n    sunxi_amp_service_func func;\n} sunxi_amp_func_table;\n"})}),"\n",(0,r.jsx)(e.h2,{id:"sunxi-amp-\u6e90\u7801\u7ed3\u6784",children:"Sunxi-AMP \u6e90\u7801\u7ed3\u6784"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"\u251c\u2500\u2500 amp_core.c            # Sunxi\u2011AMP \u6838\u5fc3\u5904\u7406\u4ee3\u7801\uff0c\u5305\u542b\u6d88\u606f\u89e3\u6790\u7b49\n\u251c\u2500\u2500 amp_msgbox.c          # Sunxi\u2011AMP msgbox \u5bf9\u63a5\u5c01\u88c5\n\u251c\u2500\u2500 amp_service.c         # \u8fdc\u7a0b\u670d\u52a1\u6570\u7ec4\n\u251c\u2500\u2500 amp_stub.c            # \u89e6\u53d1\u8fdc\u7a0b\u670d\u52a1\u7684\u94a9\u5b50\u51fd\u6570\n\u251c\u2500\u2500 amp_test.c            # Sunxi\u2011AMP \u5355\u6838\u6d4b\u8bd5\u6587\u4ef6\n\u251c\u2500\u2500 amp_threadpool.c      # Sunxi\u2011AMP \u7ebf\u7a0b\u6c60\n\u251c\u2500\u2500 amp_threadpool.h      # \u7ebf\u7a0b\u6c60\u5934\u6587\u4ef6\n\u251c\u2500\u2500 Kconfig               # \u914d\u7f6e\u6587\u4ef6\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 msgbuffer.c           # \u5bf9\u63a5 erpc \u5b9e\u73b0\u7684\u6e90\u7801\uff0c\u5df2\u5e9f\u5f03\n\u251c\u2500\u2500 msgbuffer.h\n\u251c\u2500\u2500 service               # \u5df2\u652f\u6301\u7684\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\n\u2502   \u251c\u2500\u2500 audio             # \u97f3\u9891\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\n\u2502   \u251c\u2500\u2500 bt                # \u84dd\u7259\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\n\u2502   \u251c\u2500\u2500 demo              # erpc \u6d4b\u8bd5\u7528\u4f8b\n\u2502   \u251c\u2500\u2500 flashc            # flashc\u9a71\u52a8\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\n\u2502   \u251c\u2500\u2500 fsys              # \u6587\u4ef6\u7cfb\u7edf\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\n\u2502   \u251c\u2500\u2500 misc              # \u6742\u9879\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\uff0c\u4e3b\u8981\u7528\u4e8e\u64cd\u4f5c\u547d\u4ee4\u4f20\u9012\u4e4b\u7c7b\u7684\u573a\u666f\n\u2502   \u251c\u2500\u2500 net               # wifi \u7f51\u7edc\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\n\u2502   \u251c\u2500\u2500 pm                # \u4f11\u7720\u5524\u9192\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\n\u2502   \u251c\u2500\u2500 rpcconsole        # \u63a7\u5236\u53f0\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\n\u2502   \u251c\u2500\u2500 rpdata            # \u8fdc\u7a0b\u6570\u636e\u83b7\u53d6\u8c03\u7528\u670d\u52a1\uff0c\u7528\u4e8e\u5c4f\u853d\u590d\u6742\u64cd\u4f5c\uff0c\u4f7f\u5f00\u53d1\u8005\u4ec5\u5173\u5fc3\u6570\u636e\u83b7\u53d6\u53ca\u53d1\u9001\n\u2502   \u2514\u2500\u2500 tfm               # \u5b89\u5168\u7cfb\u7edf\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\n\u251c\u2500\u2500 sunxi_amp.h\n\u251c\u2500\u2500 sunxi_amp_msg.h\n\u251c\u2500\u2500 sunxi_amp_status.h\n\u251c\u2500\u2500 sunxi_amp_table.h\n\u2514\u2500\u2500 tests                 # \u591a\u6838\u901a\u4fe1\u538b\u529b\u6d4b\u8bd5\n    \u2514\u2500\u2500 test_stress.c\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\u6a21\u5757\u914d\u7f6e",children:"\u6a21\u5757\u914d\u7f6e"}),"\n",(0,r.jsx)(e.p,{children:"M33 \u4e0e C906"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"System components \u2011\u2011\u2011>\n    aw components \u2011\u2011\u2011>\n        AMP Components Support \u2011\u2011\u2011>\n            [*] Tina RTOS AMP                    # \u4f7f\u80fd Sunxi\u2011AMP \u7ec4\u4ef6\n            [*] AMP Funcall Thread               # \u4f7f\u80fd\u901a\u8fc7\u4efb\u52a1\u5904\u7406\u51fd\u6570\u8c03\u7528\n            [*] AMP Funcall ThreadPool           # \u4f7f\u80fd\u7ebf\u7a0b\u6c60\n            [*] AMP Change Service Task Priority # \u4f7f\u80fd\u4f18\u5148\u7ea7\u4f20\u9012\n"})}),"\n",(0,r.jsx)(e.h2,{id:"sunxi-amp-\u63a5\u53e3\u8bf4\u660e",children:"Sunxi-AMP \u63a5\u53e3\u8bf4\u660e"}),"\n",(0,r.jsx)(e.p,{children:"\u5934\u6587\u4ef6"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"#include <sunxi_amp.h>\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u51fd\u6570\u7ed3\u6784\u4f53",children:"\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u51fd\u6570\u7ed3\u6784\u4f53"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"typedef struct\n{\n    sunxi_amp_func_table *RPCHandler_FSYS;\n    sunxi_amp_func_table *RPCHandler_NET;\n    sunxi_amp_func_table *RPCHandler_BT;\n    sunxi_amp_func_table *RPCHandler_DEMO;\n    sunxi_amp_func_table *RPCHandler_ARM_CONSOLE;\n    sunxi_amp_func_table *RPCHandler_DSP_CONSOLE;\n    sunxi_amp_func_table *RPCHandler_RV_CONSOLE;\n    sunxi_amp_func_table *RPCHandler_PMOFM33;\n    sunxi_amp_func_table *RPCHandler_PMOFRV;\n    sunxi_amp_func_table *RPCHandler_PMOFDSP;\n    sunxi_amp_func_table *RPCHandler_FLASHC;\n    sunxi_amp_func_table *RPCHandler_M33_MISC;\n    sunxi_amp_func_table *RPCHandler_RV_MISC;\n    sunxi_amp_func_table *RPCHandler_DSP_MISC;\n    sunxi_amp_func_table *RPCHandler_AUDIO;\n    sunxi_amp_func_table *RPCHandler_RPDATA;\n    sunxi_amp_func_table *RPCHandler_TFM;\n} RPCHandler_RPCT_t;\n"})}),"\n",(0,r.jsx)(e.h3,{id:"amp-\u4fe1\u606f\u7ed3\u6784\u4f53",children:"AMP \u4fe1\u606f\u7ed3\u6784\u4f53"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"typedef struct _sunxi_amp_info_t\n{\n    QueueHandle_t send_queue; /*send to remote processor */\n    QueueHandle_t recv_queue; /*receive from remote processor */\n    TaskHandle_t  sendTask;   /*send to remote processor */\n    TaskHandle_t  recvTask;   /*receive from remote processor */\n    struct msg_endpoint sedp_arm;\n    struct msg_endpoint sedp_rv;\n    struct msg_endpoint sedp_dsp;\n    sunxi_amp_wait wait;\n    QueueHandle_t amp_msg_heap_mutex;\n} sunxi_amp_info;\n"})}),"\n",(0,r.jsx)(e.h3,{id:"amp-\u6d88\u606f\u7ed3\u6784\u4f53",children:"AMP \u6d88\u606f\u7ed3\u6784\u4f53"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"typedef struct _sunxi_amp_msg_t\n{\n    uint32_t rpcid: 16;\n    uint32_t prio: 5;\n    uint32_t type: 5;\n    uint32_t src: 3;\n    uint32_t dst: 3;\n    uint32_t data;\n    uint32_t flags;\n} __attribute__((packed)) sunxi_amp_msg;\n"})}),"\n",(0,r.jsx)(e.h3,{id:"amp\u64cd\u4f5c\u7ed3\u6784\u4f53",children:"AMP\u64cd\u4f5c\u7ed3\u6784\u4f53"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"typedef struct _sunxi_amp_msg_ops\n{\n    sunxi_amp_msg_func send_to_queue;\n    sunxi_amp_msg_func send_to_dev;\n    sunxi_amp_msg_func receive_from_dev;\n    sunxi_amp_dev_init init;\n} sunxi_amp_msg_ops;\n"})}),"\n",(0,r.jsx)(e.h3,{id:"amp-\u6d88\u606f\u7c7b\u578b\u679a\u4e3e",children:"AMP \u6d88\u606f\u7c7b\u578b\u679a\u4e3e"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"enum MSG_TYPE\n{\n    MSG_SERIAL_FUNC_CALL = 0,\n    MSG_SERIAL_FUNC_RET,\n    MSG_SERIAL_FREE_BUFFER,\n    MSG_DIRECT_FUNC_CALL,\n    MSG_DIRECT_FUNC_RET,\n    MSG_TYPE_NUM,\n};\n"})}),"\n",(0,r.jsx)(e.h3,{id:"amp-\u6d88\u606f\u8fd4\u56de\u503c\u679a\u4e3e",children:"AMP \u6d88\u606f\u8fd4\u56de\u503c\u679a\u4e3e"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"enum FUNC_RETURN_TYPE\n{\n    RET_NULL = 0,\n    RET_POINTER,\n    RET_NUMBER_32,\n    RET_NUMBER_64,\n};\n"})}),"\n",(0,r.jsx)(e.h3,{id:"amp-\u6d88\u606f\u53d1\u9001\u65b9\u5411\u679a\u4e3e",children:"AMP \u6d88\u606f\u53d1\u9001\u65b9\u5411\u679a\u4e3e"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"enum RPC_MSG_DIRECTION\n{\n    RPC_MSG_DIR_UNKNOWN = 0,\n    RPC_MSG_DIR_CM33 = 1,\n    RPC_MSG_DIR_RV,\n    RPC_MSG_DIR_DSP,\n};\n"})}),"\n",(0,r.jsx)(e.h3,{id:"amp-\u6d88\u606f\u53c2\u6570",children:"AMP \u6d88\u606f\u53c2\u6570"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"typedef struct _sunxi_amp_msg_args_t\n{\n    uint32_t args_num: 8;\n    uint32_t reserved;\n    uint32_t args[SUNXI_AMP_MAX_ARGS_NUM];\n} __attribute__((packed)) sunxi_amp_msg_args;\n"})}),"\n",(0,r.jsx)(e.h3,{id:"amp-\u51fd\u6570\u8868\u7ed3\u6784\u4f53",children:"AMP \u51fd\u6570\u8868\u7ed3\u6784\u4f53"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"typedef struct _sunxi_amp_func_table\n{\n    uint32_t args_num: 8;\n    uint32_t return_type: 8;\n    sunxi_amp_service_func func;\n} sunxi_amp_func_table;\n"})}),"\n",(0,r.jsx)(e.h3,{id:"\u83b7\u53d6-amp-\u7cfb\u7edf\u4fe1\u606f",children:"\u83b7\u53d6 AMP \u7cfb\u7edf\u4fe1\u606f"}),"\n",(0,r.jsx)(e.p,{children:"\u51fd\u6570\u539f\u578b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"sunxi_amp_info *get_amp_info(void);\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u65e0"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"sunxi_amp_info \u7ed3\u6784\u4f53"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"amp\u53d1\u9001\u6d88\u606f",children:"AMP\u53d1\u9001\u6d88\u606f"}),"\n",(0,r.jsx)(e.p,{children:"\u51fd\u6570\u539f\u578b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"int hal_amp_msg_send(sunxi_amp_msg *msg);\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"msg\uff1a\u6d88\u606f\u7ed3\u6784\u4f53"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"0\uff1a\u6210\u529f"}),"\n",(0,r.jsx)(e.li,{children:"-1\uff1a\u5931\u8d25"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\u83b7\u53d6-amp-\u64cd\u4f5c",children:"\u83b7\u53d6 AMP \u64cd\u4f5c"}),"\n",(0,r.jsx)(e.p,{children:"\u51fd\u6570\u539f\u578b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"sunxi_amp_msg_ops *get_msg_ops(void);\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u65e0"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"sunxi_amp_msg_ops\uff1a\u64cd\u4f5c\u7ed3\u6784\u4f53"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"amp\u63a5\u6536\u6d88\u606f",children:"AMP\u63a5\u6536\u6d88\u606f"}),"\n",(0,r.jsx)(e.p,{children:"\u51fd\u6570\u539f\u578b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"int hal_amp_msg_recv(sunxi_amp_msg *msg);\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"msg\uff1a\u6d88\u606f\u7ed3\u6784\u4f53"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"0\uff1a\u6210\u529f"}),"\n",(0,r.jsx)(e.li,{children:"-1\uff1a\u5931\u8d25"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\u53d1\u8d77\u8fdc\u7a0b\u51fd\u6570\u8c03\u7528",children:"\u53d1\u8d77\u8fdc\u7a0b\u51fd\u6570\u8c03\u7528"}),"\n",(0,r.jsx)(e.p,{children:"\u51fd\u6570\u539f\u578b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"unsigned long func_stub(uint32_t id, int haveRet, int stub_args_num, void *stub_args[]);\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"id : \u8fdc\u7a0b\u670d\u52a1\u51fd\u6570\u7684 ID \u503c"}),"\n",(0,r.jsx)(e.li,{children:"haveRet \uff1a\u662f\u5426\u5b58\u5728\u8fd4\u56de\u503c\uff0c\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u51fd\u6570\u8c03\u7528\u7684\u987a\u5e8f\uff0c\u8be5\u503c\u9700\u4e3a 1"}),"\n",(0,r.jsx)(e.li,{children:"stub_args_num : \u8fdc\u7a0b\u670d\u52a1\u51fd\u6570\u7684\u53c2\u6570\u4e2a\u6570"}),"\n",(0,r.jsx)(e.li,{children:"stub_args : \u8fdc\u7a0b\u670d\u52a1\u51fd\u6570\u7684\u53c2\u6570"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u8fdc\u7a0b\u670d\u52a1\u51fd\u6570\u7684\u8fd4\u56de\u503c"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\u7533\u8bf7-cacheline-\u5bf9\u9f50\u7684\u5185\u5b58",children:"\u7533\u8bf7 cacheline \u5bf9\u9f50\u7684\u5185\u5b58"}),"\n",(0,r.jsx)(e.p,{children:"\u51fd\u6570\u539f\u578b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"void *amp_align_malloc(int size);\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"size : \u9700\u8981\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7533\u8bf7\u7684\u5185\u5b58\u5730\u5740"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\u91ca\u653e-cacheline-\u5bf9\u9f50\u7684\u5185\u5b58",children:"\u91ca\u653e cacheline \u5bf9\u9f50\u7684\u5185\u5b58"}),"\n",(0,r.jsx)(e.p,{children:"\u51fd\u6570\u539f\u578b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"void amp_align_free(void *ptr);\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"ptr\uff1a\u9700\u8981\u91ca\u653e\u7684\u5185\u5b58\u5730\u5740"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u65e0"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\u7533\u8bf7-amp-\u5185\u5b58",children:"\u7533\u8bf7 AMP \u5185\u5b58"}),"\n",(0,r.jsx)(e.p,{children:"\u51fd\u6570\u539f\u578b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"void *amp_malloc(int size);\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"size : \u9700\u8981\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u7533\u8bf7\u7684\u5185\u5b58\u5730\u5740"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"\u91ca\u653e-amp-\u5185\u5b58",children:"\u91ca\u653e AMP \u5185\u5b58"}),"\n",(0,r.jsx)(e.p,{children:"\u51fd\u6570\u539f\u578b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"void amp_free(void *ptr);\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"ptr\uff1a\u9700\u8981\u91ca\u653e\u7684\u5185\u5b58\u5730\u5740"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u65e0"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"sunxi-amp-\u4f7f\u7528\u8303\u4f8b",children:"Sunxi-AMP \u4f7f\u7528\u8303\u4f8b"}),"\n",(0,r.jsx)(e.h3,{id:"\u6dfb\u52a0\u6307\u9488\u4f20\u9012\u8c03\u7528\u670d\u52a1",children:"\u6dfb\u52a0\u6307\u9488\u4f20\u9012\u8c03\u7528\u670d\u52a1"}),"\n",(0,r.jsx)(e.p,{children:"\u6dfb\u52a0\u6307\u9488\u4f20\u9012\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\u53ef\u53c2\u8003 ",(0,r.jsx)(e.code,{children:"lichee/rtos\u2011components/aw/amp/service/fsys/"})," \u8fdc\u7a0b\u6587\u4ef6\u7cfb\u7edf\u670d\u52a1\u3002\u5728 ",(0,r.jsx)(e.code,{children:"lichee/rtos-components/aw/amp/service/"})," \u4e0b\u521b\u5efa\u5bf9\u5e94\u670d\u52a1\u7684\u6587\u4ef6\u5939 ",(0,r.jsx)(e.code,{children:"fsys"})," \u4ee5\u53ca\u5bf9\u5e94\u7684 ",(0,r.jsx)(e.code,{children:"service"})," \u548c ",(0,r.jsx)(e.code,{children:"stub"})," \u7aef\u6e90\u6587\u4ef6\uff0c\u8fdc\u7a0b\u6587\u4ef6\u7cfb\u7edf\u670d\u52a1\u4e2d\u4e3a ",(0,r.jsx)(e.code,{children:"fsys_ser.c"})," \u548c ",(0,r.jsx)(e.code,{children:"fsys_stub.c"}),"\u3002\u53ef\u53c2\u8003 ",(0,r.jsx)(e.code,{children:"Makefile"})," \u548c ",(0,r.jsx)(e.code,{children:"Kconfig"})," \u6dfb\u52a0\u7f16\u8bd1\u3001\u914d\u7f6e\u65b0\u7684\u8fdc\u7a0b\u8c03\u7528\u670d\u52a1"]}),"\n",(0,r.jsxs)(e.li,{children:["\u5728 ",(0,r.jsx)(e.code,{children:"fsys_ser.c"})," \u4e2d\u521b\u5efa ",(0,r.jsx)(e.code,{children:"sunxi_amp_func_table"})," \u6570\u7ec4 ",(0,r.jsx)(e.code,{children:"fsys_table"})]}),"\n",(0,r.jsxs)(e.li,{children:["\u5728 ",(0,r.jsx)(e.code,{children:"amp_service.c"})," \u4e2d\u5c06 ",(0,r.jsx)(e.code,{children:"fsys_table"})," \u6dfb\u52a0\u5230 ",(0,r.jsx)(e.code,{children:"func_table"})," \u6570\u7ec4\u4e2d"]}),"\n",(0,r.jsxs)(e.li,{children:["\u5728 ",(0,r.jsx)(e.code,{children:"sunxi_amp_table.h"})," \u4e2d\u6dfb\u52a0\u6587\u4ef6\u7cfb\u7edf\u8fdc\u7a0b\u670d\u52a1\u7ec4\u7684\u7ed3\u6784\u4f53 ",(0,r.jsx)(e.code,{children:"RPCHandler_FSYS_t"}),"\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c",(0,r.jsx)(e.code,{children:"RPCHandler_FSYS_t"})," \u7ed3\u6784\u4f53\u7684\u6210\u5458\u53d8\u91cf\u9700\u8981\u4e0e ",(0,r.jsx)(e.code,{children:"sunxi_amp"})]}),"\n",(0,r.jsxs)(e.li,{children:["\u5728 ",(0,r.jsx)(e.code,{children:"sunxi_amp.h"})," \u7684 ",(0,r.jsx)(e.code,{children:"RPCHandler_RPCT_t"})," \u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u6dfb\u52a0 ",(0,r.jsx)(e.code,{children:"RPCHandler_FSYS"})," \u6307\u9488"]}),"\n",(0,r.jsxs)(e.li,{children:["\u5728 ",(0,r.jsx)(e.code,{children:"sunxi_amp.h"})," \u4e2d\u5b9a\u4e49\u4ee5\u4e0b\u5b8f"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"#define RPCNO_FSYS RPCCALL_RPCNO(RPCHandler_FSYS)\n#define RPCSERVICE_FSYS_DIR (RPC_MSG_DIR_RV) // \u6b64\u5904\u9700\u8981\u6839\u636e\u5b9e\u9645\u90e8\u7f72\u8fdc\u7a0b\u6587\u4ef6\u7cfb\u7edf\u670d\u52a1\u7684\u6838\u800c\u4fee\u6539\n#define RPCCALL_FSYS(y) (RPCNO(RPCNO_FSYS, RPCHandler_FSYS_t, y) | (RPCSERVICE_FSYS_DIR << 28) |\nSELF_DIRECTION << 24)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"fsys_ser.c"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <statfs.h>\n#include <dirent.h>\n#include <unistd.h>\n#include <fcntl.h>\n\n#include "sunxi_amp.h"\n#include <hal_cache.h>\n\nextern int truncate (const char *__file, __off_t __length);\nextern int fstatfs (int __fildes, struct statfs *__buf);\n\nstatic int _open(const char *name, int nameSize, int flag)\n{\n    int ret;\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    ret = open(name, flag);\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    return ret;\n}\n\nstatic int _close(int fd)\n{\n    return close(fd);\n}\n\nstatic ssize_t _read(int fd, void *buffer, size_t size)\n{\n    ssize_t ret = -1;\n    ret = read(fd, buffer, size);\n    hal_dcache_clean((unsigned long)buffer, size);\n    return ret;\n}\n\nstatic ssize_t _write(int fd, void *buffer, size_t size)\n{\n    ssize_t ret = -1;\n    hal_dcache_invalidate((unsigned long)buffer, size);\n    ret = write(fd, buffer, size);\n    hal_dcache_clean((unsigned long)buffer, size);\n    return ret;\n}\n\nstatic off_t _lseek(int fd, off_t offset, int whence)\n{\n    return lseek(fd, offset, whence);\n}\n\nstatic int _stat(const char *path, int pathSize, struct stat *st)\n{\n    int ret = -1;\n    hal_dcache_invalidate((unsigned long)st, sizeof(*st));\n    hal_dcache_invalidate((unsigned long)path, pathSize);\n    ret = stat(path, st);\n    hal_dcache_clean((unsigned long)st, sizeof(*st));\n    return ret;\n}\n\nstatic int _fstat(int fd, struct stat *st)\n{\n    int ret = -1;\n    hal_dcache_invalidate((unsigned long)st, sizeof(*st));\n    ret = fstat(fd, st);\n    hal_dcache_clean((unsigned long)st, sizeof(*st));\n    return ret;\n}\n\nstatic int _unlink(const char *path, int pathSize)\n{\n    int ret = -1;\n    hal_dcache_invalidate((unsigned long)path, pathSize);\n    ret = unlink(path);\n    hal_dcache_invalidate((unsigned long)path, pathSize);\n    return ret;\n}\n\nstatic int _rename(const char *old, int oldSize, const char *new, int newSize)\n{\n    int ret = -1;\n    hal_dcache_invalidate((unsigned long)new, newSize);\n    hal_dcache_invalidate((unsigned long)old, oldSize);\n    ret = rename(old, new);\n    hal_dcache_invalidate((unsigned long)old, oldSize);\n    hal_dcache_invalidate((unsigned long)new, newSize);\n    return ret;\n}\n\nstatic DIR *_opendir(const char *path, int pathSize)\n{\n    DIR *ret = NULL;\n    hal_dcache_invalidate((unsigned long)path, pathSize);\n    ret = opendir(path);\n    if (ret)\n        hal_dcache_clean((unsigned long)ret, sizeof(*ret));\n    hal_dcache_invalidate((unsigned long)path, pathSize);\n    return ret;\n}\n\nstatic struct dirent *_readdir(DIR *pdir)\n{\n    struct dirent *ret = NULL;\n    ret = readdir(pdir);\n    if (ret)\n        hal_dcache_clean((unsigned long)ret, sizeof(*ret));\n    return ret;\n}\n\nstatic int _closedir(DIR *pdir)\n{\n    return closedir(pdir);\n}\n\nstatic int _mkdir(const char *name, int nameSize, mode_t mode)\n{\n    int ret;\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    ret = mkdir(name, mode);\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    return ret;\n}\n\nstatic int _rmdir(const char *name, int nameSize)\n{\n    int ret;\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    ret = rmdir(name);\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    return ret;\n}\n\nstatic int _access(const char *name, int nameSize, int amode)\n{\n    int ret;\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    ret = access(name, amode);\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    return ret;\n}\n\nstatic int _truncate(const char *name, int nameSize, off_t length)\n{\n    int ret;\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    ret = truncate(name, length);\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    return ret;\n}\n\nstatic int _statfs(const char *name, int nameSize, struct statfs *buf)\n{\n    int ret = -1;\n    hal_dcache_invalidate((unsigned long)name, nameSize);\n    ret = statfs(name, buf);\n    hal_dcache_clean((unsigned long)buf, sizeof(*buf));\n    return ret;\n}\n\nstatic int _fstatfs(int fd, struct statfs *buf)\n{\n    int ret = -1;\n    ret = fstatfs(fd, buf);\n    hal_dcache_clean((unsigned long)buf, sizeof(*buf));\n    return ret;\n}\n\nstatic int _fsync(int fd)\n{\n    return fsync(fd);\n}\n\nsunxi_amp_func_table fsys_table[] =\n{\n    {.func = (void *)&_open, .args_num = 3, .return_type = RET_POINTER},\n    {.func = (void *)&_close, .args_num = 1, .return_type = RET_POINTER},\n    {.func = (void *)&_read, .args_num = 3, .return_type = RET_POINTER},\n    {.func = (void *)&_write, .args_num = 3, .return_type = RET_POINTER},\n    {.func = (void *)&_lseek, .args_num = 3, .return_type = RET_POINTER},\n    {.func = (void *)&_fstat, .args_num = 2, .return_type = RET_POINTER},\n    {.func = (void *)&_stat, .args_num = 3, .return_type = RET_POINTER},\n    {.func = (void *)&_unlink, .args_num = 2, .return_type = RET_POINTER},\n    {.func = (void *)&_rename, .args_num = 4, .return_type = RET_POINTER},\n    {.func = (void *)&_opendir, .args_num = 2, .return_type = RET_POINTER},\n    {.func = (void *)&_readdir, .args_num = 1, .return_type = RET_POINTER},\n    {.func = (void *)&_closedir, .args_num = 1, .return_type = RET_POINTER},\n    {.func = (void *)&_mkdir, .args_num = 3, .return_type = RET_POINTER},\n    {.func = (void *)&_rmdir, .args_num = 2, .return_type = RET_POINTER},\n    {.func = (void *)&_access, .args_num = 3, .return_type = RET_POINTER},\n    {.func = (void *)&_truncate, .args_num = 3, .return_type = RET_POINTER},\n    {.func = (void *)&_statfs, .args_num = 3, .return_type = RET_POINTER},\n    {.func = (void *)&_fstatfs, .args_num = 2, .return_type = RET_POINTER},\n    {.func = (void *)&_fsync, .args_num = 1, .return_type = RET_POINTER},\n};\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"fsys_stub.c"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <reent.h>\n\n#include "sunxi_amp.h"\n\n#include <hal_cache.h>\n\n#ifndef _MAYBE_STATIC\n#include <statfs.h>\n#include <dirent.h>\n\n#else\nstruct dirent\n{\n    int d_ino;          /*!< file number */\n    uint8_t d_type;     /*!< not defined in POSIX, but present in BSD and Linux */\n#define DT_UNKNOWN  0\n#define DT_REG      1\n#define DT_DIR      2\n    char d_name[256];   /*!< zero-terminated file name */\n};\n\ntypedef __uint64_t __fsblkcnt_t;\n\nstruct statfs\n{\n    uint32_t f_type;\n    uint32_t f_bsize;\n    __fsblkcnt_t f_blocks;\n    __fsblkcnt_t f_bfree;\n    __fsblkcnt_t f_bavail;\n    __fsfilcnt_t f_files;\n    __fsfilcnt_t f_ffree;\n};\n\ntypedef struct\n{\n    uint16_t dd_vfs_idx; /*!< VFS index, not to be used by applications */\n    uint16_t dd_rsv;     /*!< field reserved for future extension */\n    /* remaining fields are defined by VFS implementation */\n} DIR;\n#endif\n\n\nMAYBE_STATIC int open(const char *name, int flag, ...)\n{\n    void *args[3] = {0};\n    int ret = -1;\n    int nameSize = strlen(name) + 1;\n    char *align_name = amp_align_malloc(nameSize);\n    if (!align_name)\n    {\n        return -1;\n    }\n    memset(align_name, 0, nameSize);\n    memcpy(align_name, name, nameSize);\n    args[0] = align_name;\n    args[1] = (void *)(unsigned long)nameSize;\n    args[2] = (void *)(unsigned long)flag;\n    hal_dcache_clean((unsigned long)align_name, nameSize);\n    ret = func_stub(RPCCALL_FSYS(open), 1, ARRAY_SIZE(args), args);\n    amp_align_free(align_name);\n    return ret;\n}\n\nMAYBE_STATIC int close(int fd)\n{\n    void *args[1] = {0};\n    args[0] = (void *)(unsigned long)fd;\n    return func_stub(RPCCALL_FSYS(close), 1, ARRAY_SIZE(args), args);\n}\n\nMAYBE_STATIC ssize_t read(int fd, void *buffer, size_t size)\n{\n    void *args[3] = {0};\n    ssize_t ret = -1;\n    args[0] = (void *)(unsigned long)fd;\n    args[1] = buffer;\n    args[2] = (void *)(unsigned long)size;\n    if (fd < 3)\n    {\n        return _read_r(_REENT, fd, buffer, size);\n    }\n    hal_dcache_invalidate((unsigned long)buffer, size);\n    ret = func_stub(RPCCALL_FSYS(read), 1, ARRAY_SIZE(args), args);\n    hal_dcache_invalidate((unsigned long)buffer, size);\n    return ret;\n}\n\nMAYBE_STATIC ssize_t write(int fd, void *buffer, size_t size)\n{\n    void *args[3] = {0};\n    args[0] = (void *)(unsigned long)fd;\n    args[1] = buffer;\n    args[2] = (void *)(unsigned long)size;\n    if (fd < 3)\n    {\n        return _write_r(_REENT, fd, buffer, size);\n    }\n    hal_dcache_clean((unsigned long)buffer, size);\n    return func_stub(RPCCALL_FSYS(write), 1, ARRAY_SIZE(args), args);\n}\n\nMAYBE_STATIC off_t lseek(int fd, off_t offset, int whence)\n{\n    void *args[3] = {0};\n    args[0] = (void *)(unsigned long)fd;\n    args[1] = (void *)(unsigned long)offset;\n    args[2] = (void *)(unsigned long)whence;\n    return func_stub(RPCCALL_FSYS(lseek), 1, ARRAY_SIZE(args), args);\n}\n\n#ifndef _MAYBE_STATIC\nMAYBE_STATIC int fstat(int fd, struct stat *st)\n{\n    void *args[2] = {0};\n    int ret = -1;\n    struct stat *st_align = amp_align_malloc(sizeof(*st));\n    if (!st_align)\n    {\n        return -1;\n    }\n    memset(st_align, 0, sizeof(*st));\n    args[0] = (void *)(unsigned long)fd;\n    args[1] = st_align;\n    hal_dcache_clean((unsigned long)st_align, sizeof(struct stat));\n    ret = func_stub(RPCCALL_FSYS(fstat), 1, ARRAY_SIZE(args), args);\n    hal_dcache_invalidate((unsigned long)st_align, sizeof(struct stat));\n    memcpy(st, st_align, sizeof(struct stat));\n    amp_align_free(st_align);\n    return ret;\n}\n\nMAYBE_STATIC int stat(const char *path, struct stat *st)\n{\n    void *args[3] = {0};\n    int ret = -1;\n    int pathSize = strlen(path) + 1;\n    char *align_path = amp_align_malloc(pathSize);\n    if (!align_path)\n    {\n        return -1;\n    }\n    memset(align_path, 0, pathSize);\n    memcpy(align_path, path, pathSize);\n    struct stat *st_align = amp_align_malloc(sizeof(*st));\n    if (!st_align)\n    {\n        amp_align_free(align_path);\n        return -1;\n    }\n    memset(st_align, 0, sizeof(*st));\n\n    args[0] = align_path;\n    args[1] = (void *)(unsigned long)pathSize;\n    args[2] = st_align;\n\n    hal_dcache_clean((unsigned long)align_path, pathSize);\n    hal_dcache_clean((unsigned long)st_align, sizeof(struct stat));\n\n    ret = func_stub(RPCCALL_FSYS(stat), 1, ARRAY_SIZE(args), args);\n\n    hal_dcache_invalidate((unsigned long)st_align, sizeof(struct stat));\n    memcpy(st, st_align, sizeof(struct stat));\n    amp_align_free(st_align);\n    amp_align_free(align_path);\n    return ret;\n}\n#endif\n\nMAYBE_STATIC int unlink(const char *path)\n{\n    void *args[2] = {0};\n    int ret = -1;\n    int pathSize = strlen(path) + 1;\n    char *align_path = amp_align_malloc(pathSize);\n    if (!align_path)\n    {\n        return -1;\n    }\n    memset(align_path, 0, pathSize);\n    memcpy(align_path, path, pathSize);\n    args[0] = align_path;\n    args[1] = (void *)(unsigned long)pathSize;\n    hal_dcache_clean((unsigned long)align_path, pathSize);\n    ret = func_stub(RPCCALL_FSYS(unlink), 1, ARRAY_SIZE(args), args);\n    amp_align_free(align_path);\n    return ret;\n}\n\n#ifndef _MAYBE_STATIC\nMAYBE_STATIC int rename(const char *old, const char *new)\n{\n    void *args[4] = {0};\n    int ret = -1;\n    int oldSize = strlen(old) + 1;\n    int newSize = strlen(new) + 1;\n    char *align_old = amp_align_malloc(oldSize);\n    if (!align_old)\n    {\n        return -1;\n    }\n    char *align_new = amp_align_malloc(newSize);\n    if (!align_new)\n    {\n        amp_align_free(align_old);\n        return -1;\n    }\n    memset(align_new, 0, newSize);\n    memcpy(align_new, new, newSize);\n    memset(align_old, 0, oldSize);\n    memcpy(align_old, old, oldSize);\n\n    args[0] = align_old;\n    args[1] = (void *)(unsigned long)oldSize;\n    args[2] = align_new;\n    args[3] = (void *)(unsigned long)newSize;\n    hal_dcache_clean((unsigned long)align_old, oldSize);\n    hal_dcache_clean((unsigned long)align_new, newSize);\n    ret = func_stub(RPCCALL_FSYS(rename), 1, ARRAY_SIZE(args), args);\n    amp_align_free(align_old);\n    amp_align_free(align_new);\n    return ret;\n}\n#endif\n\nMAYBE_STATIC DIR *opendir(const char *path)\n{\n    DIR *ret = NULL;\n    void *args[2] = {0};\n    int pathSize = strlen(path) + 1;\n    char *align_path = amp_align_malloc(pathSize);\n    if (!align_path)\n    {\n        return NULL;\n    }\n    memset(align_path, 0, pathSize);\n    memcpy(align_path, path, pathSize);\n    args[0] = align_path;\n    args[1] = (void *)(unsigned long)pathSize;\n    hal_dcache_clean((unsigned long)align_path, pathSize);\n    ret = (void *)func_stub(RPCCALL_FSYS(opendir), 1, ARRAY_SIZE(args), args);\n    if (ret)\n    {\n        hal_dcache_invalidate((unsigned long)ret, sizeof(*ret));\n    }\n    amp_align_free(align_path);\n    return ret;\n}\n\nMAYBE_STATIC struct dirent *readdir(DIR *pdir)\n{\n    struct dirent *ent = NULL;\n    void *args[1] = {0};\n    args[0] = pdir;\n    hal_dcache_clean((unsigned long)pdir, sizeof(*pdir));\n    ent = (void *)func_stub(RPCCALL_FSYS(readdir), 1, ARRAY_SIZE(args), args);\n    if (ent)\n    {\n        hal_dcache_invalidate((unsigned long)ent, sizeof(*ent));\n    }\n    return ent;\n}\n\nMAYBE_STATIC int closedir(DIR *pdir)\n{\n    void *args[1] = {0};\n    args[0] = pdir;\n    hal_dcache_clean((unsigned long)pdir, sizeof(*pdir));\n    return func_stub(RPCCALL_FSYS(closedir), 1, ARRAY_SIZE(args), args);\n}\n\n#ifndef _MAYBE_STATIC\nMAYBE_STATIC int mkdir(const char *name, mode_t mode)\n{\n    void *args[3] = {0};\n    int ret = -1;\n    int nameSize = strlen(name) + 1;\n    char *align_name = amp_align_malloc(nameSize);\n    if (!align_name)\n    {\n        return -1;\n    }\n    memset(align_name, 0, nameSize);\n    memcpy(align_name, name, nameSize);\n    args[0] = align_name;\n    args[1] = (void *)(unsigned long)nameSize;\n    args[2] = (void *)(unsigned long)mode;\n    hal_dcache_clean((unsigned long)align_name, nameSize);\n    ret = func_stub(RPCCALL_FSYS(mkdir), 1, ARRAY_SIZE(args), args);\n    amp_align_free(align_name);\n    return ret;\n}\n#endif\n\nMAYBE_STATIC int rmdir(const char *name)\n{\n    void *args[2] = {0};\n    int ret = -1;\n    int nameSize = strlen(name) + 1;\n    char *align_name = amp_align_malloc(nameSize);\n    if (!align_name)\n    {\n        return -1;\n    }\n    memset(align_name, 0, nameSize);\n    memcpy(align_name, name, nameSize);\n    args[0] = align_name;\n    args[1] = (void *)(unsigned long)nameSize;\n    hal_dcache_clean((unsigned long)align_name, nameSize);\n    ret = func_stub(RPCCALL_FSYS(rmdir), 1, ARRAY_SIZE(args), args);\n    amp_align_free(align_name);\n    return ret;\n}\n\nMAYBE_STATIC int access(const char *name, int amode)\n{\n    void *args[3] = {0};\n    int ret = -1;\n    int nameSize = strlen(name) + 1;\n    char *align_name = amp_align_malloc(nameSize);\n    if (!align_name)\n    {\n        return -1;\n    }\n    memset(align_name, 0, nameSize);\n    memcpy(align_name, name, nameSize);\n    args[0] = align_name;\n    args[1] = (void *)(unsigned long)nameSize;\n    args[2] = (void *)(unsigned long)amode;\n    hal_dcache_clean((unsigned long)align_name, nameSize);\n    ret = func_stub(RPCCALL_FSYS(access), 1, ARRAY_SIZE(args), args);\n    amp_align_free(align_name);\n    return ret;\n}\n\nMAYBE_STATIC int truncate(const char *name, off_t length)\n{\n    void *args[3] = {0};\n    int ret = -1;\n    int nameSize = strlen(name) + 1;\n    char *align_name = amp_align_malloc(nameSize);\n    if (!align_name)\n    {\n        return -1;\n    }\n    memset(align_name, 0, nameSize);\n    memcpy(align_name, name, nameSize);\n    args[0] = align_name;\n    args[1] = (void *)(unsigned long)nameSize;\n    args[2] = (void *)(unsigned long)length;\n    hal_dcache_clean((unsigned long)align_name, nameSize);\n    ret = func_stub(RPCCALL_FSYS(truncate), 1, ARRAY_SIZE(args), args);\n    amp_align_free(align_name);\n    return ret;\n}\n\nMAYBE_STATIC int statfs(const char *path, struct statfs *buf)\n{\n    void *args[3] = {0};\n    int ret = -1;\n    int pathSize = strlen(path) + 1;\n    char *align_path = amp_align_malloc(pathSize);\n    if (!align_path)\n    {\n        return -1;\n    }\n    char *align_statfs = amp_align_malloc(sizeof(struct statfs));\n    if (!align_statfs)\n    {\n        amp_align_free(align_statfs);\n        return -1;\n    }\n    memset(align_path, 0, pathSize);\n    memcpy(align_path, path, pathSize);\n    memset(align_statfs, 0, sizeof(struct statfs));\n\n    args[0] = align_path;\n    args[1] = (void *)(unsigned long)pathSize;\n    args[2] = align_statfs;\n\n    hal_dcache_clean((unsigned long)align_path, pathSize);\n    hal_dcache_clean((unsigned long)align_statfs, sizeof(struct statfs));\n    ret = func_stub(RPCCALL_FSYS(statfs), 1, ARRAY_SIZE(args), args);\n\n    hal_dcache_invalidate((unsigned long)align_statfs, sizeof(struct statfs));\n    memcpy(buf, align_statfs, sizeof(struct statfs));\n\n    amp_align_free(align_path);\n    amp_align_free(align_statfs);\n    return ret;\n}\n\nMAYBE_STATIC int fstatfs(int fd, struct statfs *buf)\n{\n    void *args[2] = {0};\n    int ret = -1;\n    char *align_statfs = amp_align_malloc(sizeof(struct statfs));\n    if (!align_statfs)\n    {\n        return -1;\n    }\n    args[0] = (void *)(unsigned long)fd;\n    args[1] = align_statfs;\n\n    hal_dcache_clean((unsigned long)align_statfs, sizeof(struct statfs));\n    ret = func_stub(RPCCALL_FSYS(fstatfs), 1, ARRAY_SIZE(args), args);\n\n    hal_dcache_invalidate((unsigned long)align_statfs, sizeof(struct statfs));\n    memcpy(buf, align_statfs, sizeof(struct statfs));\n\n    amp_align_free(align_statfs);\n    return ret;\n}\n\nMAYBE_STATIC int fsync(int fd)\n{\n    void *args[1] = {0};\n    args[0] = (void *)(unsigned long)fd;\n\n    return func_stub(RPCCALL_FSYS(fsync), 1, ARRAY_SIZE(args), args);\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"rpcli-\u8de8\u6838\u7ec8\u7aef\u5b9e\u73b0",children:"RPCLI \u8de8\u6838\u7ec8\u7aef\u5b9e\u73b0"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"rpcconsole_stub.c"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <stdlib.h>\n#include <console.h>\n\n#include <sunxi_amp.h>\n#include <hal_cache.h>\n\n#define SEND_TO_32BIT (1)\n#define SEND_TO_64BIT (2)\n\nstruct rpcconsole_arg_t\n{\n    uint32_t argc;\n    uint32_t flag;\n    uint64_t argv_64[SUNXI_AMP_SH_MAX_CMD_ARGS];\n    uint32_t argv_32[SUNXI_AMP_SH_MAX_CMD_ARGS];\n    union\n    {\n        char *argv_cmd;\n        uint64_t argv_cmd_data;\n    };\n};\n\nstatic int cmd_rpcconsole(int argc, char **argv)\n{\n    int ret = -1;\n    int i;\n\n    if (argc <= 2)\n    {\n        printf("Usage: rpccli [arm|dsp|rv] commandname [arg0 ...] \\n");\n        return -1;\n    }\n    if (argc > SUNXI_AMP_SH_MAX_CMD_ARGS)\n    {\n        printf("maximum number of arg:%d\\n", SUNXI_AMP_SH_MAX_CMD_ARGS);\n        return -1;\n    }\n\n    struct rpcconsole_arg_t *rpc_arg = amp_align_malloc(sizeof(struct rpcconsole_arg_t));\n    if (rpc_arg == NULL)\n    {\n        printf("Alloc memory failed!\\n");\n        return -1;\n    }\n    memset(rpc_arg, 0, sizeof(struct rpcconsole_arg_t));\n\n    char *rpc_args_cmd = amp_align_malloc(SH_MAX_CMD_LEN);\n    if (rpc_args_cmd == NULL)\n    {\n        printf("Alloc memory failed!\\n");\n        amp_align_free(rpc_arg);\n        return -1;\n    }\n    memset(rpc_args_cmd, 0, SH_MAX_CMD_LEN);\n\n    rpc_arg->argv_cmd = rpc_args_cmd;\n    rpc_arg->argc = argc - 2;\n\n    for (i = 2; i < argc; i++)\n    {\n        rpc_arg->argv_32[i - 2] = (uint32_t)(unsigned long)rpc_args_cmd;\n        rpc_arg->argv_64[i - 2] = (uint32_t)(unsigned long)rpc_args_cmd;\n        memcpy(rpc_args_cmd, argv[i], strlen(argv[i]));\n        rpc_args_cmd += ALIGN_UP((strlen(argv[i]) + 1), 4);\n    }\n\n    void *args[1] = {0};\n    args[0] = rpc_arg;\n\n    if (!strcmp("arm", argv[1]))\n    {\n        rpc_arg->flag = SEND_TO_32BIT;\n        hal_dcache_clean((unsigned long)rpc_arg, sizeof(*rpc_arg));\n        hal_dcache_clean((unsigned long)rpc_arg->argv_cmd, SH_MAX_CMD_LEN);\n\n        ret = func_stub(RPCCALL_ARM_CONSOLE(exe_cmd), 1, 1, (void *)&args);\n    }\n    else if (!strcmp("dsp", argv[1]))\n    {\n        rpc_arg->flag = SEND_TO_32BIT;\n        hal_dcache_clean((unsigned long)rpc_arg, sizeof(*rpc_arg));\n        hal_dcache_clean((unsigned long)rpc_arg->argv_cmd, SH_MAX_CMD_LEN);\n\n        ret = func_stub(RPCCALL_DSP_CONSOLE(exe_cmd), 1, 1, (void *)&args);\n    }\n    else if (!strcmp("rv", argv[1]))\n    {\n        rpc_arg->flag = SEND_TO_64BIT;\n        hal_dcache_clean((unsigned long)rpc_arg, sizeof(*rpc_arg));\n        hal_dcache_clean((unsigned long)rpc_arg->argv_cmd, SH_MAX_CMD_LEN);\n\n        ret = func_stub(RPCCALL_RV_CONSOLE(exe_cmd), 1, 1, (void *)&args);\n    }\n\n    amp_align_free(rpc_arg->argv_cmd);\n    amp_align_free(rpc_arg);\n\n    return ret;\n}\nFINSH_FUNCTION_EXPORT_CMD(cmd_rpcconsole, rpccli, exe);\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"rpcconsole_ser.c"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <stdlib.h>\n#include <console.h>\n#include <barrier.h>\n\n#include <sunxi_amp.h>\n#include <hal_cache.h>\n\n#define SEND_TO_32BIT (1)\n#define SEND_TO_64BIT (2)\n\nstruct rpcconsole_arg_t\n{\n    uint32_t argc;\n    uint32_t flag;\n    uint64_t argv_64[SUNXI_AMP_SH_MAX_CMD_ARGS];\n    uint32_t argv_32[SUNXI_AMP_SH_MAX_CMD_ARGS];\n    union\n    {\n        char *argv_cmd;\n        uint64_t argv_cmd_data;\n    };\n};\n\nstatic int _execute_cmd(struct rpcconsole_arg_t *rpc_arg)\n{\n    char *command_name;\n    struct finsh_syscall *call;\n    int ret = -1;\n\n    hal_dcache_invalidate((unsigned long)rpc_arg, (unsigned long)sizeof(*rpc_arg));\n#ifndef CONFIG_ARCH_DSP\n    dsb();\n    isb();\n#endif\n    hal_dcache_invalidate((unsigned long)rpc_arg->argv_cmd, SH_MAX_CMD_LEN);\n\n    if (rpc_arg->flag == SEND_TO_32BIT) {\n        command_name = (char *)(unsigned long)(rpc_arg->argv_32[0]);\n    } else {\n        command_name = (char *)(unsigned long)(rpc_arg->argv_64[0]);\n    }\n\n    call = finsh_syscall_lookup(command_name);\n    if (call == NULL || call->func == NULL)\n    {\n        printf("The command(%s) no exist !\\n", command_name);\n        return -1;\n    }\n\n    if (rpc_arg->flag == SEND_TO_32BIT) {\n        ret = call->func(rpc_arg->argc, (char **)(unsigned long)rpc_arg->argv_32);\n    } else {\n        ret = call->func(rpc_arg->argc, (char **)(unsigned long)rpc_arg->argv_64);\n    }\n    hal_dcache_invalidate((unsigned long)rpc_arg, (unsigned long)sizeof(*rpc_arg));\n    hal_dcache_invalidate((unsigned long)rpc_arg->argv_cmd, SH_MAX_CMD_LEN);\n    return ret;\n}\n\nsunxi_amp_func_table console_table[] =\n{\n    {.func = (void *)&_execute_cmd, .args_num = 1, .return_type = RET_POINTER},\n};\n'})}),"\n",(0,r.jsx)(e.h2,{id:"sunxiamp-\u6ce8\u610f\u4e8b\u9879",children:"Sunxi\u2011AMP \u6ce8\u610f\u4e8b\u9879"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\u6ce8\u610f\u591a\u6838\u901a\u4fe1\u65f6\u7684\u6570\u636e ",(0,r.jsx)(e.code,{children:"Buffer"})," \u7684\u8d77\u59cb\u5730\u5740\u548c\u957f\u5ea6\uff0c\u8d77\u59cb\u5730\u5740\u8981\u6c42\u6309\u7167\u7cfb\u7edf\u4e2d\u6700\u5927\u7684 ",(0,r.jsx)(e.code,{children:"CacheLine\uff0864B\uff09"}),"\u5bf9\u9f50\uff0c\u957f\u5ea6\u8981\u6c42\u6570\u636e ",(0,r.jsx)(e.code,{children:"Buffer"})," \u72ec\u5360 ",(0,r.jsx)(e.code,{children:"CacheLine"}),"\uff0c\u4e0d\u5141\u8bb8\u548c\u5176\u4ed6\u6570\u636e\u5171\u4eab ",(0,r.jsx)(e.code,{children:"CacheLine"}),"\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:["\u5982\u679c\u5728\u8fdc\u7a0b\u8c03\u7528\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5c06\u5185\u5b58\u6570\u636e\u4f20\u9012\u7ed9\u53e6\u5916\u7684 CPU \u5904\u7406\u5668\uff0c\u5728\u6267\u884c\u8fdc\u7a0b\u51fd\u6570\u8c03\u7528\u524d\u9700\u8981\u8c03\u7528 ",(0,r.jsx)(e.code,{children:"hal_dcache_clean"})," \u5c06\u8c03\u7528\u6838\u7684 ",(0,r.jsx)(e.code,{children:"CPU Dcache"})," \u6570\u636e\u5237\u56de\u5185\u5b58\u4ecb\u8d28\uff0c\u53ef\u4ee5\u53c2\u8003 ",(0,r.jsx)(e.code,{children:"lichee/rtos\u2011components/aw/amp/service/flashc/flashc_stub.c"})," \u4e2d\u7684 ",(0,r.jsx)(e.code,{children:"nor_write"})," \u51fd\u6570\uff1b\u5982\u679c\u9700\u8981\u4ece\u53e6\u5916\u7684\u5904\u7406\u5668\u83b7\u53d6\u6570\u636e\uff0c\u5728\u6267\u884c\u8fdc\u7a0b\u51fd\u6570\u8c03\u7528\u540e\uff0c\u9700\u8981\u6267\u884c ",(0,r.jsx)(e.code,{children:"hal_dcache_invalidate"})," \u5c06\u672c\u5730 ",(0,r.jsx)(e.code,{children:"CPU Dcache"}),"\u65e0\u6548\u6389\uff0c\u4ee5\u907f\u514d\u83b7\u53d6\u65e7\u7684\u5386\u53f2\u6570\u636e\uff0c\u53ef\u4ee5\u53c2\u8003",(0,r.jsx)(e.code,{children:"lichee/rtos\u2011components/aw/amp/service/flashc/flashc_stub.c"})," \u4e2d\u7684 ",(0,r.jsx)(e.code,{children:"nor_read"})," \u51fd\u6570\u3002"]}),"\n",(0,r.jsxs)(e.li,{children:["\u6ce8\u610f ",(0,r.jsx)(e.code,{children:"Cache"})," \u7684 ",(0,r.jsx)(e.code,{children:"Dirty"})," \u4f4d\u3002\u6869\u5b50\u51fd\u6570 (",(0,r.jsx)(e.code,{children:"stub"})," \u7aef) \u9700\u8981\u5148\u5c06\u4f20\u7ed9\u670d\u52a1\u51fd\u6570 (",(0,r.jsx)(e.code,{children:"service"})," \u7aef) \u7684 ",(0,r.jsx)(e.code,{children:"buffer"})," \u6240\u5bf9\u5e94\u7684 ",(0,r.jsx)(e.code,{children:"cacheline"})," \u65e0\u6548\uff0c\u91cd\u70b9\u5728\u4e8e\u6e05\u9664 ",(0,r.jsx)(e.code,{children:"dirty"})," \u4f4d\uff0c\u5426\u5219\u5728 ",(0,r.jsx)(e.code,{children:"cachelien"})," \u98a0\u7c38\u6362\u51fa\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fd0\u884c\u6869\u5b50\u51fd\u6570\u6240\u5728\u6838\u5c06 ",(0,r.jsx)(e.code,{children:"buffer"})," \u5bf9\u5e94\u7684\u810f ",(0,r.jsx)(e.code,{children:"cacheline"})," \u6362\u51fa\u5e76\u56de\u5199\uff0c\u8986\u76d6\u53e6\u5916\u4e00\u4e2a\u6838\u521a\u5199\u7684\u6570\u636e\u3002\u670d\u52a1\u51fd\u6570 (",(0,r.jsx)(e.code,{children:"service"})," \u7aef) \u9700\u8981\u5c06\u4e0d\u518d\u4f7f\u7528\u7684 ",(0,r.jsx)(e.code,{children:"buffer"})," \u5bf9\u5e94\u7684 ",(0,r.jsx)(e.code,{children:"cacheline"})," \u65e0\u6548\u6389\u6216\u8005\u5237\u56de\u5185\u5b58\uff0c\u91cd\u70b9\u5728\u4e8e\u6e05\u9664 ",(0,r.jsx)(e.code,{children:"dirty"})," \u4f4d\uff0c\u4ee5\u9884\u9632\u5728 ",(0,r.jsx)(e.code,{children:"cahcline"})," \u98a0\u7c38\u6362\u51fa\u7684\u8fc7\u7a0b\u4e2d\u5c06 ",(0,r.jsx)(e.code,{children:"buffer"})," \u5bf9\u5e94\u7684\u810f ",(0,r.jsx)(e.code,{children:"cacheline"})," \u4e2d\u7684\u6570\u636e\u56de\u5199\uff0c\u6b64\u65f6\u6781\u6709\u53ef\u80fd\u7be1\u6539\u53e6\u5916\u4e00\u4e2a\u6838\u7684\u6570\u636e\u3002"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u4e3e\u4f8b\u5206\u6790\uff1a\u5728 ",(0,r.jsx)(e.code,{children:"lichee/rtos\u2011components/aw/amp/service/flashc/flashc_stub.c"})," \u4e2d\u7684 ",(0,r.jsx)(e.code,{children:"nor_read"})," \u51fd\u6570\u4e2d\uff0c\u6838\u5728\u8c03\u7528 ",(0,r.jsx)(e.code,{children:"func_stub(RPCCALL_FLASHC(nor_read), 1, ARRAY_SIZE(args), args);"}),"\u4e4b\u524d\uff0c\u9700\u8981\u5148\u8c03\u7528 ",(0,r.jsx)(e.code,{children:"hal_dcache_clean_invalidate((unsigned long)buffer, size);"}),"\u63a5\u53e3\u6e05\u9664 ",(0,r.jsx)(e.code,{children:"buffer"})," \u5bf9\u5e94",(0,r.jsx)(e.code,{children:"cacheline"})," \u7684 ",(0,r.jsx)(e.code,{children:"dirty"})," \u4f4d\uff0c\u5426\u5219\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e2d\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4 M33 \u6838\u7684\u670d\u52a1\u51fd\u6570\u521a\u5c06\u6570\u636e\u5237\u56de\u5185\u5b58\uff0cC906 \u6838\u53c8\u56e0\u4e3a ",(0,r.jsx)(e.code,{children:"cacheline"})," \u7684\u6362\u51fa\u628a ",(0,r.jsx)(e.code,{children:"buffer"})," \u7684\u6570\u636e\u7ed9\u4fee\u6539\u4e86\u3002\u540c\u7406\uff0c\u5728 ",(0,r.jsx)(e.code,{children:"lichee/rtos\u2011components/aw/amp/service/flashc/flashc_ser.c"})," \u7684 ",(0,r.jsx)(e.code,{children:"_nor_write"})," \u51fd\u6570\u4e2d\uff0cM33 \u6838\u5728\u8c03\u7528\u5b8c ",(0,r.jsx)(e.code,{children:"nor_write"})," \u4e4b\u540e\uff0c\u9700\u8981\u518d\u4e00\u6b21\u8c03\u7528 ",(0,r.jsx)(e.code,{children:"hal_dcache_invalidate((unsigned long)buf, size);"}),"\uff0c\u56e0\u4e3a ",(0,r.jsx)(e.code,{children:"nor_write"})," \u4e2d\u53ef\u80fd\u5b58\u5728\u4fee\u6539 ",(0,r.jsx)(e.code,{children:"buffer"})," \u6570\u636e\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u6837\u7684\u8bdd ",(0,r.jsx)(e.code,{children:"buffer"})," \u5bf9\u5e94\u7684 ",(0,r.jsx)(e.code,{children:"cacheline"})," \u5728 M33\u6838\u4e0a\u5c31\u662f\u810f\u7684\uff0c\u5728 M33 \u6838\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6781\u6709\u53ef\u80fd\u4f1a\u5c06\u810f\u6570\u636e\u5199\u5165\u5185\u5b58\u3002\u800c\u6b64\u65f6\uff0c",(0,r.jsx)(e.code,{children:"buffer"})," \u5728C906 \u4e0a\u53ef\u80fd\u5df2\u88ab\u7533\u8bf7\u91ca\u653e\u632a\u4e3a\u4ed6\u7528\uff0cM33 \u6838\u5c06\u810f\u6570\u636e\u5199\u56de\u5185\u5b58\u5c31\u76f4\u63a5\u7be1\u6539\u4e86 C906 \u4e0a\u8fd0\u884c\u7684\u6b63\u5e38\u6570\u636e\u3002"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"\u5f53\u524d\u652f\u6301\u7684\u6700\u5927\u53c2\u6570\u4e2a\u6570\u4e3a 8 \u4e2a\u3002"}),"\n",(0,r.jsx)(e.li,{children:"64bit \u6570\u636e\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u4e00\u5f8b\u88ab\u622a\u65ad\u4e3a 32bit \u6570\u636e\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u4e0d\u53ef\u5728\u4e2d\u65ad\u51fd\u6570\u4e2d\u4f7f\u7528\u8fdc\u7a0b\u8c03\u7528\u3002"}),"\n",(0,r.jsxs)(e.li,{children:["\u5728 ",(0,r.jsx)(e.code,{children:"sunxi_amp.h"})," \u4e2d\u6dfb\u52a0 ",(0,r.jsx)(e.code,{children:"#define AMP_DEBUG"}),"\uff0c\u5219\u4f1a\u5728\u5173\u952e\u8282\u70b9\u4e2d\u4f7f\u80fd\u7ec4\u4ef6\u7684\u8c03\u8bd5\u4fe1\u606f\u8f93\u51fa\uff0c\u7528\u4e8e\u5206\u6790\u8fdc\u7a0b\u51fd\u6570\u8c03\u7528\u9519\u8bef\u7b49\u95ee\u9898\u3002"]}),"\n",(0,r.jsx)(e.li,{children:"\u5728\u591a\u4e2a\u6838\u4e4b\u95f4\u4f20\u9012\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u65f6\uff0c\u8be5\u7ed3\u6784\u5185\u90e8\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528\u6307\u9488\u7c7b\u578b\uff0c\u4e3b\u8981\u7684\u539f\u56e0\u5728\u4e8e\u56e0\u4e09\u4e2a\u6838\u4f4d\u5bbd\u4e0d\u4e00\u81f4\uff0c\u5bf9\u6307\u9488\u7c7b\u578b\u7684\u957f\u5ea6\u7406\u89e3\u5b58\u5728\u5dee\u5f02\uff0c\u90a3\u4e48\u5c31\u4f1a\u5bfc\u81f4\u7ed3\u6784\u4f53\u5185\u7684\u6570\u636e\u5e03\u5c40\u5b58\u5728\u5dee\u5f02\u3002\u5f53\u4e24\u4e2a\u4e0d\u540c\u4f4d\u5bbd\u7684 CPU \u901a\u8fc7\u540c\u4e00\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\u6307\u5411\u7684\u5730\u5740\u53d6\u503c\u65f6\uff0c\u5c31\u4f1a\u5bfc\u81f4\u53d6\u503c\u9519\u8bef\u3002\u5982\u4ee5\u4e0b\u4f8b\u5b50\uff1a"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"struct test_t {\n    char *ptr;\n    int offset;\n};\n\nstruct test_t a;\nptr = &a;                // ptr \u4e3a\u6307\u5411 struct test_t \u7ed3\u6784\u4f53\u7684\u6307\u9488\uff0c\u5047\u8bbe\u5176\u5730\u5740\u4e3a 0x4000000;\n\nint offset = ptr\u2011>offset // \u5728 32bit \u7cfb\u7edf\u4f1a\u53bb\u8bbf\u95ee 0x4000004;\nint offset = ptr\u2011>offset // \u5728 64bit \u7cfb\u7edf\u4f1a\u53bb\u8bbf\u95ee 0x4000008;\n"})}),"\n",(0,r.jsx)(e.h2,{id:"rpdata-\u6838\u95f4\u901a\u8baf",children:"RPDATA \u6838\u95f4\u901a\u8baf"}),"\n",(0,r.jsx)(e.p,{children:"\u4e3a\u4e86\u4e0d\u540c\u6838\u4e4b\u95f4\u7684\u901a\u4fe1\u4ea4\u4e92\uff0c\u57fa\u4e8e\u786c\u4ef6 msgbox \u529f\u80fd\uff0c\u8f6f\u4ef6\u4e0a\u63d0\u4f9b\u4e86 AMP \u901a\u4fe1\u673a\u5236\uff0c\u800c\u5728\u8be5\u673a\u5236\u4e0a\u6211\u4eec\u63d0\u4f9b\u4e86 rpdata \u63a5\u53e3\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u8f83\u5bb9\u6613\u5b9e\u73b0\u6838\u95f4\u901a\u4fe1\u3002"}),"\n",(0,r.jsx)(e.h3,{id:"rpdata-\u63a5\u53e3\u4ecb\u7ecd",children:"rpdata \u63a5\u53e3\u4ecb\u7ecd"}),"\n",(0,r.jsx)(e.h4,{id:"\u521b\u5efa-rpdata",children:"\u521b\u5efa rpdata"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"rpdata_t *rpdata_create(int dir, const char *type, const char *name, size_t buf_len)\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["dir: \u6307\u5b9a\u8fdc\u7aef\u6838\u3002 1",":M33","; 2",":RV","; 3",":DSP"]}),"\n",(0,r.jsx)(e.li,{children:"type: \u7c7b\u578b\uff0c\u4f20\u8f93\u6570\u636e\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u53ef\u81ea\u5b9a\u4e49,\u7c7b\u578b\u548c\u540d\u79f0\u4e00\u8d77\u6784\u6210\u552f\u4e00\u6807\u8bc6"}),"\n",(0,r.jsx)(e.li,{children:"name: \u540d\u79f0\uff0c\u4f20\u8f93\u6570\u636e\u540d\u79f0\uff0c\u5b57\u7b26\u4e32\u53ef\u81ea\u5b9a\u4e49,\u7c7b\u578b\u548c\u540d\u79f0\u4e00\u8d77\u6784\u6210\u552f\u4e00\u6807\u8bc6"}),"\n",(0,r.jsx)(e.li,{children:"buf_len: buffer\u5927\u5c0f\uff0c\u8be5buffer\u7528\u4e8e\u4e34\u65f6\u4fdd\u5b58\u8de8\u6838\u4f20\u8f93\u6570\u636e"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u6210\u529f\u5219\u8fd4\u56derpdata\u53e5\u67c4\uff0c\u5931\u8d25\u8fd4\u56deNULL\u3002"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"type \u548c name \u7528\u4e8e\u6807\u8bc6\u552f\u4e00\u7684\u4f20\u8f93\u901a\u9053, \u53ef\u81ea\u884c\u8bbe\u5b9a\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc7 16 \u4e2a\u5b57\u8282\u5373\u53ef\u3002\u53ef\u4ee5\u901a\u8fc7 rpd \u2011l \u547d\u4ee4\u67e5\u770b\u5f53\u524d\u5df2\u7ecf\u7533\u8bf7\u7684 rpdata \u4ee5\u53ca\u5bf9\u5e94\u7684\u72b6\u6001\u3002rpdata_create \u51fd\u6570\u4e0d\u4f1a\u963b\u585e\u3002\u5728\u521b\u5efa\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u8fde\u63a5-rpdata",children:"\u8fde\u63a5 rpdata"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"rpdata_t *rpdata_connect(int dir, const char *type, const char *name)\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["dir: \u6307\u5b9a\u8fdc\u7aef\u6838\u3002 1",":M33","; 2",":RV","; 3",":DSP"]}),"\n",(0,r.jsx)(e.li,{children:"type: \u7c7b\u578b\uff0c\u4f20\u8f93\u6570\u636e\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u53ef\u81ea\u5b9a\u4e49,\u7c7b\u578b\u548c\u540d\u79f0\u4e00\u8d77\u6784\u6210\u552f\u4e00\u6807\u8bc6"}),"\n",(0,r.jsx)(e.li,{children:"name: \u540d\u79f0\uff0c\u4f20\u8f93\u6570\u636e\u540d\u79f0\uff0c\u5b57\u7b26\u4e32\u53ef\u81ea\u5b9a\u4e49,\u7c7b\u578b\u548c\u540d\u79f0\u4e00\u8d77\u6784\u6210\u552f\u4e00\u6807\u8bc6"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u6210\u529f\u5219\u8fd4\u56derpdata\u53e5\u67c4\uff0c\u5931\u8d25\u8fd4\u56deNULL\u3002"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"rpdata_create \u548c rpdata_connect \u4f5c\u7528\u662f\u7c7b\u4f3c\u7684\uff0c\u4f46\u662f\u524d\u8005\u4f1a\u521b\u5efa\u7528\u4e8e\u4f20\u8f93\u6570\u636e\u7684 buffer\uff0c\u540e\u8005\u4e0d\u4f1a\u3002\u56e0\u6b64\u4e24\u6838\u4e4b\u95f4\u901a\u4fe1\uff0c\u5fc5\u987b\u5206\u522b\u4f7f\u7528\u8fd9\u4e24\u4e2a\u63a5\u53e3\uff0c\u800c\u4e0d\u80fd\u5171\u540c\u4f7f\u7528 rpdata_create \u6216\u8005 rpdata_connect\u3002rpdata_connect \u51fd\u6570\u4f1a\u963b\u585e\u3002\u5982\u679c\u8fdc\u6838\u6ca1\u6709\u8c03\u7528 rpdata_create\uff0c\u90a3\u4e48\u5c31\u4f1a\u4e00\u76f4\u963b\u585e\u7ebf\u7a0b\u3002\u6ce8\u610f\u4f7f\u7528 rpdata_connect\uff0c\u5982\u679c \u9700\u8981\u7b49\u5f85\u8fdc\u7aef\u7ebf\u7a0b\uff0c\u8bf7\u786e\u8ba4\u8be5\u7ebf\u7a0b\u662f\u5426\u53ef\u4ee5\u963b\u585e\uff0c\u4e0d\u884c\u7684\u8bdd\uff0c\u9700\u8981\u4f7f\u7528\u7ebf\u7a0b\u5355\u72ec\u7b49\u5f85\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u5f97\u5230-buffer-\u7684\u503c",children:"\u5f97\u5230 buffer \u7684\u503c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"void *rpdata_buffer_addr(rpdata_t *rpd)\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"rpd: rpdata\u53e5\u67c4"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"buff\u7684\u503c"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"\u8be5 buffer \u5730\u5740\u53ef\u7528\u4e8e\u4fdd\u5b58\u8981\u4f20\u8f93\u4ea4\u4e92\u7684\u6570\u636e"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u5224\u65ad-rpdata-\u662f\u5426\u4e3a\u8fde\u63a5\u72b6\u6001",children:"\u5224\u65ad rpdata \u662f\u5426\u4e3a\u8fde\u63a5\u72b6\u6001"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"int rpdata_is_connect(rpdata_t *rpd)\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"rpd: rpdata\u53e5\u67c4"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u8fd4\u56de0\u8868\u793a\u4e3a\u8fde\u63a5\u72b6\u6001\uff0c\u975e0\u8868\u793a\u975e\u8fde\u63a5\u72b6\u6001"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u7b49\u5f85-rpdata-\u53d8\u6210\u8fde\u63a5\u72b6\u6001",children:"\u7b49\u5f85 rpdata \u53d8\u6210\u8fde\u63a5\u72b6\u6001"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"int rpdata_wait_connect(rpdata_t *rpd)\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"rpd: rpdata\u53e5\u67c4"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u6210\u529f\u5219\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u975e0\u3002"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"\u9700\u8981\u5224\u65ad\u7b49\u5f85 rpdata \u4e3a\u8fde\u63a5\u72b6\u6001\u540e\uff0c\u624d\u53ef\u4ee5\u5f00\u59cb\u6570\u636e\u4f20\u8f93\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u8de8\u6838\u6570\u636e\u5904\u7406",children:"\u8de8\u6838\u6570\u636e\u5904\u7406"}),"\n",(0,r.jsx)(e.p,{children:"\u7528\u4e8e\u53d1\u9001\u6570\u636e\u5230\u8fdc\u7aef\u6838\uff0c\u5e76\u4e14\u8fdc\u7aef\u6838\u628a\u5904\u7406\u540e\u6570\u636e\u586b\u5145\u5230 buffer"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"int rpdata_process(rpdata_t *rpd, unsigned int offset, unsigned int data_len)\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"rpd: rpdata\u53e5\u67c4"}),"\n",(0,r.jsx)(e.li,{children:"offset: \u76f8\u5bf9\u4e8ebuffer\u7684\u504f\u79fb"}),"\n",(0,r.jsx)(e.li,{children:"data_len: \u6570\u636e\u91cf,\u5b57\u8282"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u6210\u529f\u5219\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u975e0\u3002"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"\u5904\u7406\u540e\u7684\u7ed3\u679c\u4f1a\u5b58\u4e8e buffer \u4e2d\uff0c\u5373 rpdata_buffer_addr \u5f97\u5230\u7684\u5730\u5740\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u8de8\u6838\u6570\u636e\u53d1\u9001",children:"\u8de8\u6838\u6570\u636e\u53d1\u9001"}),"\n",(0,r.jsx)(e.p,{children:"\u4ec5\u7528\u4e8e\u53d1\u9001\u6570\u636e\u5230\u8fdc\u7aef\u6838"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"int rpdata_send(rpdata_t *rpd, unsigned int offset, unsigned int data_len)\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"rpd: rpdata\u53e5\u67c4"}),"\n",(0,r.jsx)(e.li,{children:"offset: \u76f8\u5bf9\u4e8ebuffer\u7684\u504f\u79fb"}),"\n",(0,r.jsx)(e.li,{children:"data_len: \u6570\u636e\u91cf,\u5b57\u8282"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u6210\u529f\u5219\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u975e0\u3002"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"rpdata_send \u53ea\u662f\u628a buffer \u4e2d\u6570\u636e\u53d1\u9001\u5230\u8fdc\u7aef\u6838\uff0c\u800c rpdata_process \u4f1a\u5f97\u5230\u5904\u7406\u540e\u6570\u636e"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u63a5\u53d7\u8de8\u6838\u4f20\u8f93\u7684\u6570\u636e",children:"\u63a5\u53d7\u8de8\u6838\u4f20\u8f93\u7684\u6570\u636e"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"int rpdata_recv(rpdata_t *rpd, unsigned int *offset, unsigned int *data_len, int timeout_ms)\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"rpd: rpdata\u53e5\u67c4"}),"\n",(0,r.jsx)(e.li,{children:"offset: \u5f97\u5230\u76f8\u5bf9\u4e8ebuffer\u7684\u504f\u79fb"}),"\n",(0,r.jsx)(e.li,{children:"data_len: \u5f97\u5230\u6570\u636e\u91cf,\u5b57\u8282"}),"\n",(0,r.jsx)(e.li,{children:"timeout_ms: \u7b49\u5f85\u8d85\u65f6\u65f6\u95f4"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u6210\u529f\u5219\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u975e0\u3002"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"\u4f7f\u7528\u8be5\u63a5\u53e3\uff0c\u9700\u8981\u589e\u52a0 ringbuffer \u6a21\u5f0f\uff0c\u5426\u5219\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u6570\u636e\u8986\u76d6\u7684\u73b0\u8c61\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u8bbe\u7f6e\u6570\u636e\u63a5\u53d7\u56de\u8c03",children:"\u8bbe\u7f6e\u6570\u636e\u63a5\u53d7\u56de\u8c03"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"int rpdata_set_recv_cb(rpdata_t *rpd, struct rpdata_cbs *cbs)\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"rpd: rpdata\u53e5\u67c4"}),"\n",(0,r.jsx)(e.li,{children:"cbs: \u56de\u5230\u51fd\u6570\u96c6\uff0c\u5f53\u524d\u4ec5\u652f\u6301recv_cb\uff0c\u5373\u63a5\u53d7\u56de\u8c03"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u6210\u529f\u5219\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u975e0\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u6570\u636e\u63a5\u53d7\u56de\u8c03\u51fd\u6570",children:"\u6570\u636e\u63a5\u53d7\u56de\u8c03\u51fd\u6570"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"int (recv_cb_t)(rpdata_t rpd, void *data, int data_len)\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"\u6ce8\u610f\u5728\u8be5\u56de\u8c03\u7528\u628a\u6570\u636e\u5904\u7406\u597d\uff0c\u6216\u8005\u62f7\u8d1d\u51fa\u6765\uff0c\u5426\u5219\u6709\u53ef\u80fd\u4f1a\u88ab\u4e0b\u6b21\u6570\u636e\u4f20\u8f93\u8986\u76d6"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"\u9500\u6bc1-rpdata",children:"\u9500\u6bc1 rpdata"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"int rpdata_destroy(rpdata_t *rpd)\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53c2\u6570\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"rpd: rpdata\u53e5\u67c4"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"\u8fd4\u56de\u503c\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u6210\u529f\u5219\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u975e0\u3002"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"\u53ea\u6709\u4e24\u6838\u90fd\u8c03\u7528 rpdata_destroy \u624d\u4f1a\u771f\u6b63\u7684\u9500\u6bc1\uff0c\u4f46\u5bf9\u8c03\u7528\u987a\u5e8f\u4e0d\u505a\u8981\u6c42\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"rpdata-\u4f7f\u7528\u6d41\u7a0b",children:"rpdata \u4f7f\u7528\u6d41\u7a0b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-mermaid",children:"sequenceDiagram \nM33->>+M33: rpdata_create\nM33->>-RV: notify  \nRV->>+RV: rpdata_create\nRV->>-M33: ack\nRV->>RV: rpdata_set_recv_cb\nloop \u591a\u6b21\u53d1\u9001\nNote left of M33: rpdata_send\nM33->>RV: send data\nNote right of RV: \u89e6\u53d1 callback\nend \nRV->>M33: notify\nRV->>RV: rpdata_destory\nM33->>RV: wait destory\n"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"rpdata_create \u548c rpdate_connect \u7684\u8c03\u7528\u987a\u5e8f\u4e0d\u505a\u8981\u6c42\uff0c\u8c01\u5148\u6267\u884c\u90fd\u53ef\u4ee5\uff1b\u4f46\u662f rpdata_data \u662f\u4f1a\u521b\u5efa\u7528\u4e8e\u6570\u636e\u4ea4\u4e92\u7684 buffer"}),"\n",(0,r.jsx)(e.li,{children:"\u63a5\u53d7\u6570\u636e\u7aef\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 rpdata_set_recv_cb \u8bbe\u7f6e\u56de\u8c03\u6765\u5904\u7406\u6570\u636e\uff0c\u6216\u8005\u8c03\u7528 rpdata_recv \u963b\u585e\u7b49\u5f85\u63a5\u53d7\u4e92\u6570\u636e\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u4e24\u4e2a\u6838\u7684 rpdata_destroy \u8c03\u7528\u987a\u5e8f\u4e5f\u662f\u4e0d\u505a\u8981\u6c42\u7684\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"rpdata-\u793a\u4f8b",children:"rpdata \u793a\u4f8b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n#include <FreeRTOS.h>\n#include <task.h>\n#include <queue.h>\n\n#include <rpdata.h>\n#include <console.h>\n\n#include <hal_time.h>\n#include <hal_mem.h>\n#include <hal_thread.h>\n#include <md5.h>\n\n//#define RECV_CALLBACK_TEST\n\n/* print md5 check result */\nstatic int g_rpd_verbose = 0;\n\n#define configAPPLICATION_RPDATA_DEMO_PRIORITY  \\\n    (configMAX_PRIORITIES > 20 ? configMAX_PRIORITIES - 8 : configMAX_PRIORITIES - 3)\n\nstatic void rpdata_demo_usage(void)\n{\n    printf("Usgae: rpdata_demo [option]\\n");\n    printf("-h,          rpdata help\\n");\n    printf("-m,          mode, 0-send; 1-recv; 2-recv+send\\n");\n    printf("-t,          type, type name\\n");\n    printf("-n,          name, id name\\n");\n    printf("             (type + name) specify unique data xfer\\n");\n    printf("-c,          string, send string\\n");\n    printf("-i,          single test, do send or recv test once\\n");\n    printf("-d,          dir, remote processor, 1-cm33;2-c906;3-dsp\\n");\n    printf("-s,          src dir, valid in mode 2\\n");\n    printf("\\n");\n    printf("RV -> DSP\\n");\n    printf("rpdata_demo -m 0 -d 3 -t RVtoDSP -n RVsendDSPrecv\\n");\n    printf("rpccli dsp rpdata_demo -m 1 -d 2 -t RVtoDSP -n RVsendDSPrecv\\n");\n    printf("\\n");\n    printf("RV -> M33\\n");\n    printf("rpdata_demo -m 0 -d 1 -t RVtoM33 -n RVsendM33recv\\n");\n    printf("rpccli arm rpdata_demo -m 1 -d 2 -t RVtoM33 -n RVsendM33recv\\n");\n    printf("\\n");\n    printf("RV <- M33\\n");\n    printf("rpdata_demo -m 1 -d 1 -t M33toRV -n RVrecvM33send\\n");\n    printf("rpccli arm rpdata_demo -m 0 -d 2 -t M33toRV -n RVrecvM33send\\n");\n    printf("\\n");\n    printf("RV -> DSP -> M33\\n");\n    printf("rpccli dsp rpdata_demo -d 2 -t RVtoDSP -n DSPrecvRVsend -s 1 -t DSPtoM33 -n M33recvDSPsend\\n");\n    printf("rpccli arm rpdata_demo -m 1 -d 3 -t DSPtoM33 -n M33recvDSPsend\\n");\n    printf("rpdata_demo -m 0 -d 3 -t RVtoDSP -n DSPrecvRVsend\\n");\n    printf("\\n");\n    printf("RV -> DSP -> M33 -> DSP -> RV\\n");\n    printf("rpccli dsp rpdata_demo -d 2 -t RD -n rs -s 1 -t DM -n ds\\n");\n    printf("rpccli arm rpdata_demo -d 3 -t DM -n ds -s 3 -t MD -n ms\\n");\n    printf("rpccli dsp rpdata_demo -d 1 -t MD -n ms -s 2 -t DR -n ds\\n");\n    printf("rpdata_demo -m 1 -d 3 -t DR -n ds\\n");\n    printf("rpdata_demo -m 0 -d 3 -t RD -n rs\\n");\n    printf("\\n");\n    printf("RV->M33->RV process(M33 do aec process: input mic+ref, and output aec data to RV)\\n");\n    printf("rpccli arm rpdata_demo -p -m 1 -d 2 -t ALGO -n AEC\\n");\n    printf("rpdata_demo -p -m 0 -d 1 -t ALGO -n AEC\\n");\n    printf("\\n");\n}\n\nstruct rpdata_arg_test {\n    char type[32];\n    char name[32];\n    int dir;\n    char stype[32];\n    char sname[32];\n    int sdir;\n};\n\nstatic int do_rpdata_send_test(struct rpdata_arg_test *targ, void *data, uint32_t len)\n{\n    rpdata_t *rpd;\n    void *buffer;\n    int ret = -1;\n\n    printf("Cteate %s:%s.\\n", targ->type, targ->name);\n    rpd = rpdata_create(targ->dir, targ->type, targ->name, len);\n    if (!rpd) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        return -1;\n    }\n#ifndef RECV_CALLBACK_TEST\n    rpdata_set_recv_ringbuffer(rpd, 2 * rpdata_buffer_len(rpd));\n#endif\n\n    buffer = rpdata_buffer_addr(rpd);\n    if (!buffer) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n\n    memcpy(buffer, data, len);\n    rpdata_wait_connect(rpd);\n    ret = rpdata_send(rpd, 0, len);\n    if (ret != 0) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n\nexit:\n    if (rpd)\n        rpdata_destroy(rpd);\n    return ret;\n}\n\nstatic int do_rpdata_recv_test(struct rpdata_arg_test *targ, void *data, uint32_t len)\n{\n    rpdata_t *rpd;\n    char *rx_buf;\n    int ret = -1;\n\n    rx_buf = hal_malloc(len + 1);\n    if (rx_buf == NULL) {\n        printf("[%s] line:%d alloc rx buffer fialed.\\n", __func__, __LINE__);\n        return -1;\n    }\n\n    printf("connect to %s:%s.\\n", targ->type, targ->name);\n    rpd = rpdata_connect(targ->dir, targ->type, targ->name);\n    if (!rpd) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        return -1;\n    }\n#ifndef RECV_CALLBACK_TEST\n    rpdata_set_recv_ringbuffer(rpd, 2 * rpdata_buffer_len(rpd));\n#endif\n\n    while (1) {\n        ret = rpdata_recv(rpd, rx_buf, len, 10000);\n        if (ret <= 0) {\n            printf("rpdata recv timeout \\n");\n            goto exit;\n        }\n        rx_buf[ret] = 0;\n        printf("%s, len:%d\\n", rx_buf, ret);\n        if (!memcmp("quit", rx_buf, 4))\n            break;\n    }\n\nexit:\n    if (rx_buf)\n        hal_free(rx_buf);\n    if (rpd)\n        rpdata_destroy(rpd);\n    return ret;\n}\n\nstatic void data_fill(void *buffer, uint32_t len)\n{\n    int i;\n    int data_len = len - 16;\n\n    memset(buffer, 0, len);\n    for (i = 0; i < len;) {\n        *(int *)(buffer + i) = rand();\n        i += sizeof(int);\n    }\n    md5(buffer, data_len,  buffer + data_len);\n}\n\nstatic int data_check(void *buffer, uint32_t len)\n{\n    unsigned char res[16];\n    int data_len = len - 16;\n\n    md5(buffer, data_len, res);\n    if (!memcmp(buffer + data_len, res, 16))\n        return 0;\n    return -1;\n}\n\nstatic void rpdata_auto_send(void *arg)\n{\n    struct rpdata_arg_test targ;\n    rpdata_t *rpd;\n    void *buffer;\n    int ret = -1;\n    uint32_t len = 512;\n\n\n    memcpy(&targ, arg, sizeof(struct rpdata_arg_test));\n    printf("dir:%d, type:%s, name:%s\\n",\n        targ.dir, targ.type, targ.name);\n\n    rpd = rpdata_create(targ.dir, targ.type, targ.name, 512);\n    if (!rpd) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n#ifndef RECV_CALLBACK_TEST\n    rpdata_set_recv_ringbuffer(rpd, 2 * rpdata_buffer_len(rpd));\n#endif\n\n    buffer = rpdata_buffer_addr(rpd);\n    if (!buffer) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n\n    rpdata_wait_connect(rpd);\n    while (1) {\n        data_fill(buffer, len);\n        ret = rpdata_send(rpd, 0, len);\n        if (ret != 0) {\n            printf("[%s] line:%d \\n", __func__, __LINE__);\n            goto exit;\n        }\n        hal_msleep(10);\n    }\n\nexit:\n    if (rpd)\n        rpdata_destroy(rpd);\n    printf("rpdata auto send test finish\\n");\n    vTaskDelete(NULL);\n}\n\nstatic int rpd_demo_recv_cb(rpdata_t *rpd, void *data, uint32_t data_len)\n{\n    static int count = 0;\n    if (data_check(data, data_len) < 0) {\n        printf("check md5 failed\\n");\n    }\n    if (!g_rpd_verbose)\n        return 0;\n    if (count++ % g_rpd_verbose == 0)\n        printf("check md5 ok(print interval %d)\\n", g_rpd_verbose);\n    return 0;\n}\n\nstruct rpdata_cbs rpd_demo_cbs = {\n    .recv_cb = rpd_demo_recv_cb,\n};\n\nstatic int rpd_demo_process_cb(rpdata_t *rpd, void *buffer, uint32_t data_len)\n{\n    void *mic_data, *ref_data, *aec_data;\n    uint32_t mic_offset = 128;\n    uint32_t ref_offset = 128 + 640;\n    uint32_t aec_offset = 128 + 640 + 320;\n    uint32_t total_len = 1408;\n\n    /* aec process\n     * input:\n     * params:\n     * simulator: 128bytes\n     * mic data: 2ch+16K+16bit, 10ms, 160*4=640\n     * ref data: 1ch+16K+16bit, 10ms, 160*2=320\n     * outout:\n     * aec data: 1ch+16K+16bit, 10ms, 160*2=320\n     *\n     * total= 128 + 640 + 320 + 320 = 1408\n     * 1408 is cacheline lenght\n     */\n\n    mic_data = buffer + mic_offset;\n    ref_data = buffer + ref_offset;\n    aec_data = buffer + aec_offset;\n\n    if (data_len != total_len) {\n        printf("expected len:%d but:%d\\n", total_len, data_len);\n        return -1;\n    }\n    if (data_check(mic_data, ref_data - mic_data) < 0) {\n        printf("check mic data md5 failed\\n");\n    }\n    if (data_check(ref_data, aec_data - ref_data) < 0) {\n        printf("check ref data md5 failed\\n");\n    }\n    data_fill(aec_data, total_len - aec_offset);\n    return 0;\n}\n\nstruct rpdata_cbs rpd_demo_process_cbs = {\n    .recv_cb = rpd_demo_process_cb,\n};\n\nstatic int rpd_demo_recv_and_send_cb(rpdata_t *rpd, void *data, uint32_t data_len)\n{\n    rpdata_t *rpd_send = NULL;\n    void *buffer;\n    int ret;\n\n    if (data_check(data, data_len) < 0) {\n        printf("[%s] line:%d check md5 failed\\n", __func__, __LINE__);\n    }\n    rpd_send = rpdata_get_private_data(rpd);\n    if (!rpd_send)\n        return -1;\n\n    buffer = rpdata_buffer_addr(rpd_send);\n    memcpy(buffer, data, data_len);\n    ret = rpdata_send(rpd_send, 0, data_len);\n    if (ret != 0) {\n        printf("rpdata_send failed\\n");\n        return ret;\n    }\n\n    return 0;\n}\n\nstruct rpdata_cbs rpd_demo_rs_cbs = {\n    .recv_cb = rpd_demo_recv_and_send_cb,\n};\n\nstatic void rpdata_auto_recv(void *arg)\n{\n    struct rpdata_arg_test targ;\n    rpdata_t *rpd;\n    void *rx_buf = NULL;\n    int len, ret;\n\n    memcpy(&targ, arg, sizeof(struct rpdata_arg_test));\n    printf("dir:%d, type:%s, name:%s\\n",\n        targ.dir, targ.type, targ.name);\n\n    rpd = rpdata_connect(targ.dir, targ.type, targ.name);\n    if (!rpd) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n#ifndef RECV_CALLBACK_TEST\n    rpdata_set_recv_ringbuffer(rpd, 2 * rpdata_buffer_len(rpd));\n#endif\n\n    len = rpdata_buffer_len(rpd);\n    if (len <= 0) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n\n    rx_buf = hal_malloc(len);\n    if (!rx_buf) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n\n#ifdef RECV_CALLBACK_TEST\n    rpdata_set_recv_cb(rpd, &rpd_demo_cbs);\n    while (1) {\n        hal_msleep(10);\n    }\n#else\n    while (1) {\n        ret = rpdata_recv(rpd, rx_buf, len, 10000);\n        if (ret <= 0) {\n            printf("rpdata recv timeout \\n");\n            goto exit;\n        }\n        if (data_check(rx_buf, ret) < 0) {\n            printf("check md5 failed\\n");\n        }\n    }\n#endif\nexit:\n    if (rx_buf)\n        hal_free(rx_buf);\n    if (rpd)\n        rpdata_destroy(rpd);\n    printf("rpdata auto recv test finish\\n");\n    vTaskDelete(NULL);\n}\n\nstatic void rpdata_auto_recv_and_send(void *arg)\n{\n    struct rpdata_arg_test targ;\n    rpdata_t *rpd_recv = NULL, *rpd_send = NULL;\n    void *buf_recv = NULL, *buf_send = NULL;\n    uint32_t len = 512;\n    int ret;\n\n    memcpy(&targ, arg, sizeof(struct rpdata_arg_test));\n    printf("recv dir:%d, type:%s, name:%s\\n",\n        targ.dir, targ.type, targ.name);\n    printf("send dir:%d, type:%s, name:%s\\n",\n        targ.sdir, targ.stype, targ.sname);\n\n    rpd_send = rpdata_create(targ.sdir, targ.stype, targ.sname, len);\n    if (!rpd_send) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n\n    buf_send = rpdata_buffer_addr(rpd_send);\n    if (!buf_send) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n\n    rpd_recv = rpdata_connect(targ.dir, targ.type, targ.name);\n    if (!rpd_recv) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n#ifndef RECV_CALLBACK_TEST\n    rpdata_set_recv_ringbuffer(rpd_recv, 2 * rpdata_buffer_len(rpd_recv));\n    rpdata_set_recv_ringbuffer(rpd_send, 2 * rpdata_buffer_len(rpd_send));\n#endif\n\n    buf_recv = hal_malloc(len);\n    if (!buf_recv) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n\n    rpdata_wait_connect(rpd_send);\n#ifdef RECV_CALLBACK_TEST\n    rpdata_set_private_data(rpd_recv, rpd_send);\n    rpdata_set_recv_cb(rpd_recv, &rpd_demo_rs_cbs);\n    while (1) {\n        hal_msleep(10);\n    }\n#else\n    while (1) {\n        ret = rpdata_recv(rpd_recv, buf_recv, len, 10000);\n        if (ret <= 0) {\n            printf("rpdata recv timeout \\n");\n            goto exit;\n        }\n        if (data_check(buf_recv, ret) < 0) {\n            printf("check md5 failed\\n");\n        }\n        memcpy(buf_send, buf_recv, ret);\n        ret = rpdata_send(rpd_send, 0, ret);\n        if (ret != 0) {\n            printf("rpdata send failed\\n");\n            goto exit;\n        }\n    }\n#endif\nexit:\n    if (buf_recv)\n        hal_free(buf_recv);\n    if (rpd_send)\n        rpdata_destroy(rpd_send);\n    if (rpd_recv)\n        rpdata_destroy(rpd_recv);\n    printf("rpdata auto recv_and_send test finish\\n");\n    vTaskDelete(NULL);\n}\n\nstatic void rpdata_process_send(void *arg)\n{\n    struct rpdata_arg_test targ;\n    rpdata_t *rpd;\n    void *buffer;\n    int ret = -1;\n    uint32_t len;\n    void *params, *mic_data, *ref_data, *aec_data;\n    uint32_t params_offset = 0;\n    uint32_t mic_offset = 128;\n    uint32_t ref_offset = 128 + 640;\n    uint32_t aec_offset = 128 + 640 + 320;\n\n    /* aec process\n     * input:\n     * params:\n     * simulator: 128bytes\n     * mic data: 2ch+16K+16bit, 10ms, 160*4=640\n     * ref data: 1ch+16K+16bit, 10ms, 160*2=320\n     * outout:\n     * aec data: 1ch+16K+16bit, 10ms, 160*2=320\n     *\n     * total= 128 + 640 + 320 + 320 = 1408\n     * 1408 is cacheline lenght\n     * */\n    len = 1408;\n\n    memcpy(&targ, arg, sizeof(struct rpdata_arg_test));\n    printf("dir:%d, type:%s, name:%s\\n",\n        targ.dir, targ.type, targ.name);\n\n    rpd = rpdata_connect(targ.dir, targ.type, targ.name);\n    if (!rpd) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n#ifndef RECV_CALLBACK_TEST\n    rpdata_set_recv_ringbuffer(rpd, 2 * rpdata_buffer_len(rpd));\n#endif\n\n    buffer = rpdata_buffer_addr(rpd);\n    if (!buffer) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n    params = buffer + params_offset;\n    mic_data = buffer + mic_offset;\n    ref_data = buffer + ref_offset;\n    aec_data = buffer + aec_offset;\n\n    rpdata_wait_connect(rpd);\n\n    data_fill(params, mic_offset - params_offset);\n    data_fill(mic_data, ref_offset - mic_offset);\n    data_fill(ref_data, aec_offset - ref_offset);\n    memset(aec_data, 0, len - aec_offset);\n\n    ret = rpdata_process(rpd, 0, len);\n    if (ret != 0) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n\n    if (data_check(aec_data, len - aec_offset) < 0) {\n        printf("aec data check failed\\n");\n    } else {\n        printf("aec data check ok\\n");\n    }\n\nexit:\n    if (rpd)\n        rpdata_destroy(rpd);\n    vTaskDelete(NULL);\n}\n\nstatic void rpdata_process_recv(void *arg)\n{\n    struct rpdata_arg_test targ;\n    rpdata_t *rpd;\n    uint32_t len;\n    void *rx_buf = NULL;\n    int ret;\n\n    /* aec process\n     * input:\n     * params:\n     * simulator: 128bytes\n     * mic data: 2ch+16K+16bit, 10ms, 160*4=640\n     * ref data: 1ch+16K+16bit, 10ms, 160*2=320\n     * outout:\n     * aec data: 1ch+16K+16bit, 10ms, 160*2=320\n     *\n     * total= 128 + 640 + 320 + 320 = 1408\n     * 1408 is cacheline lenght\n     * */\n    len = 1408;\n\n    memcpy(&targ, arg, sizeof(struct rpdata_arg_test));\n    printf("dir:%d, type:%s, name:%s\\n",\n        targ.dir, targ.type, targ.name);\n\n    rpd = rpdata_create(targ.dir, targ.type, targ.name, len);\n    if (!rpd) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n#ifndef RECV_CALLBACK_TEST\n    rpdata_set_recv_ringbuffer(rpd, 2 * rpdata_buffer_len(rpd));\n#endif\n\n#ifndef RECV_CALLBACK_TEST\n    rx_buf = hal_malloc(rpdata_buffer_len(rpd));\n    if (!rx_buf) {\n        printf("[%s] line:%d \\n", __func__, __LINE__);\n        goto exit;\n    }\n\n    ret = rpdata_recv(rpd, rx_buf, len, 30*1000);\n    if (ret <= 0) {\n        printf("[%s] : Timeout!\\n", __func__);\n        goto exit;\n    }\n    rpd_demo_process_cb(rpd, rx_buf, ret);\n\n#else\n    rpdata_set_recv_cb(rpd , &rpd_demo_process_cbs);\n    hal_sleep(30);\n#endif\nexit:\n    if (rx_buf)\n        hal_free(rx_buf);\n    if (rpd)\n        rpdata_destroy(rpd);\n    printf("rpdata recv process finish\\n");\n    vTaskDelete(NULL);\n}\n\nstatic int do_rpdata_process_test(struct rpdata_arg_test *targ, int mode)\n{\n    hal_thread_t handle;\n\n    if (mode == 0)\n        handle = hal_thread_create(rpdata_process_send, targ,\n                "rpd_send_process", 512, HAL_THREAD_PRIORITY_APP);\n    else if (mode == 1)\n        handle = hal_thread_create(rpdata_process_recv, targ,\n                "rpd_recv_process", 512, HAL_THREAD_PRIORITY_APP);\n    return 0;\n}\n\nstatic int do_rpdata_auto_test(struct rpdata_arg_test *targ, int mode)\n{\n    hal_thread_t handle;\n\n    if (mode == 0)\n        handle = hal_thread_create(rpdata_auto_send, targ, "rpd_send_test",\n                512, HAL_THREAD_PRIORITY_APP);\n    else if (mode == 1)\n        handle = hal_thread_create(rpdata_auto_recv, targ, "rpd_recv_test",\n                512, HAL_THREAD_PRIORITY_APP);\n    else if (mode == 2)\n        handle = hal_thread_create(rpdata_auto_recv_and_send, targ, "rpd_rs_test",\n                512, HAL_THREAD_PRIORITY_APP);\n    return 0;\n}\n\nstatic int check_dir(int dir)\n{\n    switch (dir) {\n    case RPDATA_DIR_CM33:\n    case RPDATA_DIR_RV:\n    case RPDATA_DIR_DSP:\n        return 0;\n    default:\n        return -1;\n    }\n}\n\nstatic int cmd_rpdata_demo(int argc, char *argv[])\n{\n    int c, mode = 2;\n    int single_test = 0, process_test = 0;\n    int get_sdir_arg = 0;\n    /* string/data must be cache_line align */\n    char string[128] = "rpdata test string";\n    static struct rpdata_arg_test targ = {\n        .type = "RVtoDSP",\n        .name = "DSPrecvRVsend",\n        .dir  = RPDATA_DIR_DSP,\n        .stype = "DSPtoM33",\n        .sname = "M33recvDSPsend",\n        .sdir  = RPDATA_DIR_CM33,\n    };\n\n    optind = 0;\n    while ((c = getopt(argc, argv, "hm:t:n:c:s:d:iv:p")) != -1) {\n        switch (c) {\n        case \'m\':\n            mode = atoi(optarg);\n            break;\n        case \'t\':\n            if (!get_sdir_arg)\n                strncpy(targ.type, optarg, sizeof(targ.type));\n            else\n                strncpy(targ.stype, optarg, sizeof(targ.stype));\n            break;\n        case \'n\':\n            if (!get_sdir_arg)\n                strncpy(targ.name, optarg, sizeof(targ.name));\n            else\n                strncpy(targ.sname, optarg, sizeof(targ.sname));\n            break;\n        case \'c\':\n            strncpy(string, optarg, sizeof(string));\n            break;\n        case \'s\':\n            targ.sdir = atoi(optarg);\n            get_sdir_arg = 1;\n            break;\n        case \'d\':\n            targ.dir = atoi(optarg);\n            get_sdir_arg = 0;\n            break;\n        case \'i\':\n            single_test = 1;\n            break;\n        case \'v\':\n            g_rpd_verbose = atoi(optarg);\n            return 0;\n        case \'p\':\n            process_test = 1;\n            break;\n        case \'h\':\n        default:\n            goto usage;\n        }\n    }\n\n    if (mode != 0 && mode != 1 && mode != 2)\n        goto usage;\n\n    if (check_dir(targ.dir) < 0 || check_dir(targ.sdir) < 0)\n        goto usage;\n\n    if (process_test) {\n        do_rpdata_process_test(&targ, mode);\n        return 0;\n    }\n\n    if (!single_test) {\n        do_rpdata_auto_test(&targ, mode);\n        return 0;\n    }\n\n    if (mode == 0)\n        do_rpdata_send_test(&targ, string, sizeof(string));\n    else if (mode == 1)\n        do_rpdata_recv_test(&targ, string, sizeof(string));\n\n    return 0;\nusage:\n    rpdata_demo_usage();\n    return -1;\n}\nFINSH_FUNCTION_EXPORT_CMD(cmd_rpdata_demo, rpdata_demo, rpdata test demo);\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u6d4b\u8bd5\u4f8b\u5b50\uff1a"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"rv/dsp\u4e4b\u95f4\u7684\u6536\u53d1"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"rv\u63a5\u53d7\uff0cdsp\u53d1\u9001"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"rpdata_demo \u2011m 1 \u2011d 3 \u2011t DSPtoRV \u2011n RVrecvDSPsend\nrpccli dsp rpdata_demo \u2011m 0 \u2011d 2 \u2011t DSPtoRV \u2011n RVrecvDSPsend\n"})}),"\n",(0,r.jsx)(e.p,{children:"rv\u53d1\u9001\uff0cdsp\u63a5\u53d7"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"rpdata_demo \u2011m 0 \u2011d 3 \u2011t RVtoDSP \u2011n RVsendDSPrecv\nrpccli dsp rpdata_demo \u2011m 1 \u2011d 2 \u2011t RVtoDSP \u2011n RVsendDSPrecv\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"rv/m33\u4e4b\u95f4\u6536\u53d1"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"rv\u63a5\u53d7\uff0cm33\u53d1\u9001"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"rpdata_demo \u2011m 1 \u2011d 1 \u2011t M33toRV \u2011n RVrecvM33send\nrpccli arm rpdata_demo \u2011m 0 \u2011d 2 \u2011t M33toRV \u2011n RVrecvM33send\n"})}),"\n",(0,r.jsx)(e.p,{children:"rv\u53d1\u9001\uff0cm33\u63a5\u53d7"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"rpdata_demo \u2011m 0 \u2011d 1 \u2011t RVtoM33 \u2011n RVsendM33recv\nrpccli arm rpdata_demo \u2011m 1 \u2011d 2 \u2011t RVtoM33 \u2011n RVsendM33recv\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"m33/dsp\u4e4b\u95f4\u6536\u53d1"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"m33\u63a5\u53d7\uff0cdsp\u53d1\u9001"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"rpccli arm rpdata_demo \u2011m 1 \u2011d 3 \u2011t DSPtoM33 \u2011n M33recvDSPsend\nrpccli dsp rpdata_demo \u2011m 0 \u2011d 1 \u2011t DSPtoM33 \u2011n M33recvDSPsend\n"})}),"\n",(0,r.jsx)(e.p,{children:"dsp\u63a5\u53d7\uff0cm33\u53d1\u9001"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"rpccli dsp rpdata_demo \u2011m 1 \u2011d 1 \u2011t M33toDSP \u2011n DSPrecvM33send\nrpccli arm rpdata_demo \u2011m 0 \u2011d 3 \u2011t M33toDSP \u2011n DSPrecvM33send\n"})}),"\n",(0,r.jsx)(e.p,{children:"\u53e6\u5916\uff0c\u63d0\u4f9b\u4e86 rpd \u547d\u4ee4\u7528\u4e8e\u67e5\u770b rpdata \u7684\u8fd0\u884c\u60c5\u51b5\uff1a"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"c906>rpd \u2011l\n\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\nRPdata RV <\u2011\u2011> CM33\nid type+name state\n\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\nRPdata RV <\u2011\u2011> DSP\nid type+name state\n0x01 DSPtoRV\n0x01 \u2514\u2500\u2500\u2500 RVrecvDSPsend CNXN\n\n\nc906>rpccli dsp rpd \u2011l\n\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\nRPdata DSP <\u2011\u2011> CM33\nid type+name state\n\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\u2011\nRPdata DSP <\u2011\u2011> RV\nid type+name state\n0x01 DSPtoRV\n0x01 \u2514\u2500\u2500\u2500 RVrecvDSPsend CNXN\n"})})]})}function p(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},1151:(n,e,a)=>{a.d(e,{Z:()=>s,a:()=>d});var r=a(7294);const t={},i=r.createContext(t);function d(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:d(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);