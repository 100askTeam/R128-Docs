"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3069],{4514:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>b,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var _=t(5893),r=t(1151);const a={},i="RTOS \u84dd\u7259",c={id:"developer-guide/part1/chapter9",title:"RTOS \u84dd\u7259",description:"\u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd FreeRTOS \u5e73\u53f0\u4e0a Bluetooth \u5f00\u53d1\uff0c\u4e3b\u8981\u5305\u62ec\u84dd\u7259\u914d\u7f6e\u4ecb\u7ecd\u3001\u84dd\u7259 API \u63a5\u53e3\u4ecb\u7ecd\u4ee5\u53ca demo \u7684\u4f7f\u7528\u3002",source:"@site/docs/developer-guide/part1/chapter9.md",sourceDirName:"developer-guide/part1",slug:"/developer-guide/part1/chapter9",permalink:"/en/developer-guide/part1/chapter9",draft:!1,unlisted:!1,editUrl:"https://github.com/100askTeam/R128-Docs/tree/main/docs/developer-guide/part1/chapter9.md",tags:[],version:"current",frontMatter:{},sidebar:"classpartoneSidebar",previous:{title:"RTOS \u5b89\u5168",permalink:"/en/developer-guide/part1/chapter8"},next:{title:"SDK HAL \u6a21\u5757\u5f00\u53d1\u6307\u5357",permalink:"/en/category/sdk-hal-\u6a21\u5757\u5f00\u53d1\u6307\u5357"}},d={},s=[{value:"\u84dd\u7259\u6846\u67b6\u4ecb\u7ecd",id:"\u84dd\u7259\u6846\u67b6\u4ecb\u7ecd",level:2},{value:"\u5e94\u7528\u5c42",id:"\u5e94\u7528\u5c42",level:3},{value:"\u4e2d\u95f4\u4ef6",id:"\u4e2d\u95f4\u4ef6",level:3},{value:"\u534f\u8bae\u6808",id:"\u534f\u8bae\u6808",level:3},{value:"\u9002\u914d\u5c42",id:"\u9002\u914d\u5c42",level:3},{value:"\u9002\u914d\u5c42\u5bf9\u63a5\u4e0d\u540c\u534f\u8bae\u6808",id:"\u9002\u914d\u5c42\u5bf9\u63a5\u4e0d\u540c\u534f\u8bae\u6808",level:4},{value:"\u9002\u914d\u5c42\u5bf9\u63a5\u9a71\u52a8\u5c42",id:"\u9002\u914d\u5c42\u5bf9\u63a5\u9a71\u52a8\u5c42",level:4},{value:"\u9a71\u52a8\u5c42",id:"\u9a71\u52a8\u5c42",level:3},{value:"firmware",id:"firmware",level:3},{value:"\u84dd\u7259\u914d\u7f6e\u8bf4\u660e",id:"\u84dd\u7259\u914d\u7f6e\u8bf4\u660e",level:2},{value:"M33 \u6838",id:"m33-\u6838",level:3},{value:"Driver",id:"driver",level:4},{value:"AMP",id:"amp",level:4},{value:"C906 \u6838",id:"c906-\u6838",level:3},{value:"Driver",id:"driver-1",level:4},{value:"AMP",id:"amp-1",level:4},{value:"\u534f\u8bae\u6808",id:"\u534f\u8bae\u6808-1",level:4},{value:"ZEPHYR",id:"zephyr",level:5},{value:"BLUEDROID",id:"bluedroid",level:5},{value:"btmanager",id:"btmanager",level:4},{value:"Tools",id:"tools",level:4},{value:"BTETF",id:"btetf",level:5},{value:"BTSNOOP",id:"btsnoop",level:5},{value:"BR/EDR \u5f00\u53d1\u4ecb\u7ecd",id:"bredr-\u5f00\u53d1\u4ecb\u7ecd",level:2},{value:"\u57fa\u7840 API",id:"\u57fa\u7840-api",level:3},{value:"A2DP Sink \u5f00\u53d1 API",id:"a2dp-sink-\u5f00\u53d1-api",level:3},{value:"A2DP Sink API \u8c03\u7528\u6d41\u7a0b",id:"a2dp-sink-api-\u8c03\u7528\u6d41\u7a0b",level:4},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316",level:5},{value:"\u97f3\u4e50\u64ad\u653e\u63a7\u5236",id:"\u97f3\u4e50\u64ad\u653e\u63a7\u5236",level:5},{value:"AVRCP \u5f00\u53d1",id:"avrcp-\u5f00\u53d1",level:3},{value:"AVRCP CT API",id:"avrcp-ct-api",level:4},{value:"AVRCP TG API",id:"avrcp-tg-api",level:4},{value:"A2DP Source \u5f00\u53d1",id:"a2dp-source-\u5f00\u53d1",level:3},{value:"A2DP Source API",id:"a2dp-source-api",level:4},{value:"A2DP source API \u8c03\u7528\u6d41\u7a0b",id:"a2dp-source-api-\u8c03\u7528\u6d41\u7a0b",level:4},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316-1",level:5},{value:"\u626b\u63cf\u8fde\u63a5",id:"\u626b\u63cf\u8fde\u63a5",level:5},{value:"\u97f3\u9891\u64ad\u653e",id:"\u97f3\u9891\u64ad\u653e",level:5},{value:"bt_manager \u901a\u8def",id:"bt_manager-\u901a\u8def",level:6},{value:"Audio System \u901a\u8def",id:"audio-system-\u901a\u8def",level:6},{value:"\u53cd\u521d\u59cb\u5316",id:"\u53cd\u521d\u59cb\u5316",level:5},{value:"HFP HF \u5f00\u53d1",id:"hfp-hf-\u5f00\u53d1",level:3},{value:"HFP HF API",id:"hfp-hf-api",level:4},{value:"HFP HF API \u8c03\u7528\u6d41\u7a0b",id:"hfp-hf-api-\u8c03\u7528\u6d41\u7a0b",level:4},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316-2",level:5},{value:"\u8bbe\u5907\u8fde\u63a5",id:"\u8bbe\u5907\u8fde\u63a5",level:5},{value:"\u901a\u8bdd\u4e0e\u63a7\u5236",id:"\u901a\u8bdd\u4e0e\u63a7\u5236",level:5},{value:"\u53cd\u521d\u59cb\u5316",id:"\u53cd\u521d\u59cb\u5316-1",level:5},{value:"SPP Client \u5f00\u53d1",id:"spp-client-\u5f00\u53d1",level:3},{value:"SPP Client API",id:"spp-client-api",level:4},{value:"SPP Client API \u8c03\u7528\u6d41\u7a0b",id:"spp-client-api-\u8c03\u7528\u6d41\u7a0b",level:4},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316-3",level:5},{value:"\u626b\u63cf\u8fde\u63a5",id:"\u626b\u63cf\u8fde\u63a5-1",level:5},{value:"\u6570\u636e\u6536\u53d1",id:"\u6570\u636e\u6536\u53d1",level:5},{value:"SPP Server \u5f00\u53d1",id:"spp-server-\u5f00\u53d1",level:3},{value:"SPP Server API",id:"spp-server-api",level:4},{value:"SPP Server API \u8c03\u7528\u6d41\u7a0b",id:"spp-server-api-\u8c03\u7528\u6d41\u7a0b",level:4},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316-4",level:5},{value:"\u8fde\u63a5",id:"\u8fde\u63a5",level:5},{value:"\u6570\u636e\u6536\u53d1",id:"\u6570\u636e\u6536\u53d1-1",level:5},{value:"\u53cd\u521d\u59cb\u5316",id:"\u53cd\u521d\u59cb\u5316-2",level:5},{value:"BLE \u5f00\u53d1\u4ecb\u7ecd",id:"ble-\u5f00\u53d1\u4ecb\u7ecd",level:2},{value:"BLE \u57fa\u7840\u529f\u80fd",id:"ble-\u57fa\u7840\u529f\u80fd",level:3},{value:"GATT Server",id:"gatt-server",level:3},{value:"GATT Server API",id:"gatt-server-api",level:4},{value:"GATT Server API \u8c03\u7528\u6d41\u7a0b",id:"gatt-server-api-\u8c03\u7528\u6d41\u7a0b",level:4},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316-5",level:5},{value:"\u6ce8\u518c SERVICE",id:"\u6ce8\u518c-service",level:5},{value:"\u5e7f\u64ad",id:"\u5e7f\u64ad",level:5},{value:"\u8fde\u63a5",id:"\u8fde\u63a5-1",level:5},{value:"\u6570\u636e\u4ea4\u4e92",id:"\u6570\u636e\u4ea4\u4e92",level:5},{value:"\u53cd\u521d\u59cb\u5316",id:"\u53cd\u521d\u59cb\u5316-3",level:5},{value:"GATT Client",id:"gatt-client",level:3},{value:"GATT Client API",id:"gatt-client-api",level:4},{value:"GATT Client API \u8c03\u7528\u6d41\u7a0b",id:"gatt-client-api-\u8c03\u7528\u6d41\u7a0b",level:4},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316-6",level:5},{value:"\u626b\u63cf\u8fde\u63a5",id:"\u626b\u63cf\u8fde\u63a5-2",level:5},{value:"\u6570\u636e\u901a\u4fe1",id:"\u6570\u636e\u901a\u4fe1",level:5},{value:"btcli \u4f7f\u7528\u6307\u5357",id:"btcli-\u4f7f\u7528\u6307\u5357",level:2},{value:"\u547d\u4ee4\u7b80\u4ecb",id:"\u547d\u4ee4\u7b80\u4ecb",level:3}];function l(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...n.components};return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(e.h1,{id:"rtos-\u84dd\u7259",children:"RTOS \u84dd\u7259"}),"\n",(0,_.jsx)(e.p,{children:"\u672c\u6587\u6863\u4e3b\u8981\u4ecb\u7ecd FreeRTOS \u5e73\u53f0\u4e0a Bluetooth \u5f00\u53d1\uff0c\u4e3b\u8981\u5305\u62ec\u84dd\u7259\u914d\u7f6e\u4ecb\u7ecd\u3001\u84dd\u7259 API \u63a5\u53e3\u4ecb\u7ecd\u4ee5\u53ca demo \u7684\u4f7f\u7528\u3002"}),"\n",(0,_.jsx)(e.h2,{id:"\u84dd\u7259\u6846\u67b6\u4ecb\u7ecd",children:"\u84dd\u7259\u6846\u67b6\u4ecb\u7ecd"}),"\n",(0,_.jsx)(e.p,{children:"\u84dd\u7259\u6846\u67b6\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u4ece\u4e0a\u5f80\u4e0b\u53ef\u4ee5\u5212\u5206\u4e3a\u5e94\u7528\u3001\u4e2d\u95f4\u4ef6\u3001\u9002\u914d\u5c42\u3001\u9a71\u52a8\u5c42\uff0c\u56fa\u4ef6\u5c42\uff0cR128 \u82af\u7247\u5185\u7f6e\u84dd\u7259\u6a21\u5757\uff0c\u652f\u6301 BR/EDR\u3001BLE \u53cc\u6a21\u3002\u5728\u8f6f\u4ef6\u5b9e\u73b0\u4e0a\uff0c\u84dd\u7259 controller \u8fd0\u884c\u5728 ARM m33 CPU \u4e0a\uff0c\u84dd\u7259 HOST \u8fd0\u884c\u5728 RV C906 CPU \u4e0a\u3002\u5176\u4e2d\u84dd\u7259 HOST \u5305\u542b bluedroid \u548c zephyr \u4e24\u4e2a\u534f\u8bae\u6808\uff0cbluedroid \u534f\u8bae\u6808\u63d0\u4f9b BR/EDR \u529f\u80fd\u652f\u6301\uff0c\u4f8b\u5982 A2DP Sink\u3001A2DP Source\u3001AVRCP\u3001HFP HF\u3001SPP \u7b49 Profile\uff0czephyr \u534f\u8bae\u6808\u63d0\u4f9b BLE \u76f8\u5173\u7684\u529f\u80fd\u652f\u6301\uff0c\u4f8b\u5982 GATT Client\u3001GATT Server\u3001Mesh \u7b49\u3002"}),"\n",(0,_.jsx)(e.p,{children:(0,_.jsx)(e.img,{src:"http://photos.100ask.net/aw-r128-docs/rtos/developer-guide/part1/chapter9/image1.png",alt:""})}),"\n",(0,_.jsx)(e.h3,{id:"\u5e94\u7528\u5c42",children:"\u5e94\u7528\u5c42"}),"\n",(0,_.jsx)(e.p,{children:"\u7528\u6237\u6240\u5f00\u53d1\u7684\u84dd\u7259\u5e94\u7528\uff0c\u4e00\u822c\u63a8\u8350\u4f7f\u7528\u4e2d\u95f4\u4ef6 btmanager API \u8fdb\u884c\u5e94\u7528\u5f00\u53d1\u3002"}),"\n",(0,_.jsx)(e.h3,{id:"\u4e2d\u95f4\u4ef6",children:"\u4e2d\u95f4\u4ef6"}),"\n",(0,_.jsx)(e.p,{children:"\u4e2d\u95f4\u4ef6\u6307 btmanager \u8f6f\u4ef6\uff0c\u5b83\u5411\u4e0a\u63d0\u4e3a\u5e94\u7528\u63d0\u4f9b API\uff0c\u5411\u4e0b\u5bf9\u63a5\u534f\u8bae\u6808\uff0c\u5c4f\u853d\u4e86\u534f\u8bae\u6808\u4f7f\u7528\u7ec6\u8282\uff0c\u964d\u4f4e\u84dd\u7259\u5e94\u7528\u5f00\u53d1\u95e8\u69db\u3002\u672c\u6587\u6863\u5c06\u4f1a\u91cd\u70b9\u4ecb\u7ecd\u5982\u4f55\u4f7f btmanager \u8fdb\u884c\u84dd\u7259\u5e94\u7528\u5f00\u53d1"}),"\n",(0,_.jsx)(e.p,{children:"\u4ee3\u7801\u8def\u5f84\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"lichee/rtos\u2011components/aw/wireless/btmanager/src\n"})}),"\n",(0,_.jsx)(e.h3,{id:"\u534f\u8bae\u6808",children:"\u534f\u8bae\u6808"}),"\n",(0,_.jsx)(e.p,{children:"HOST \u4f7f\u7528\u53cc\u6808\u65b9\u5f0f\u652f\u6301 BR/EDR\u3001BLE \u84dd\u7259\u529f\u80fd\u3002BR/EDR \u4f7f\u7528 Bluedroid \u534f\u8bae\u6808\uff0cBLE \u4f7f\u7528 zephyr \u534f\u8bae\u6808\u3002"}),"\n",(0,_.jsx)(e.p,{children:"bluedroid \u534f\u8bae\u6808\u8def\u5f84\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"lichee/rtos\u2011components/thirdparty/bluetooth/bluedroid\n"})}),"\n",(0,_.jsx)(e.p,{children:"zephyr \u534f\u8bae\u6808\u8def\u5f84\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"lichee/rtos\u2011components/thirdparty/bluetooth/zephyr\n"})}),"\n",(0,_.jsx)(e.h3,{id:"\u9002\u914d\u5c42",children:"\u9002\u914d\u5c42"}),"\n",(0,_.jsx)(e.p,{children:"\u9002\u914d\u5c42\u4e3b\u8981\u6709\u4e24\u4e2a\u4f5c\u7528\uff1a"}),"\n",(0,_.jsxs)(e.ul,{children:["\n",(0,_.jsx)(e.li,{children:"\u5bf9\u63a5\u4e0d\u540c\u534f\u8bae\u6808"}),"\n",(0,_.jsx)(e.li,{children:"\u5bf9\u63a5\u9a71\u52a8\u5c42"}),"\n"]}),"\n",(0,_.jsx)(e.p,{children:"\u4ee3\u7801\u8def\u5f84\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"lichee/rtos/components/aw/bluetooth/xradio\n"})}),"\n",(0,_.jsx)(e.h4,{id:"\u9002\u914d\u5c42\u5bf9\u63a5\u4e0d\u540c\u534f\u8bae\u6808",children:"\u9002\u914d\u5c42\u5bf9\u63a5\u4e0d\u540c\u534f\u8bae\u6808"}),"\n",(0,_.jsx)(e.p,{children:"\u9002\u914d\u5c42\u63d0\u4f9b bluedroid \u548c zephyr \u7684 adapter\uff0c\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:".\n\u251c\u2500\u2500 bluedroid\n\u2502   \u2514\u2500\u2500 bt_bluedroid_adapter.c\n\u251c\u2500\u2500 Makefile\n\u2514\u2500\u2500 zephyr\n    \u2514\u2500\u2500 bt_zephyr_adapter.c\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u63d0\u4f9b\u7684\u63a5\u53e3\u5982\u4e0b\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"int bt_zephyr_adapter_register(void)\nint bt_zephyr_adapter_unregister(void)\nint bt_bluedroid_adapter_register(void)\nint bt_bluedroid_adapter_unregister(void)\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u5b9e\u73b0 adapter \u4e3b\u8981\u586b\u5145\u5b9e\u73b0 bt_hci_driver \u63a5\u53e3\uff0c\u4f8b\u5982 hci \u63a5\u53e3\u521d\u59cb\u5316\u3001\u6570\u636e\u53d1\u9001\u529f\u80fd\u7b49\u3002"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:'static const struct bt_hci_driver drv = {\n    .name = "",\n    .bus = BT_HCI_DRIVER_BUS_VIRTUAL,\n    .open = virtual_hci_open,\n#if defined(CONFIG_BT_DEINIT)\n    .close = virtual_hci_close,\n#endif\n    .send = virtual_hci_h2c,\n};\n'})}),"\n",(0,_.jsxs)(e.p,{children:["\u5176\u4e2d\uff0c\u5728 ",(0,_.jsx)(e.code,{children:"hci_open"})," \u7684\u65f6\u5019\uff0c\u4f1a\u6ce8\u518c\u6570\u636e\u63a5\u6536\u56de\u8c03\uff0c\u4ee5 zephyr adater \u4e3a\u4f8b\uff1a"]}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"static bt_hc_callbacks_t zephyr_hc_callbacks = {\n    .data_ind = zephyr_data_ind,\n};\n\nstatic int virtual_hci_open(void)\n{\n    bt_lib_if = bt_lib_get_interface();\n    if (bt_lib_if && bt_lib_if\u2011>hci_ops && bt_lib_if\u2011>hci_ops\u2011>open) {\n        bt_zephyr_id = bt_lib_if\u2011>hci_ops\u2011>open(BT_FEATURES_BLE, &zephyr_hc_callbacks);\n        if (bt_zephyr_id >= 0)\n        return 0;\n    }\n    return \u20111;\n}\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u5982\u679c controller \u4e0a\u62a5\u6570\u636e\uff0c\u5c31\u4f1a\u901a\u8fc7 callback \u8c03\u7528\u5230 zephyr_data_ind\uff0c\u628a\u6570\u636e\u4f20\u9012\u7ed9\u534f\u8bae\u6808\u3002"}),"\n",(0,_.jsx)(e.h4,{id:"\u9002\u914d\u5c42\u5bf9\u63a5\u9a71\u52a8\u5c42",children:"\u9002\u914d\u5c42\u5bf9\u63a5\u9a71\u52a8\u5c42"}),"\n",(0,_.jsx)(e.p,{children:"\u901a\u8fc7\u9002\u914d\u5c42\u7684\u63a5\u53e3\u53ef\u4ee5\u76f4\u63a5\u5bf9 controller \u4f7f\u80fd\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"int bt_ctrl_enable(void)\nint bt_ctrl_disable(void)\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u4ee5\u4e0a\u63a5\u53e3\u5185\u90e8\u662f\u901a\u8fc7 bt_lib_get_interface \u83b7\u53d6\u5230\u9a71\u52a8\u5c42\u63d0\u4f9b\u7684\u63a5\u53e3\u5b8c\u6210 controller \u521d\u59cb\u5316\u3002"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:'if ((bt_lib_interface = bt_lib_get_interface()) && bt_lib_interface\u2011>init) {\n    bt_lib_interface\u2011>init();\n} else {\n    BT_CTRL_ERR("BT LIB Interface not exist!\\n");\n    return \u20111;\n}   \n'})}),"\n",(0,_.jsx)(e.h3,{id:"\u9a71\u52a8\u5c42",children:"\u9a71\u52a8\u5c42"}),"\n",(0,_.jsx)(e.p,{children:"\u9a71\u52a8\u5c42\u4e3a\u9002\u914d\u5c42\u63d0\u4f9b\u63a5\u53e3\uff0c\u5b8c\u6210\u84dd\u7259\u786c\u4ef6\u76f8\u5173\u7684\u521d\u59cb\u5316\u3002"}),"\n",(0,_.jsx)(e.p,{children:"\u4ee3\u7801\u8def\u5f84\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"lichee/rtos/drivers/drv/bluetooth/xradio\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"\u251c\u2500\u2500 driver\n\u2502   \u251c\u2500\u2500 common\n\u2502   \u251c\u2500\u2500 controller\n\u2502   \u251c\u2500\u2500 interface\n\u2502   \u251c\u2500\u2500 Kconfig\n\u2502   \u2514\u2500\u2500 Makefile\n\u251c\u2500\u2500 hci_distribute\n\u2502   \u2514\u2500\u2500 hci_distribute.c\n\u251c\u2500\u2500 include\n\u2502   \u251c\u2500\u2500 driver\n\u2502   \u251c\u2500\u2500 hci_distribute\n\u2502   \u2514\u2500\u2500 lib\n\u251c\u2500\u2500 Kconfig\n\u251c\u2500\u2500 lib\n\u2502   \u2514\u2500\u2500 bt_lib.c\n\u2514\u2500\u2500 Makefile\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u56e0\u4e3a R128 \u5185\u7f6e\u84dd\u7259\uff0c\u6240\u4ee5 HCI \u4f7f\u7528 VHCI\uff0c\u800c\u4e0d\u662f UART \u7b49\u7269\u7406\u63a5\u53e3\u3002"}),"\n",(0,_.jsx)(e.p,{children:"\u4e3a\u9002\u914d\u5c42\u63d0\u4f9b\u63a5\u53e3\uff0c\u9002\u914d\u5c42\u53ef\u4ee5\u901a\u8fc7 bt_lib_get_interface \u83b7\u53d6\u5230\u63a7\u5236\u9a71\u52a8\u7684 btLibInterface\u3002"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"static const bt_lib_interface_t btLibInterface = {\n    .init = bt_lib_init,\n    .deinit = bt_lib_deinit,\n    .hci_ops = &btHCLibInterface,\n    .hci_ctrl_ops = &btHCLibCtrlInterface,\n};\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u5176\u4e2d bt_lib_init \u53ef\u4ee5\u5b8c\u6210 controller \u521d\u59cb\u5316\u3002btHCLibInterface \u5219\u662f\u5bf9 HCI \u63a5\u53e3\u64cd\u4f5c\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"static const bt_hc_interface_t btHCLibInterface = {\n    .open = hci_open,\n    .write = hci_write,\n    .read = hci_read,\n    .close = hci_close,\n};\n"})}),"\n",(0,_.jsx)(e.p,{children:"hci_open\u3001hci_write \u7b49\u5728 VHCI \u4e2d\u5b9e\u73b0\u3002"}),"\n",(0,_.jsx)(e.h3,{id:"firmware",children:"firmware"}),"\n",(0,_.jsx)(e.p,{children:"\u84dd\u7259\u56fa\u4ef6\u662f libxrbtc.a \u6587\u4ef6\uff0c\u8def\u5f84\u5982\u4e0b\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"lichee/rtos/drivers/drv/bluetooth/driver/controller/xradio/sun20iw2\n"})}),"\n",(0,_.jsx)(e.p,{children:"M33 \u7cfb\u7edf\u7f16\u8bd1\u65f6\u4f1a\u628a libxrbtc.a \u7f16\u8bd1\u4e0a\u3002"}),"\n",(0,_.jsx)(e.h2,{id:"\u84dd\u7259\u914d\u7f6e\u8bf4\u660e",children:"\u84dd\u7259\u914d\u7f6e\u8bf4\u660e"}),"\n",(0,_.jsx)(e.p,{children:"R128 \u82af\u7247\u5185\u7f6e\u84dd\u7259\uff0c\u786c\u4ef6\u65e0\u9700\u5916\u63a5\u84dd\u7259\u6a21\u7ec4\uff0c\u84dd\u7259\u8f6f\u4ef6\u5206\u522b\u8fd0\u884c\u5728\u4e24\u4e2a\u6838\u4e0a\uff1a"}),"\n",(0,_.jsxs)(e.ul,{children:["\n",(0,_.jsx)(e.li,{children:"M33 \u6838\uff1a\u84dd\u7259 Controller \u7684\u4ee3\u7801"}),"\n",(0,_.jsx)(e.li,{children:"C906 \u6838\uff1a\u84dd\u7259 Host \u534f\u8bae\u6808\u4e0e\u5e94\u7528\u4ee3\u7801"}),"\n"]}),"\n",(0,_.jsx)(e.p,{children:"\u56e0\u6b64\u914d\u7f6e\u84dd\u7259\u529f\u80fd\u5206\u4e24\u90e8\u5206\u8bf4\u660e\uff0c\u4e00\u822c\u9ed8\u8ba4\u5df2\u7ecf\u914d\u7f6e\u84dd\u7259\uff0c\u82e5\u529f\u80fd\u5f02\u5e38\uff0c\u8bf7\u53c2\u8003\u8bf4\u660e\u68c0\u67e5\u914d\u7f6e\u3002"}),"\n",(0,_.jsx)(e.h3,{id:"m33-\u6838",children:"M33 \u6838"}),"\n",(0,_.jsx)(e.h4,{id:"driver",children:"Driver"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"Drivers Options \u2011\u2011\u2011>\n    other drivers \u2011\u2011\u2011>\n        bluetooth drivers \u2011\u2011\u2011>\n        [*] BLUETOOTH xradio driver\n        [*] Enable Blutooth Drivers Lib\n            Bluetooth Driver Controller (Xradio BT Controller) \u2011\u2011\u2011>\n            xradio bt controller \u2011\u2011\u2011>\n            Bluetooth Driver Interface (Virtual HCI) \u2011\u2011\u2011>\n        [ ] Enable Blutooth Drivers HCI Log Parse\n            Distribution method (Distribute Corresponding) \u2011\u2011\u2011>\n        [ ] corresponding mode debug log\n        (2) Blutooth Drivers Lib Log Level\n"})}),"\n",(0,_.jsx)(e.h4,{id:"amp",children:"AMP"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"System components \u2011\u2011\u2011>\n    aw components \u2011\u2011\u2011>\n        AMP Components Support \u2011\u2011\u2011>\n            [*] AMP BT Support\n                [*] AMP Bluetooth Stub Functions\n                [*] AMP Bluetooth Service\n"})}),"\n",(0,_.jsx)(e.h3,{id:"c906-\u6838",children:"C906 \u6838"}),"\n",(0,_.jsx)(e.h4,{id:"driver-1",children:"Driver"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"Drivers Options \u2011\u2011\u2011>\n    other drivers \u2011\u2011\u2011>\n        bluetooth drivers \u2011\u2011\u2011>\n            [*] BLUETOOTH xradio driver\n            [*] Enable Blutooth Drivers Lib\n                Bluetooth Driver Controller (Xradio BT Controller) \u2011\u2011\u2011>\n                xradio bt controller \u2011\u2011\u2011>\n                Bluetooth Driver Interface (Virtual HCI) \u2011\u2011\u2011>\n            [*] Enable Blutooth Drivers HCI Log Parse\n            [ ] Enable Blutooth Drivers Log hcidump\n            [*] Enable Blutooth Drivers Log btsnoop\n            (512) The extra thread stack size of using FileSystem\n                Distribution method (Distribute Corresponding) \u2011\u2011\u2011>\n            [ ] corresponding mode debug log\n            (1) Blutooth Drivers Lib Log Level\n"})}),"\n",(0,_.jsx)(e.h4,{id:"amp-1",children:"AMP"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"System components \u2011\u2011\u2011>\n    aw components \u2011\u2011\u2011>\n        AMP Components Support \u2011\u2011\u2011>\n            [*] AMP BT Support\n                [*] AMP Bluetooth Stub Functions\n                [*] AMP Bluetooth Service\n"})}),"\n",(0,_.jsx)(e.h4,{id:"\u534f\u8bae\u6808-1",children:"\u534f\u8bae\u6808"}),"\n",(0,_.jsx)(e.p,{children:"BLE \u4f7f\u7528 Zephyr \u534f\u8bae\u6808\uff0cBR/EDR \u4f7f\u7528 Bluedroid \u534f\u8bae\u6808\uff1b"}),"\n",(0,_.jsx)(e.h5,{id:"zephyr",children:"ZEPHYR"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"System components \u2011\u2011\u2011>\n    thirdparty components \u2011\u2011\u2011>\n        [*] bluetooth \u2011\u2011\u2011>\n            [*] Zephyr \u2011\u2011\u2011>\n                [*] Use iterable section instead with XRadio implement\n                Max compiled\u2011in log level for bt (Info) \u2011\u2011\u2011>\n                Bluetooth Stack Selection (HCI\u2011based) \u2011\u2011\u2011>\n                [ ] RAW HCI access\n                [*] Peripheral Role support\n                [*] Central Role support\n                [ ] Extended Advertising and Scanning support [EXPERIMENTAL]\n                (5) Maximum number of simultaneous connections\n                [ ] Controller to Host ACL flow control support\n                [*] Enable fetching of remote version\n                [*] PHY Update\n                [*] Data Length Update\n                [*] BLE Deinit\n                [ ] BLE Global Variable Memory Dynamic Allocation\n                [*] Custom Bluetooth assert implementation\n                [*] Print out an assert string when using BT_ASSERT\n                [ ] Use k_panic() instead of k_oops()\n                Bluetooth debug type (No debug log) \u2011\u2011\u2011>\n                Networking \u2011\u2011\u2011>\n                Debugging Options \u2011\u2011\u2011>\n                [*] Logging \u2011\u2011\u2011>\n                [*] Enable settings subsystem with non\u2011volatile storage \u2011\u2011\u2011>\n                Work Queue Options \u2011\u2011\u2011>\n                [*] Store kernel timeouts in 64 bit precision\n                *** Host Stack Configuration ***\n                (2) Number of HCI command buffers\n                (20) Number of HCI RX buffers\n                (88) Maximum supported HCI RX buffer length\n                (20) Number of discardable event buffers\n                (88) Size of discardable event buffers\n                (1024) HCI ECC thread stack size\n                (2200) Size of the receiving thread stack\n                [*] Load CCC values from settings when peer connects\n                [ ] Store CCC value immediately after it has been written\n                [*] Enable whitelist support\n                (3) Maximum number of pending TX buffers with a callback\n                [*] User control of PHY Update Procedure\n                [ ] Auto\u2011initiate PHY Update Procedure\n                [*] User control of Data Length Update Procedure\n                [ ] Auto\u2011initiate Data Length Update procedure\n                [*] Enable application access to remote information\n                [*] Enable remote version information\n                [*] Security Manager Protocol support\n                [*] Privacy Feature\n                (900) Resolvable Private Address timeout\n                [*] Data signing support\n                [*] Accept or reject pairing initiative\n                [ ] Disable legacy pairing\n                [ ] Secure Connections Only Mode\n                [ ] Force Out Of Band Legacy pairing\n                [*] Allow unauthenticated pairing for paired device\n                [ ] Forbid usage of insecure legacy pairing methods\n                [*] Allow unauthenticated pairing for paired device\n                [ ] Use a fixed passkey for pairing\n                [ ] Enable Security Manager Debug Mode\n                [*] Bondable Mode\n                [ ] Always require bonding\n                [ ] Store Debug Mode bonds\n                [*] Enforce MITM protection\n                [*] Overwrite oldest keys with new ones if key storage is full\n                [ ] Store aging counter every time a successful paring occurs\n                L2CAP Options \u2011\u2011\u2011>\n                ATT and GATT Options \u2011\u2011\u2011>\n                (5) Maximum number of paired devices\n                (3) Timeout for pending LE Create Connection command in seconds\n                (5000) Peripheral connection parameter update timeout in milliseconds\n                (2048) Scan interval used for background scanning in 0.625 ms units\n                (18) Scan window used for background scanning in 0.625 ms units\n                [*] Allow to set Bluetooth device name on runtime\n                (28) Maximum size in bytes for device name\n                (Xradio) Bluetooth device name\n                (0) Bluetooth device appearance\n                (2) Maximum number of local identities\n                [ ] Enable Direction Finding support [EXPERIMENTAL]\n                \u2011*\u2011 Enable ECDH key generation support\n                [*] Emulate ECDH in the Host using TinyCrypt library\n                \u2011*\u2011 Enable host side AES\u2011CCM module\n                [ ] Bluetooth Testing\n                [ ] User Vendor\u2011Specific event handling\n                (0x05F1) Company Id\n                [*] Bluetooth Mesh support \u2011\u2011\u2011>\n"})}),"\n",(0,_.jsx)(e.h5,{id:"bluedroid",children:"BLUEDROID"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"System components \u2011\u2011\u2011>\n    thirdparty components \u2011\u2011\u2011>\n        [*] bluetooth \u2011\u2011\u2011>\n            [*] Bluedroid \u2011\u2011\u2011>\n                [*] Bluedroid enable\n                [*] Bluedroid \u2011 Dual\u2011mode\n                [*] Bluedroid Host\n                Bluedroid\u2011BT Options \u2011\u2011\u2011>\n                (4096) Bluetooth event (callback to application) task stack size\n                The cpu core which Bluedroid run (Core 0 (PRO CPU)) \u2011\u2011\u2011>\n                (4096) Bluetooth Bluedroid Host Stack task stack size\n                [ ] Bluedroid memory debug\n                [*] Classic Bluetooth\n                [*] A2DP\n                [*] SPP\n                [*] Hands Free/Handset Profile\n                    Hands\u2011free Profile Role configuration (Hands Free Unit) \u2011\u2011\u2011>\n                    audio(SCO) data path (HCI) \u2011\u2011\u2011>\n                [*] Wide Band Speech\n                [ ] Classic BT HID Host\n                [*] Secure Simple Pairing\n                [ ] Bluetooth Low Energy\n                [ ] Disable BT debug logs (minimize bin size)\n                BT DEBUG LOG LEVEL \u2011\u2011\u2011>\n                (4) BT/BLE MAX ACL CONNECTIONS(1~7)\n                [ ] BT/BLE will first malloc the memory from the PSRAM\n                [*] Use dynamic memory allocation in BT/BLE stack\n                [*] BLE queue congestion check\n                (30) Timeout of BLE connection establishment\n                (248) Maximum size in bytes for bredr device name\n            XRADIO_COMMON \u2011\u2011\u2011>\n                [*] HCI LAYER RX support\n                [*] hcilog enable\n                [*] A2dp source process feature support\n                (1) hcidmp buffer\n                [*] bluedroid use settings\n                (8) bluedroid max store value\n                (1536) bluedroid max file size\n                (2048) bluedroid file defaule length\n                (bt_cfg_key) bluedroid store key name\n                (2) bluedroid log defaule level\n"})}),"\n",(0,_.jsx)(e.h4,{id:"btmanager",children:"btmanager"}),"\n",(0,_.jsx)(e.p,{children:"btmanager \u914d\u7f6e\u5982\u4e0b"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"System components \u2011\u2011\u2011>\n    aw components \u2011\u2011\u2011>\n        wireless \u2011\u2011\u2011>\n        [*] btmanager \u2011\u2011\u2011>\n            [*] btmg core\n            [ ] Enable AudioTrack send audio data\n            [*] btmg cmd\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u5176\u4e2d \u201cEnable AudioTrack send audio data\u201d \u9ed8\u8ba4\u4e0d\u6253\u5f00\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528 AudioTrack \u63a5\u7ba1 A2DP Source \u84dd\u7259\u97f3\u4e50\u64ad\u653e\u9700\u8981\u9009\u4e0a\u3002"}),"\n",(0,_.jsx)(e.p,{children:"\u9009\u4e0a\u4e4b\u540e\uff0c\u901a\u8fc7 btcli demo \u5c06\u65e0\u6cd5\u6d4b\u8bd5 A2DP Source \u84dd\u7259\uff0c\u8bf7\u53c2\u8003 as_test demo \u4f7f\u7528\u3002"}),"\n",(0,_.jsx)(e.h4,{id:"tools",children:"Tools"}),"\n",(0,_.jsx)(e.p,{children:"\u5e38\u7528\u7684\u84dd\u7259\u5de5\u5177\u6709 btetf \u548c btsnoop"}),"\n",(0,_.jsx)(e.h5,{id:"btetf",children:"BTETF"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"System components \u2011\u2011\u2011>\n    aw components \u2011\u2011\u2011>\n        aw bluetooth \u2011\u2011\u2011>\n            [*] etf\n"})}),"\n",(0,_.jsx)(e.h5,{id:"btsnoop",children:"BTSNOOP"}),"\n",(0,_.jsx)(e.p,{children:"\u7528\u4e8e\u6293 hci log\uff0c\u9ed8\u8ba4\u6253\u5f00"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"Drivers Options \u2011\u2011\u2011>\n    other drivers \u2011\u2011\u2011>\n        bluetooth drivers \u2011\u2011\u2011>\n            [*] Enable Blutooth Drivers Log btsnoop\n"})}),"\n",(0,_.jsx)(e.h2,{id:"bredr-\u5f00\u53d1\u4ecb\u7ecd",children:"BR/EDR \u5f00\u53d1\u4ecb\u7ecd"}),"\n",(0,_.jsx)(e.h3,{id:"\u57fa\u7840-api",children:"\u57fa\u7840 API"}),"\n",(0,_.jsxs)(e.table,{children:[(0,_.jsx)(e.thead,{children:(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"API \u63a5\u53e3"}),(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"\u8bf4\u660e"})]})}),(0,_.jsxs)(e.tbody,{children:[(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_core_init"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmanager \u5185\u90e8\u8d44\u6e90\u521d\u59cb\u5316\u63a5\u53e3\uff0c\u8fdb\u884c\u5185\u5b58\u8d44\u6e90\u7533\u8bf7"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_core_deinit"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmanager \u5185\u90e8\u8d44\u6e90\u53d1\u59cb\u5316\u63a5\u53e3"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_set_profile"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e\u84dd\u7259 profile \u529f\u80fd\uff0c\u5728 btmg_adapter_enable() \u4e4b\u524d\u8bbe\u7f6e\u6709\u6548\uff0c\u5728\u7528\u6237\u672a\u53cd\u521d\u59cb\u5316\u9000\u51fa\u7684\u60c5\u51b5\u4e0b\u8be5\u8bbe\u7f6e\u4e00\u76f4\u751f\u6548"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_set_loglevel"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e btmanager \u5185\u90e8\u6253\u5370\u7b49\u7ea7\uff0c\u9ed8\u8ba4\u6253\u5370\u7b49\u7ea7\u662fBTMG_LOG_LEVEL_WARNG"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_get_loglevel"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6 btmanager \u5185\u90e8\u5f53\u524d\u4f7f\u7528\u7684\u6253\u5370\u7b49\u7ea7"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_set_ex_debug"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e\u62d3\u5c55\u8c03\u8bd5\u6807\u5fd7\u4f4d\uff0c\u7528\u4e8e\u6253\u5f00\u7279\u6b8a\u6253\u5370\u8f93\u51fa"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_get_ex_debug"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u5f53\u524d\u8bbe\u7f6e\u62d3\u5c55\u8c03\u8bd5\u6807\u5fd7\u4f4d\u7684\u503c"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_get_error_info"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u9519\u8bef\u4fe1\u606f"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_enable"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5f00\u5173\u84dd\u7259\u7684\u4f5c\u7528\uff0c\u4f1a\u8fdb\u884c firmware \u548c\u84dd\u7259\u534f\u8bae\u6808\u7b49\u521d\u59cb\u5316/\u53cd\u521d\u59cb\u5316"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_get_state"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u84dd\u7259\u5f00\u5173\u72b6\u6001"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_get_address"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u672c\u5730\u84dd\u7259\u8bbe\u5907\u5730\u5740"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_set_name"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e\u672c\u5730\u84dd\u7259\u8bbe\u5907\u540d\u79f0"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_get_name"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u672c\u5730\u84dd\u7259\u8bbe\u5907\u540d\u79f0"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_set_scanmode"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e\u672c\u5730 BT \u8bbe\u5907\u626b\u63cf\u6a21\u5f0f\uff08PSCAN,ISCAN\uff09\uff0c\u51b3\u5b9a\u8bbe\u5907\u662f\u5426\u53ef\u8fde\u63a5\uff0c\u53ef\u53d1\u73b0"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_set_io_capability"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e\u672c\u5730\u84dd\u7259\u8bbe\u5907\u7684\u8f93\u5165\u3001\u8f93\u51fa\u80fd\u529b"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_start_scan"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5f00\u59cb\u626b\u63cf\u5468\u56f4\u7684\u84dd\u7259\u8bbe\u5907"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_stop_scan"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u505c\u6b62 BT \u626b\u63cf"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_is_scanning"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u5f97\u5f53\u524d BT \u626b\u63cf\u72b6\u6001"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_pair_device"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u8d77\u84dd\u7259\u914d\u5bf9"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_adapter_unpair_device"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d6\u6d88\u84dd\u7259\u914d\u5bf9"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_get_paired_device_num"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u5df2\u914d\u5bf9\u8bbe\u5907\u6570\u91cf"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_get_paired_devices"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u6240\u6709\u5df2\u914d\u5bf9\u8bbe\u5907\u4fe1\u606f"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_set_page_timeout"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"N/A"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_device_is_connected"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5224\u65ad\u5bf9\u7aef\u8bbe\u5907\u662f\u5426\u8ddf\u672c\u5730\u8bbe\u5907\u5b58\u5728\u8fde\u63a5\u5173\u7cfb"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_device_get_name"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u6307\u5b9a\u84dd\u7259\u8bbe\u5907\u7684\u540d\u79f0"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_device_remove"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"N/A"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_device_pincode_reply"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u56de\u590d pincode"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_device_passkey_reply"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u56de\u590d passkey"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_device_passkey_confirm"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u786e\u8ba4 passkey"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_device_pairing_confirm"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u786e\u8ba4\u914d\u5bf9"})]})]})]}),"\n",(0,_.jsx)(e.h3,{id:"a2dp-sink-\u5f00\u53d1-api",children:"A2DP Sink \u5f00\u53d1 API"}),"\n",(0,_.jsx)(e.p,{children:"A2DP Sink \u8bbe\u5907\u4e00\u822c\u4f5c\u4e3a\u97f3\u7bb1\u7c7b\u4ea7\u54c1\uff0c\u4f1a\u88ab\u624b\u673a\u7b49 A2DP Source \u8bbe\u5907\u8fde\u63a5\u5e76\u63a8\u9001\u97f3\u9891\u6d41\u64ad\u653e\u97f3\u4e50"}),"\n",(0,_.jsxs)(e.table,{children:[(0,_.jsx)(e.thead,{children:(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"API \u63a5\u53e3"}),(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"\u8bf4\u660e"})]})}),(0,_.jsxs)(e.tbody,{children:[(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_a2dp_sink_connect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8fde\u63a5\u6307\u5b9a A2DP Source \u8bbe\u5907\uff0c\u53ef\u7528\u4e8e\u56de\u8fde\u529f\u80fd\u5f00\u53d1"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_a2dp_sink_disconnect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u4e3b\u52a8\u65ad\u5f00\u4e0e\u6307\u5b9a\u8bbe\u5907\u7684\u8fde\u63a5"})]})]})]}),"\n",(0,_.jsx)(e.h4,{id:"a2dp-sink-api-\u8c03\u7528\u6d41\u7a0b",children:"A2DP Sink API \u8c03\u7528\u6d41\u7a0b"}),"\n",(0,_.jsxs)(e.p,{children:["\u5173\u4e8e A2DP Sink \u529f\u80fd\u7684\u5b9e\u73b0\uff0c\u5df2\u7f16\u5199\u4e86\u4f7f\u7528\u793a\u4f8b\uff0c\u6267\u884c ",(0,_.jsx)(e.code,{children:"btcli init \u2011p a2dp\u2011sink"})," \u5373\u53ef\u8fd0\u884c\uff0c\u4f9b\u7528\u6237\u4f7f\u7528\u53c2\u8003\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"]}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:'#include "cmd_util.h"\n#include <stdio.h>\n#include <stdlib.h>\n#include <getopt.h>\n\n#include "btmg_dev_list.h"\n#include "bt_manager.h"\n\nbtmg_callback_t btmg_cbs;\ndev_list_t *discovered_devices = NULL;\n\n#ifdef CONFIG_BT_A2DP_ENABLE\nextern void btcli_a2dp_source_connection_state_cb(const char *bd_addr,\n                                                  btmg_a2dp_source_connection_state_t state);\nextern void btcli_a2dp_source_audio_state_cb(const char *bd_addr,\n                                             btmg_a2dp_source_audio_state_t state);\nextern void btcli_a2dp_sink_connection_state_cb(const char *bd_addr,\n                                                btmg_a2dp_sink_connection_state_t state);\nextern void btcli_a2dp_sink_audio_state_cb(const char *bd_addr, btmg_a2dp_sink_audio_state_t state);\nextern void btcli_avrcp_ct_play_state_cb(const char *bd_addr, btmg_avrcp_play_state_t state);\nextern void btcli_avrcp_ct_track_changed_cb(const char *bd_addr, btmg_track_info_t *track_info);\nextern void btcli_avrcp_ct_play_position_cb(const char *bd_addr, int song_len, int song_pos);\nextern void btcli_avrcp_audio_volume_cb(const char *bd_addr, unsigned int volume);\nextern void btcli_avrcp_tg_play_state_cb(const char *bd_addr, btmg_avrcp_play_state_t state);\n#endif\n#ifdef CONFIG_BT_SPP_ENABLED\nextern void btcli_sppc_conn_status_cb(const char *bd_addr, btmg_spp_connection_state_t status);\nextern void btcli_sppc_recvdata_cb(const char *bd_addr, char *data, int data_len);\nextern void btcli_spps_conn_status_cb(const char *bd_addr, btmg_spp_connection_state_t status);\nextern void btcli_spps_recvdata_cb(const char *bd_addr, char *data, int data_len);\n#endif\n#ifdef CONFIG_BT_HFP_CLIENT_ENABLE\nextern void btcli_hfp_hf_event_cb(btmg_hfp_hf_event_t event, void *data);\nextern void btcli_hfp_hf_connection_state_cb(const char *bd_addr,\n                                             btmg_hfp_hf_connection_state_t state);\n#endif\n#ifdef CONFIG_BT_HFP_AG_ENABLE\nextern void btcli_hfp_ag_event_cb(btmg_hfp_ag_event_t event, void *data);\nextern void btcli_hfp_ag_connection_state_cb(const char *bd_addr,\n                                             btmg_hfp_ag_connection_state_t state);\nextern void btcli_hfp_ag_audio_incoming_cb(const uint8_t *buf, uint32_t sz);\nextern uint32_t btcli_hfp_ag_audio_outgoing_cb(uint8_t *p_buf, uint32_t sz);\n#endif\nextern void btcli_ble_scan_cb(le_scan_cb_para_t *data);\nextern void btcli_ble_connection_cb(le_connection_para_t *data);\nextern void btcli_gattc_dis_att_cb(gattc_dis_cb_para_t *data);\nextern void btcli_gattc_notify_indicate_cb(gattc_notify_indicate_cb_para_t *data);\nextern void btcli_gatts_get_db_cb(gatts_get_db_t *data);\nextern void btcli_gatts_char_read_req_cb(gatts_char_read_req_t *data);\nextern void btcli_gatts_char_write_req_cb(gatts_char_write_req_t *data);\nextern void btcli_gatts_ccc_cfg_cb(gatts_ccc_cfg_t *data);\nextern void btcli_gattc_read_cb(gattc_read_cb_para_t *data);\nextern void btcli_gattc_write_cb(gattc_write_cb_para_t *data);\n\n#define AUTH_IDLE            0\n#define AUTH_PIN_CODE        1\n#define AUTH_ENTER_PASSKEY   2\n#define AUTH_PASSKEY_CONFIRM 3\n#define AUTH_PAIRING_CONFIRM 4\n\ntypedef struct {\n    char addr[18];\n    uint32_t passkey;\n    uint8_t flag; //0:none 1:pin code 2:enter passkey 3:passkey_confirm 4: pairing confirm\n} pair_req_t;\n\nstatic btmg_gatt_db_t *db;\nstatic int ble_gatt_register_service(void)\n{\n    if (db != NULL) {\n        CMD_ERR("gatt already registered\\n");\n        return 0;\n    }\n\n    btmg_uuid_t uuid;\n    btmg_gatt_properties_t prop;\n    btmg_gatt_permission_t perm = BTMG_GATT_PERM_READ | BTMG_GATT_PERM_WRITE;\n\n    /* service1 start, uuid=0xABCD */\n    db = btmg_gatt_attr_create(12); //CHAR+2 other+1\n    uuid.type = BTMG_UUID_16;\n    uuid.value.u16 = 0xABCD;\n    btmg_gatt_attr_primary_service(db, uuid); // +1\n\n    uuid.value.u16 = 0xfff2;\n    prop = BTMG_GATT_CHRC_READ | BTMG_GATT_CHRC_WRITE;\n    btmg_gatt_attr_characteristic(db, uuid, prop, perm); // +2\n\n    uuid.value.u16 = 0xfff3;\n    prop = BTMG_GATT_CHRC_READ | BTMG_GATT_CHRC_WRITE | BTMG_GATT_CHRC_NOTIFY | BTMG_GATT_CHRC_INDICATE;\n    btmg_gatt_attr_characteristic(db, uuid, prop, perm); // +2\n    btmg_gatt_attr_ccc(db, perm);                        // +1\n    /* service1 end*/\n    /* service2 start, uuid=0x7788 */\n    uuid.type = BTMG_UUID_16;\n    uuid.value.u16 = 0x7788;\n    btmg_gatt_attr_primary_service(db, uuid); // +1\n\n    uuid.value.u16 = 0x1122;\n    prop = BTMG_GATT_CHRC_READ;\n    btmg_gatt_attr_characteristic(db, uuid, prop, perm); // +2\n\n    uuid.value.u16 = 0x3344;\n    prop = BTMG_GATT_CHRC_READ | BTMG_GATT_CHRC_WRITE | BTMG_GATT_CHRC_NOTIFY;\n    btmg_gatt_attr_characteristic(db, uuid, prop, perm); // +2\n    btmg_gatt_attr_ccc(db, perm);                        // +1\n    /* service2 end*/\n\n    btmg_gatt_register_service(db);\n\n    return CMD_STATUS_OK;\n}\n\nstatic int ble_gatt_unregister_service(void)\n{\n    if (db == NULL) {\n        CMD_ERR("gatt already unregistered\\n");\n        return 0;\n    }\n\n    btmg_gatt_unregister_service(db);\n\n    return CMD_STATUS_OK;\n}\n\nstatic int ble_set_adv_data(void)\n{\n    int index = 0;\n    uint16_t uuid = 0x1234;\n    char ble_name[] = "aw-btcli-ble";\n\n    btmg_adv_scan_rsp_data_t adv_data;\n\n    adv_data.data[index] = 0x02; /* flag len */\n    adv_data.data[index + 1] = 0x01; /* type for flag */\n    adv_data.data[index + 2] = 0x1A; //0x05\n\n    index += adv_data.data[index] + 1;\n\n    adv_data.data[index] = strlen(ble_name) + 1; /* name len */\n    adv_data.data[index + 1] = 0x09; /* type for local name */\n    int name_len;\n    name_len = strlen(ble_name);\n    strcpy(&(adv_data.data[index + 2]), ble_name);\n    index += adv_data.data[index] + 1;\n\n    adv_data.data[index] = 0x03; /* uuid len */\n    adv_data.data[index + 1] = 0x03; /* type for complete list of 16-bit uuid */\n    adv_data.data[index + 2] = (char)(uuid & 0xFF);\n    adv_data.data[index + 3] = (char)((uuid >> 8) & 0xFF);\n    index += adv_data.data[index] + 1;\n\n    adv_data.data_len = index;\n\n    return btmg_le_set_adv_scan_rsp_data(&adv_data, NULL);\n}\n\nstatic int ble_advertise_on(void)\n{\n    btmg_le_adv_param_t adv_param;\n\n    adv_param.interval_min = 0x0020;\n    adv_param.interval_max = 0x01E0;\n    adv_param.adv_type = BTMG_LE_ADV_IND;\n\n    btmg_le_set_adv_param(&adv_param);\n    ble_set_adv_data();\n    return btmg_le_enable_adv(true);\n}\n\nstatic pair_req_t pair_req = { { 0 }, 0, 0 };\n\nvoid btcli_scan_status_cb(btmg_scan_state_t status)\n{\n    if (status == BTMG_SCAN_STARTED) {\n        CMD_DBG("start scanning\\n");\n    } else if (status == BTMG_SCAN_STOPPED) {\n        CMD_DBG("stop scanning\\n");\n    }\n}\n\nvoid btcli_scan_dev_add_cb(btmg_device_t *device)\n{\n    dev_node_t *dev_node = NULL;\n\n    CMD_DBG("name:[%s]\\t\\taddress:[%s]\\t\\tclass:[%d]\\t\\trssi:[%d]\\n", device->name, device->address,\n            device->cod, device->rssi);\n\n    dev_node = btmg_dev_list_find_device(discovered_devices, device->address);\n    if (dev_node != NULL) {\n        return;\n    }\n\n    btmg_dev_list_add_device(discovered_devices, device->name, device->address, 0);\n}\n\nvoid btcli_adapter_name_cb(char *name)\n{\n    CMD_DBG("btcli get adapter name:%s\\n", name);\n}\n\nvoid btcli_device_name_cb(char *name)\n{\n    CMD_DBG("btcli get remote device name:%s\\n", name);\n}\n\nvoid btcli_bonded_device_cb(btmg_bond_state_t state, const char *bd_addr)\n{\n    dev_node_t *dev_discovered_node = NULL;\n\n    CMD_DBG("bonded device state:%d, addr:%s\\n", state, bd_addr);\n\n    dev_discovered_node = btmg_dev_list_find_device(discovered_devices, bd_addr);\n    if (state == BTMG_BOND_STATE_BONDED) {\n        if (dev_discovered_node != NULL) {\n            btmg_dev_list_remove_device(discovered_devices, bd_addr);\n        }\n        CMD_DBG("Pairing state for %s is BONDED \\n", bd_addr);\n    } else if (state == BTMG_BOND_STATE_BOND_FAILED) {\n        CMD_DBG("Pairing state for %s is BOND_FAILED \\n", bd_addr);\n    }\n}\n\nvoid btcli_device_pindcoe_request_cb(const char *addr)\n{\n    CMD_DBG("dev:%s,pindcoe request, Please enter pincode\\n", addr);\n    memcpy(pair_req.addr, addr, sizeof(pair_req.addr));\n    pair_req.flag = AUTH_PIN_CODE;\n}\n\nvoid btcli_device_passkey_request_cb(const char *addr)\n{\n    CMD_DBG("dev:%s,passkey_request, Please enter passkey!\\n", addr);\n    memcpy(pair_req.addr, addr, sizeof(pair_req.addr));\n    pair_req.flag = AUTH_ENTER_PASSKEY;\n}\n\nvoid btcli_device_passkey_confirm_cb(const char *addr, uint32_t passkey)\n{\n    CMD_DBG("please confirm the passkey(%d) sent by the %s device!\\n", passkey, addr);\n    memcpy(pair_req.addr, addr, sizeof(pair_req.addr));\n    pair_req.passkey = passkey;\n    pair_req.flag = AUTH_PASSKEY_CONFIRM;\n}\n\nvoid btcli_device_pairing_confirm_cb(const char *addr, uint32_t passkey)\n{\n    CMD_DBG("dev:%s,pairing_confirm,please compare the passkey numeric value: %d\\n", addr, passkey);\n    memcpy(pair_req.addr, addr, sizeof(pair_req.addr));\n    pair_req.passkey = passkey;\n    pair_req.flag = AUTH_PAIRING_CONFIRM;\n}\n\nvoid btcli_adapter_status_cb(btmg_adapter_state_t status)\n{\n    char bt_addr[18] = { 0 };\n    char bt_name_buf[64] = { 0 };\n    char bt_name[64] = { 0 };\n\n    if (status == BTMG_ADAPTER_OFF) {\n        CMD_DBG("BT is off\\n");\n    } else if (status == BTMG_ADAPTER_ON) {\n        CMD_DBG("BT is on\\n");\n        btmg_adapter_get_address(bt_addr);\n        if (bt_addr[0] != \'\\0\') {\n            snprintf(bt_name_buf, 12, "aw-btcli-%s-", (char *)(bt_addr + 12));\n            sprintf(bt_name, "%s-%s", bt_name_buf, (char *)(bt_addr + 15));\n            btmg_adapter_set_name(bt_name);\n        } else {\n            btmg_adapter_set_name("aw-btcli");\n        }\n        btmg_adapter_set_io_capability(BTMG_IO_CAP_NOINPUTNOOUTPUT);\n        btmg_adapter_set_scanmode(BTMG_SCAN_MODE_CONNECTABLE_DISCOVERABLE);\n    } else if (status == BTMG_ADAPTER_TURNING_ON) {\n        CMD_DBG("BT is turnning on\\n");\n    } else if (status == BTMG_ADAPTER_TURNING_OFF) {\n        CMD_DBG("BT is turnning off\\n");\n    }\n}\n\n/* btcli pincode <0000~9999> */\nenum cmd_status btcli_pincode(char *cmd)\n{\n    if (pair_req.flag != AUTH_PIN_CODE) {\n        CMD_ERR("No need to enter pin code now\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argv[0]);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_device_pincode_reply(argv[0]);\n    pair_req.flag = AUTH_IDLE;\n\n    return CMD_STATUS_OK;\n}\n\n#if (BT_SSP_INCLUDED == TRUE)\n/* btcli passkey <000000~999999> */\nenum cmd_status btcli_passkey(char *cmd)\n{\n    if (pair_req.flag != AUTH_ENTER_PASSKEY) {\n        CMD_ERR("No need to enter passkey now\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    uint32_t passkey = 0;\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n    passkey = atoi(argv[0]);\n    if (passkey > 999999) {\n        CMD_ERR("Passkey should be between 0-999999");\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_device_passkey_reply(passkey);\n    pair_req.flag = AUTH_IDLE;\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli passkey_confirm */\nenum cmd_status btcli_passkey_confirm(char *cmd)\n{\n    if (pair_req.flag != AUTH_PASSKEY_CONFIRM) {\n        CMD_ERR("No need to enter this command now\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    btmg_device_passkey_confirm(pair_req.passkey);\n    pair_req.flag = AUTH_IDLE;\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli pairing_confirm */\nenum cmd_status btcli_pairing_confirm(char *cmd)\n{\n    if (pair_req.flag != AUTH_PAIRING_CONFIRM) {\n        CMD_ERR("No need to need to enter this command now\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    btmg_device_pairing_confirm();\n    pair_req.flag = AUTH_IDLE;\n\n    return CMD_STATUS_OK;\n}\n#endif\n\n/* btcli scan_list */\nenum cmd_status btcli_scan_list(char *cmd)\n{\n    dev_node_t *dev_node = NULL;\n\n    if (discovered_devices == NULL) {\n        CMD_WRN("scan list is empty\\n");\n        return CMD_STATUS_OK;\n    }\n\n    dev_node = discovered_devices->head;\n    while (dev_node != NULL) {\n        CMD_DBG("addr: %s, name: %s\\n", dev_node->dev_addr, dev_node->dev_name);\n        dev_node = dev_node->next;\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli paired_list */\nenum cmd_status btcli_paired_list(char *cmd)\n{\n    int device_num = -1;\n    btmg_err ret;\n\n    btmg_get_paired_device_num(&device_num);\n    if (device_num <= 0) {\n        CMD_DBG("no device is bonded!\\n");\n        return CMD_STATUS_OK;\n    }\n\n    btmg_paired_device_t paired_list[device_num];\n\n    if ((ret = btmg_get_paired_devices(device_num, paired_list)) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n\n    CMD_DBG("get paired device_list:\\n");\n    for (int i = 0; i < device_num; i++) {\n        CMD_DBG("device[%s]\\n", paired_list[i].address);\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli scan_mode <0~2> */\nenum cmd_status btcli_set_scanmode(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    int mode;\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n    mode = cmd_atoi(argv[0]);\n\n    btmg_adapter_set_scanmode(mode);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli scan <on/off> */\nenum cmd_status btcli_scan(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, cmd_nitems(argv));\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if (!strcmp(argv[0], "on")) {\n        if (discovered_devices != NULL) {\n            btmg_dev_list_free(discovered_devices);\n            discovered_devices = NULL;\n        }\n        discovered_devices = btmg_dev_list_new();\n        if (discovered_devices == NULL)\n            return CMD_STATUS_FAIL;\n        btmg_adapter_start_scan();\n    } else if (!strcmp(argv[0], "off")) {\n        btmg_adapter_stop_scan();\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli io_cap <0~4> */\nenum cmd_status btcli_set_io_cap(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    int io_cap;\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n    io_cap = cmd_atoi(argv[0]);\n\n    btmg_adapter_set_io_capability(io_cap);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli get_dev_name */\nenum cmd_status btcli_get_device_name(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_device_get_name(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli get_name */\nenum cmd_status btcli_get_adapter_name(char *cmd)\n{\n    btmg_adapter_get_name();\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli set_name <name> */\nenum cmd_status btcli_set_adapter_name(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_adapter_set_name(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli get_mac */\nenum cmd_status btcli_get_adapter_mac(char *cmd)\n{\n    char mac[18] = { 0 };\n\n    btmg_adapter_get_address(mac);\n    CMD_DBG("adapter mac is:%s", mac);\n\n    return CMD_STATUS_OK;\n}\n\nstatic bool btcli_init_state = false;\nstatic int profile = 0;\n\n/* btcli init or btcli init -p a2dp-source -d 4 */\nenum cmd_status btcli_init(char *cmd)\n{\n    int i = 0;\n    int argc;\n    char *argv[10];\n\n    btmg_log_level_t debug;\n\n    argc = cmd_parse_argv(cmd, argv, cmd_nitems(argv));\n\n    for (i = 0; i < argc; i++) {\n        if (strcmp(argv[i], "-h") == 0) {\n            CMD_DBG("Usage:\\n"\n                   "  [OPTION]...\\n"\n                   "\\nOptions:\\n"\n                   "  -h, --help\\t\\tprint this help and exit\\n"\n                   "  -d, --debug\\t open debug :-d [0~5]\\n"\n                   "  -p, --profile=NAME\\tenable bluetooth profile\\n"\n                   "  [supported profile name]:\\n"\n                   "  - a2dp-source\\tAdvanced Audio Source\\n"\n                   "  - a2dp-sink\\tAdvanced Audio Sink\\n"\n                   "  - hfp-hf\\tHands-Free\\n"\n                   "  - spp-server\\tSerial Port Profile-Server role\\n"\n                   "  - spp-client\\tSerial Port Profile-Client role\\n"\n                   "  - gatt-server\\tble gatt server\\n"\n                   "  - gatt-client\\tble gatt client\\n");\n            return CMD_STATUS_OK;\n        }\n\n        if (strcmp(argv[i], "-p") == 0) {\n            if (i + 1 < argc) {\n                int c;\n                struct {\n                    const char *name;\n                    int value;\n                } map[] = {\n                    { "a2dp-sink",      BTMG_A2DP_SINK },\n                    { "a2dp-source",    BTMG_A2DP_SOURCE },\n                    { "hfp-hf",         BTMG_HFP_HF},\n                    { "hfp-ag",         BTMG_HFP_AG},\n                    { "spp-server",     BTMG_SPP_SERVER },\n                    { "spp-client",     BTMG_SPP_CLIENT },\n                    { "gatt-server",    BTMG_GATT_SERVER },\n                    { "gatt-client",    BTMG_GATT_CLIENT},\n                };\n\n                for (c = 0; c < ARRAY_SIZE(map); c++) {\n                    if (strcasecmp(argv[i+1], map[c].name) == 0) {\n                        profile |= map[c].value;\n                        break;\n                    }\n                }\n                if (c == ARRAY_SIZE(map)) {\n                    CMD_ERR("Invalid BT profile name: %s\\n", argv[i+1]);\n                }\n            }else {\n                CMD_ERR("invalid parameter, please specify a profile\\n");\n                break;\n            }\n        }\n\n        if (strcmp(argv[i], "-d") == 0) {\n            if (i + 1 < argc) {\n                debug = (btmg_log_level_t)atoi(argv[i+1]);\n                CMD_DBG("debug loglevel :%d\\n", (int)debug);\n                btmg_set_loglevel(debug);\n            } else {\n                CMD_ERR("invalid parameter, please specify a level\\n");\n                break;\n            }\n        }\n    }\n    if (btcli_init_state) {\n        CMD_WRN("BT is already INIT!\\n");\n        return CMD_STATUS_OK;\n    }\n\n    if (profile == 0) {\n        CMD_DBG("use default profile\\n");\n        profile |= BTMG_A2DP_SINK;\n    }\n\n    btmg_cbs.btmg_adapter_cb.state_cb = btcli_adapter_status_cb;\n    btmg_cbs.btmg_adapter_cb.scan_status_cb = btcli_scan_status_cb;\n    btmg_cbs.btmg_device_cb.device_add_cb = btcli_scan_dev_add_cb;\n    btmg_cbs.btmg_adapter_cb.bonded_device_cb = btcli_bonded_device_cb;\n    btmg_cbs.btmg_adapter_cb.get_name_cb = btcli_adapter_name_cb;\n    btmg_cbs.btmg_device_cb.pindcoe_request_cb = btcli_device_pindcoe_request_cb;\n    btmg_cbs.btmg_device_cb.passkey_request_cb = btcli_device_passkey_request_cb;\n    btmg_cbs.btmg_device_cb.passkey_confirm_cb = btcli_device_passkey_confirm_cb;\n    btmg_cbs.btmg_device_cb.pairing_confirm_cb = btcli_device_pairing_confirm_cb;\n#ifdef CONFIG_BT_A2DP_ENABLE\n    if (profile & BTMG_A2DP_SINK) {\n        btmg_cbs.btmg_a2dp_sink_cb.conn_state_cb = btcli_a2dp_sink_connection_state_cb;\n        btmg_cbs.btmg_a2dp_sink_cb.audio_state_cb = btcli_a2dp_sink_audio_state_cb;\n    }\n    if (profile & BTMG_A2DP_SOURCE) {\n        btmg_cbs.btmg_a2dp_source_cb.conn_state_cb = btcli_a2dp_source_connection_state_cb;\n        btmg_cbs.btmg_a2dp_source_cb.audio_state_cb = btcli_a2dp_source_audio_state_cb;\n    }\n    btmg_cbs.btmg_avrcp_cb.avrcp_ct_play_state_cb = btcli_avrcp_ct_play_state_cb;\n    btmg_cbs.btmg_avrcp_cb.avrcp_ct_play_position_cb = btcli_avrcp_ct_play_position_cb;\n    btmg_cbs.btmg_avrcp_cb.avrcp_ct_track_changed_cb = btcli_avrcp_ct_track_changed_cb;\n    btmg_cbs.btmg_avrcp_cb.avrcp_tg_play_state_cb = btcli_avrcp_tg_play_state_cb;\n    btmg_cbs.btmg_avrcp_cb.avrcp_audio_volume_cb = btcli_avrcp_audio_volume_cb;\n#endif\n#ifdef CONFIG_BT_SPP_ENABLED\n    if (profile & BTMG_SPP_CLIENT) {\n        btmg_cbs.btmg_sppc_cb.conn_state_cb = btcli_sppc_conn_status_cb;\n        btmg_cbs.btmg_sppc_cb.recvdata_cb = btcli_sppc_recvdata_cb;\n    }\n    if (profile & BTMG_SPP_SERVER) {\n        btmg_cbs.btmg_spps_cb.conn_state_cb = btcli_spps_conn_status_cb;\n        btmg_cbs.btmg_spps_cb.recvdata_cb = btcli_spps_recvdata_cb;\n    }\n#endif\n#ifdef CONFIG_BT_HFP_CLIENT_ENABLE\n    if (profile & BTMG_HFP_HF) {\n        btmg_cbs.btmg_hfp_hf_cb.conn_state_cb = btcli_hfp_hf_connection_state_cb;\n        btmg_cbs.btmg_hfp_hf_cb.event_cb = btcli_hfp_hf_event_cb;\n    }\n#endif\n#ifdef CONFIG_BT_HFP_AG_ENABLE\n    if (profile & BTMG_HFP_AG) {\n        btmg_cbs.btmg_hfp_ag_cb.conn_state_cb = btcli_hfp_ag_connection_state_cb;\n        btmg_cbs.btmg_hfp_ag_cb.event_cb = btcli_hfp_ag_event_cb;\n        btmg_cbs.btmg_hfp_ag_cb.audio_incoming_cb = btcli_hfp_ag_audio_incoming_cb;\n        btmg_cbs.btmg_hfp_ag_cb.audio_outgoing_cb = btcli_hfp_ag_audio_outgoing_cb;\n    }\n#endif\n    if (profile & BTMG_GATT_SERVER) {\n        btmg_cbs.btmg_gatts_cb.conn_cb = btcli_ble_connection_cb;\n        btmg_cbs.btmg_gatts_cb.get_db_cb = btcli_gatts_get_db_cb;\n        btmg_cbs.btmg_gatts_cb.char_read_req_cb = btcli_gatts_char_read_req_cb;\n        btmg_cbs.btmg_gatts_cb.char_write_req_cb = btcli_gatts_char_write_req_cb;\n        btmg_cbs.btmg_gatts_cb.ccc_cfg_cb = btcli_gatts_ccc_cfg_cb;\n    }\n    if (profile & BTMG_GATT_CLIENT) {\n        btmg_cbs.btmg_gattc_cb.le_scan_cb = btcli_ble_scan_cb;\n        btmg_cbs.btmg_gattc_cb.conn_cb = btcli_ble_connection_cb;\n        btmg_cbs.btmg_gattc_cb.dis_att_cb = btcli_gattc_dis_att_cb;\n        btmg_cbs.btmg_gattc_cb.read_cb = btcli_gattc_read_cb;\n        btmg_cbs.btmg_gattc_cb.write_cb = btcli_gattc_write_cb;\n        btmg_cbs.btmg_gattc_cb.notify_indicate_cb = btcli_gattc_notify_indicate_cb;\n    }\n\n    btmg_core_init();\n    btmg_register_callback(&btmg_cbs);\n    btmg_set_profile(profile);\n    btmg_adapter_enable(true);\n    btcli_init_state = true;\n\n    if (profile & BTMG_GATT_SERVER) {\n        ble_gatt_register_service();\n        ble_advertise_on();\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_deinit(char *cmd)\n{\n    if (profile & BTMG_GATT_SERVER) {\n        ble_gatt_unregister_service();\n        btmg_le_enable_adv(false);\n        btmg_gatt_attr_destory(db);\n        db  = NULL;\n    }\n    btmg_adapter_enable(false);\n    btmg_core_deinit();\n    btmg_unregister_callback();\n    btcli_init_state = false;\n\n    if (discovered_devices != NULL) {\n        btmg_dev_list_free(discovered_devices);\n        discovered_devices = NULL;\n    }\n\n    return CMD_STATUS_OK;\n}\n\ntatic enum cmd_status btcli_sink_help(char *cmd);\n\nvoid btcli_a2dp_sink_connection_state_cb(const char *bd_addr,\n                                         btmg_a2dp_sink_connection_state_t state)\n{\n    if (state == BTMG_A2DP_SINK_DISCONNECTED) {\n        CMD_DBG("A2DP sink disconnected with device: %s\\n", bd_addr);\n        btmg_adapter_set_scanmode(BTMG_SCAN_MODE_CONNECTABLE_DISCOVERABLE);\n    } else if (state == BTMG_A2DP_SINK_CONNECTING) {\n        CMD_DBG("A2DP sink connecting with device: %s\\n", bd_addr);\n    } else if (state == BTMG_A2DP_SINK_CONNECTED) {\n        CMD_DBG("A2DP sink connected with device: %s\\n", bd_addr);\n    } else if (state == BTMG_A2DP_SINK_DISCONNECTING) {\n        CMD_DBG("A2DP sink disconnecting with device: %s\\n", bd_addr);\n    }\n}\n\nvoid btcli_a2dp_sink_audio_state_cb(const char *bd_addr, btmg_a2dp_sink_audio_state_t state)\n{\n    if (state == BTMG_A2DP_SINK_AUDIO_SUSPENDED) {\n        CMD_DBG("A2DP sink audio suspended with device: %s\\n", bd_addr);\n    } else if (state == BTMG_A2DP_SINK_AUDIO_STOPPED) {\n        CMD_DBG("A2DP sink audio stopped with device: %s\\n", bd_addr);\n    } else if (state == BTMG_A2DP_SINK_AUDIO_STARTED) {\n        CMD_DBG("A2DP sink audio started with device: %s\\n", bd_addr);\n    }\n}\n\n/* btcli a2dp_snk connect <device mac> */\nenum cmd_status btcli_sink_connect(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_a2dp_sink_connect(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli a2dp_snk disconnect <device mac> */\nenum cmd_status btcli_sink_disconnect(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_a2dp_sink_disconnect(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\nstatic const struct cmd_data a2dp_sink_cmds[] = {\n    { "connect",    btcli_sink_connect,    CMD_DESC("<device mac>")},\n    { "disconnect", btcli_sink_disconnect, CMD_DESC("<device mac>")},\n    { "help",       btcli_sink_help,       CMD_DESC(CMD_HELP_DESC) },\n};\n\n/* btcli a2dp_snk help */\nstatic enum cmd_status btcli_sink_help(char *cmd)\n{\n    return cmd_help_exec(a2dp_sink_cmds, cmd_nitems(a2dp_sink_cmds), 10);\n}\n\nenum cmd_status btcli_a2dp_sink(char *cmd)\n{\n    return cmd_exec(cmd, a2dp_sink_cmds, cmd_nitems(a2dp_sink_cmds));\n}\n'})}),"\n",(0,_.jsx)(e.h5,{id:"\u521d\u59cb\u5316",children:"\u521d\u59cb\u5316"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u603b\u56de\u8c03\u7ed3\u6784\u4f53\u662f btmg_callback_t\uff0c\u5148\u8bbe\u7f6e a2dp sink \u76f8\u5173\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_core_init \u521d\u59cb\u5316 btmanager;"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_register_callback \u6ce8\u518c\u6b65\u9aa4 1 \u8bbe\u7f6e\u597d\u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_set_profile(BTMG_A2DP_SINK) \u4f7f\u80fd\u84dd\u7259 Profile\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_adapter_enable(true) \u4f7f\u80fd\u84dd\u7259"}),"\n",(0,_.jsx)(e.li,{children:"\u84dd\u7259\u4f7f\u80fd\u6210\u529f\u540e\u89e6\u53d1 state_cb\uff0c\u53c2\u8003 btcli_adapter_status_cb\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_name\uff0c\u8bbe\u7f6e\u84dd\u7259\u540d\u79f0\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_io_capability\uff0c\u8bbe\u7f6e io_capability \u80fd\u529b\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_scanmode\uff0c\u8bbe\u7f6e\u53d1\u73b0\u6a21\u5f0f\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u97f3\u4e50\u64ad\u653e\u63a7\u5236",children:"\u97f3\u4e50\u64ad\u653e\u63a7\u5236"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u84dd\u7259\u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u624b\u673a\u53ef\u4ee5\u641c\u7d22\u548c\u8fde\u63a5\uff0c\u8fde\u63a5\u6210\u529f\u7684\u56de\u8c03\u662f conn_state_cb\uff0c\u53c2\u8003btcli_a2dp_sink_connection_state_cb\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u64ad\u653e\u72b6\u6001\uff0c\u6b4c\u66f2\u8fdb\u5ea6\uff0c\u6b4c\u66f2\u4fe1\u606f\u901a\u8fc7 btmg_avrcp_cb \u7684 avrcp_play_state_cb/avrcp_play_position_cb/avrcp_track_changed_cb \u56de\u8c03\u83b7\u5f97\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u83b7\u53d6/\u8bbe\u7f6e\u97f3\u91cf\uff0cAPI \u8c03\u7528\u53c2\u8003 btcli_get_absolute_volume/btcli_set_absolute_volume;"}),"\n",(0,_.jsx)(e.li,{children:"\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u8c03\u7528 btmg_a2dp_sink_disconnect \u5b9e\u73b0\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"bt_manager \u9ed8\u8ba4\u6ca1\u6709\u96c6\u6210\u84dd\u7259\u56de\u8fde\u7684\u529f\u80fd\uff0c\u7528\u6237\u53ef\u4ee5\u57fa\u4e8e btmg_a2dp_sink_connect \u63a5\u53e3\u8fdb\u884c\u529f\u80fd\u5b9e\u73b0\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u97f3\u9891\u6570\u636e\u7684\u5904\u7406\u9ed8\u8ba4\u5728 bt_manager \u5185\u90e8\u5904\u7406\u64ad\u653e\uff0c\u7528\u6237\u5982\u679c\u9700\u8981\u76f4\u63a5\u83b7\u53d6\u97f3\u9891\u6570\u636e\u505a\u97f3\u6548\u7b49\u5904\u7406\uff0c\u6253\u5f00 CONFIG_A2DP_SINK_AUDIO_CB \u5b8f\u540e\uff0c\u5e94\u7528\u53ef\u4ee5\u901a\u8fc7 stream_cb \u62ff\u5230\u6570\u636e\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h3,{id:"avrcp-\u5f00\u53d1",children:"AVRCP \u5f00\u53d1"}),"\n",(0,_.jsx)(e.p,{children:"AVRCP \u5206\u4e3a AVRCP CT \u548c AVRCP TG \u4e24\u4e2a\u89d2\u8272\uff0c\u4e00\u4e2a\u8bbe\u5907\u53ef\u4ee5\u540c\u65f6\u62e5\u6709\u8be5\u4e24\u79cd\u89d2\u8272\u3002"}),"\n",(0,_.jsx)(e.p,{children:"\u4ee5\u84dd\u7259\u97f3\u7bb1\u4e3a\u4f8b:"}),"\n",(0,_.jsxs)(e.ul,{children:["\n",(0,_.jsx)(e.li,{children:"\u624b\u673a\u8fde\u63a5\u97f3\u7bb1\u64ad\u653e\u97f3\u4e50\uff0c\u97f3\u7bb1\u7aef\u53ef\u4ee5\u901a\u8fc7 AVRCP \u63a7\u5236\u624b\u673a\u4e0a\u4e0b\u66f2\u63a7\u5236\u7b49\uff0c\u6b64\u65f6\u624b\u673a\u4f5c\u4e3a\u88ab\u63a7\u5236\u65b9\uff0c\u662f AVRCP TG\uff0c\u97f3\u7bb1\u662f\u63a7\u5236\u65b9\uff0c\u662f AVRCP CT\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u624b\u673a\u548c\u97f3\u7bb1\u90fd\u652f\u6301\u7edd\u5bf9\u97f3\u91cf\uff0c\u624b\u673a\u7aef\u53ef\u4ee5\u901a\u8fc7 AVRCP \u8bbe\u7f6e\u97f3\u7bb1\u97f3\u91cf\uff0c\u5e76\u901a\u8fc7 RegisterNotification \u6ce8\u518c\u97f3\u91cf\u53d8\u5316\u7684\u901a\u77e5\u4e8b\u4ef6\uff0c\u97f3\u7bb1\u97f3\u91cf\u53d8\u5316\u540e\uff0c\u624b\u673a\u4f1a\u6536\u5230\u97f3\u7bb1\u7684 RegisterNotification response \u901a\u77e5\u3002\u8fd9\u79cd\u60c5\u51b5\u624b\u673a\u4f5c\u4e3a AVRCP CT\uff0c\u97f3\u7bb1\u4f5c\u4e3a AVRCP TG\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h4,{id:"avrcp-ct-api",children:"AVRCP CT API"}),"\n",(0,_.jsxs)(e.table,{children:[(0,_.jsx)(e.thead,{children:(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"API \u63a5\u53e3"}),(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"\u8bf4\u660e"})]})}),(0,_.jsxs)(e.tbody,{children:[(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_avrc_ct_send_passthrough_cmd"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u9001\u547d\u4ee4\u63a7\u5236 AVRCP TG"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_avrc_set_absolute_volume"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u9001\u547d\u4ee4\u8bbe\u7f6e AVRCP TG \u7684\u97f3\u91cf"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_avrc_get_absolute_volume"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u9001\u547d\u4ee4\u83b7\u53d6\u97f3\u91cf"})]})]})]}),"\n",(0,_.jsx)(e.h4,{id:"avrcp-tg-api",children:"AVRCP TG API"}),"\n",(0,_.jsxs)(e.table,{children:[(0,_.jsx)(e.thead,{children:(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"API \u63a5\u53e3"}),(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"\u8bf4\u660e"})]})}),(0,_.jsxs)(e.tbody,{children:[(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_avrc_set_absolute_volume"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u6b64\u63a5\u53e3\u540c\u6837\u9002\u7528 AVRCP TG\uff0c\u5185\u90e8\u8bbe\u7f6e\u597d\u672c\u5730\u97f3\u91cf\u53d8\u5316\u540e\uff0c\u4e5f\u4f1a\u901a\u77e5 AVRCP CT"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_avrc_get_absolute_volume"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u9001\u547d\u4ee4\u83b7\u53d6\u97f3\u91cf"})]})]})]}),"\n",(0,_.jsx)(e.p,{children:"AVRCP TG \u76ee\u524d\u53ea\u6709 1 \u4e2a API\uff0c\u5176\u91cd\u70b9\u662f\u56de\u8c03\u51fd\u6570\uff0c\u6709\u5982\u4e0b callback \u4f7f\u7528\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"typedef struct {\n    bt_avrcp_ct_play_state_cb avrcp_ct_play_state_cb; //ct\u64ad\u653e\u72b6\u6001\n    bt_avrcp_ct_track_changed_cb avrcp_ct_track_changed_cb; //\u6b4c\u66f2\u4fe1\u606f&\u6b4c\u8bcd\u4fe1\u606f\n    bt_avrcp_ct_play_position_cb avrcp_ct_play_position_cb; //\u64ad\u653e\u8fdb\u5ea6\u6761\u4fe1\u606f\n    bt_avrcp_tg_play_state_cb avrcp_tg_play_state_cb; //tg\u64ad\u653e\u72b6\u6001\n    bt_avrcp_audio_volume_cb avrcp_audio_volume_cb; //\u97f3\u91cf\u5927\u5c0f\n} btmg_avrcp_callback_t;\n"})}),"\n",(0,_.jsx)(e.h3,{id:"a2dp-source-\u5f00\u53d1",children:"A2DP Source \u5f00\u53d1"}),"\n",(0,_.jsx)(e.p,{children:"A2DP Source \u8bbe\u5907\u4e00\u822c\u652f\u6301\u97f3\u4e50\u64ad\u653e\u529f\u80fd\uff0c\u4f8b\u5982\u626b\u8bfb\u7b14\u3001\u5b66\u4e60\u673a\u7b49\u4ea7\u54c1\u3002\u6b64\u7c7b\u4ea7\u54c1\u6709\u8fde\u63a5\u84dd\u7259\u8033\u673a/\u84dd\u7259\u97f3\u7bb1\u7b49 A2DP Sink \u8bbe\u5907\u9700\u6c42\u3002"}),"\n",(0,_.jsx)(e.h4,{id:"a2dp-source-api",children:"A2DP Source API"}),"\n",(0,_.jsxs)(e.table,{children:[(0,_.jsx)(e.thead,{children:(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"API \u63a5\u53e3"}),(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"\u8bf4\u660e"})]})}),(0,_.jsxs)(e.tbody,{children:[(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_a2dp_source_connect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8fde\u63a5\u6307\u5b9a A2DP Sink \u8bbe\u5907"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_a2dp_source_disconnect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u65ad\u5f00\u4e0e\u6307\u5b9a\u8bbe\u5907\u7684\u8fde\u63a5"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_a2dp_source_set_audio_param"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e\u9700\u8981\u64ad\u653e\u7684\u97f3\u9891\u6d41\u7684\u53c2\u6570\uff1a\u901a\u9053\u6570\u4e0e\u91c7\u6837\u7387\uff0c\u4ee5\u4fbf btmanager \u5bf9\u97f3\u9891\u8fdb\u884c\u5904\u7406"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_a2dp_source_send_data"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5e94\u7528\u5c42\u53d1\u9001\u97f3\u9891\u6d41\u6570\u636e\u7ed9 btmanager"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_a2dp_source_play_start"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5f00\u59cb\u5904\u7406\u97f3\u9891\u6570\u636e\uff0c\u5efa\u8bae\u5728btmg_a2dp_source_send_data \u4e4b\u524d\u8fd0\u884c"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_a2dp_source_play_stop"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u505c\u6b62\u5904\u7406\u97f3\u9891\u6570\u636e\uff0c\u53c2\u6570\u4e3a true \u65f6\u8868\u793a\u7acb\u5373\u505c\u6b62\uff0c\u4e22\u5f03\u7f13\u5b58\u4e2d\u7684\u6570\u636e\uff0c\u53cd\u4e4b\u4fdd\u7559"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_a2dp_source_is_ready"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u521d\u59cb\u5316\u5c31\u7eea"})]})]})]}),"\n",(0,_.jsx)(e.h4,{id:"a2dp-source-api-\u8c03\u7528\u6d41\u7a0b",children:"A2DP source API \u8c03\u7528\u6d41\u7a0b"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:'#include "cmd_util.h"\n#include <stdio.h>\n#include <stdlib.h>\n#include <getopt.h>\n\n#include "btmg_dev_list.h"\n#include "bt_manager.h"\n\nbtmg_callback_t btmg_cbs;\ndev_list_t *discovered_devices = NULL;\n\n#ifdef CONFIG_BT_A2DP_ENABLE\nextern void btcli_a2dp_source_connection_state_cb(const char *bd_addr,\n                                                  btmg_a2dp_source_connection_state_t state);\nextern void btcli_a2dp_source_audio_state_cb(const char *bd_addr,\n                                             btmg_a2dp_source_audio_state_t state);\nextern void btcli_a2dp_sink_connection_state_cb(const char *bd_addr,\n                                                btmg_a2dp_sink_connection_state_t state);\nextern void btcli_a2dp_sink_audio_state_cb(const char *bd_addr, btmg_a2dp_sink_audio_state_t state);\nextern void btcli_avrcp_ct_play_state_cb(const char *bd_addr, btmg_avrcp_play_state_t state);\nextern void btcli_avrcp_ct_track_changed_cb(const char *bd_addr, btmg_track_info_t *track_info);\nextern void btcli_avrcp_ct_play_position_cb(const char *bd_addr, int song_len, int song_pos);\nextern void btcli_avrcp_audio_volume_cb(const char *bd_addr, unsigned int volume);\nextern void btcli_avrcp_tg_play_state_cb(const char *bd_addr, btmg_avrcp_play_state_t state);\n#endif\n#ifdef CONFIG_BT_SPP_ENABLED\nextern void btcli_sppc_conn_status_cb(const char *bd_addr, btmg_spp_connection_state_t status);\nextern void btcli_sppc_recvdata_cb(const char *bd_addr, char *data, int data_len);\nextern void btcli_spps_conn_status_cb(const char *bd_addr, btmg_spp_connection_state_t status);\nextern void btcli_spps_recvdata_cb(const char *bd_addr, char *data, int data_len);\n#endif\n#ifdef CONFIG_BT_HFP_CLIENT_ENABLE\nextern void btcli_hfp_hf_event_cb(btmg_hfp_hf_event_t event, void *data);\nextern void btcli_hfp_hf_connection_state_cb(const char *bd_addr,\n                                             btmg_hfp_hf_connection_state_t state);\n#endif\n#ifdef CONFIG_BT_HFP_AG_ENABLE\nextern void btcli_hfp_ag_event_cb(btmg_hfp_ag_event_t event, void *data);\nextern void btcli_hfp_ag_connection_state_cb(const char *bd_addr,\n                                             btmg_hfp_ag_connection_state_t state);\nextern void btcli_hfp_ag_audio_incoming_cb(const uint8_t *buf, uint32_t sz);\nextern uint32_t btcli_hfp_ag_audio_outgoing_cb(uint8_t *p_buf, uint32_t sz);\n#endif\nextern void btcli_ble_scan_cb(le_scan_cb_para_t *data);\nextern void btcli_ble_connection_cb(le_connection_para_t *data);\nextern void btcli_gattc_dis_att_cb(gattc_dis_cb_para_t *data);\nextern void btcli_gattc_notify_indicate_cb(gattc_notify_indicate_cb_para_t *data);\nextern void btcli_gatts_get_db_cb(gatts_get_db_t *data);\nextern void btcli_gatts_char_read_req_cb(gatts_char_read_req_t *data);\nextern void btcli_gatts_char_write_req_cb(gatts_char_write_req_t *data);\nextern void btcli_gatts_ccc_cfg_cb(gatts_ccc_cfg_t *data);\nextern void btcli_gattc_read_cb(gattc_read_cb_para_t *data);\nextern void btcli_gattc_write_cb(gattc_write_cb_para_t *data);\n\n#define AUTH_IDLE            0\n#define AUTH_PIN_CODE        1\n#define AUTH_ENTER_PASSKEY   2\n#define AUTH_PASSKEY_CONFIRM 3\n#define AUTH_PAIRING_CONFIRM 4\n\ntypedef struct {\n    char addr[18];\n    uint32_t passkey;\n    uint8_t flag; //0:none 1:pin code 2:enter passkey 3:passkey_confirm 4: pairing confirm\n} pair_req_t;\n\nstatic btmg_gatt_db_t *db;\nstatic int ble_gatt_register_service(void)\n{\n    if (db != NULL) {\n        CMD_ERR("gatt already registered\\n");\n        return 0;\n    }\n\n    btmg_uuid_t uuid;\n    btmg_gatt_properties_t prop;\n    btmg_gatt_permission_t perm = BTMG_GATT_PERM_READ | BTMG_GATT_PERM_WRITE;\n\n    /* service1 start, uuid=0xABCD */\n    db = btmg_gatt_attr_create(12); //CHAR+2 other+1\n    uuid.type = BTMG_UUID_16;\n    uuid.value.u16 = 0xABCD;\n    btmg_gatt_attr_primary_service(db, uuid); // +1\n\n    uuid.value.u16 = 0xfff2;\n    prop = BTMG_GATT_CHRC_READ | BTMG_GATT_CHRC_WRITE;\n    btmg_gatt_attr_characteristic(db, uuid, prop, perm); // +2\n\n    uuid.value.u16 = 0xfff3;\n    prop = BTMG_GATT_CHRC_READ | BTMG_GATT_CHRC_WRITE | BTMG_GATT_CHRC_NOTIFY | BTMG_GATT_CHRC_INDICATE;\n    btmg_gatt_attr_characteristic(db, uuid, prop, perm); // +2\n    btmg_gatt_attr_ccc(db, perm);                        // +1\n    /* service1 end*/\n    /* service2 start, uuid=0x7788 */\n    uuid.type = BTMG_UUID_16;\n    uuid.value.u16 = 0x7788;\n    btmg_gatt_attr_primary_service(db, uuid); // +1\n\n    uuid.value.u16 = 0x1122;\n    prop = BTMG_GATT_CHRC_READ;\n    btmg_gatt_attr_characteristic(db, uuid, prop, perm); // +2\n\n    uuid.value.u16 = 0x3344;\n    prop = BTMG_GATT_CHRC_READ | BTMG_GATT_CHRC_WRITE | BTMG_GATT_CHRC_NOTIFY;\n    btmg_gatt_attr_characteristic(db, uuid, prop, perm); // +2\n    btmg_gatt_attr_ccc(db, perm);                        // +1\n    /* service2 end*/\n\n    btmg_gatt_register_service(db);\n\n    return CMD_STATUS_OK;\n}\n\nstatic int ble_gatt_unregister_service(void)\n{\n    if (db == NULL) {\n        CMD_ERR("gatt already unregistered\\n");\n        return 0;\n    }\n\n    btmg_gatt_unregister_service(db);\n\n    return CMD_STATUS_OK;\n}\n\nstatic int ble_set_adv_data(void)\n{\n    int index = 0;\n    uint16_t uuid = 0x1234;\n    char ble_name[] = "aw-btcli-ble";\n\n    btmg_adv_scan_rsp_data_t adv_data;\n\n    adv_data.data[index] = 0x02; /* flag len */\n    adv_data.data[index + 1] = 0x01; /* type for flag */\n    adv_data.data[index + 2] = 0x1A; //0x05\n\n    index += adv_data.data[index] + 1;\n\n    adv_data.data[index] = strlen(ble_name) + 1; /* name len */\n    adv_data.data[index + 1] = 0x09; /* type for local name */\n    int name_len;\n    name_len = strlen(ble_name);\n    strcpy(&(adv_data.data[index + 2]), ble_name);\n    index += adv_data.data[index] + 1;\n\n    adv_data.data[index] = 0x03; /* uuid len */\n    adv_data.data[index + 1] = 0x03; /* type for complete list of 16-bit uuid */\n    adv_data.data[index + 2] = (char)(uuid & 0xFF);\n    adv_data.data[index + 3] = (char)((uuid >> 8) & 0xFF);\n    index += adv_data.data[index] + 1;\n\n    adv_data.data_len = index;\n\n    return btmg_le_set_adv_scan_rsp_data(&adv_data, NULL);\n}\n\nstatic int ble_advertise_on(void)\n{\n    btmg_le_adv_param_t adv_param;\n\n    adv_param.interval_min = 0x0020;\n    adv_param.interval_max = 0x01E0;\n    adv_param.adv_type = BTMG_LE_ADV_IND;\n\n    btmg_le_set_adv_param(&adv_param);\n    ble_set_adv_data();\n    return btmg_le_enable_adv(true);\n}\n\nstatic pair_req_t pair_req = { { 0 }, 0, 0 };\n\nvoid btcli_scan_status_cb(btmg_scan_state_t status)\n{\n    if (status == BTMG_SCAN_STARTED) {\n        CMD_DBG("start scanning\\n");\n    } else if (status == BTMG_SCAN_STOPPED) {\n        CMD_DBG("stop scanning\\n");\n    }\n}\n\nvoid btcli_scan_dev_add_cb(btmg_device_t *device)\n{\n    dev_node_t *dev_node = NULL;\n\n    CMD_DBG("name:[%s]\\t\\taddress:[%s]\\t\\tclass:[%d]\\t\\trssi:[%d]\\n", device->name, device->address,\n            device->cod, device->rssi);\n\n    dev_node = btmg_dev_list_find_device(discovered_devices, device->address);\n    if (dev_node != NULL) {\n        return;\n    }\n\n    btmg_dev_list_add_device(discovered_devices, device->name, device->address, 0);\n}\n\nvoid btcli_adapter_name_cb(char *name)\n{\n    CMD_DBG("btcli get adapter name:%s\\n", name);\n}\n\nvoid btcli_device_name_cb(char *name)\n{\n    CMD_DBG("btcli get remote device name:%s\\n", name);\n}\n\nvoid btcli_bonded_device_cb(btmg_bond_state_t state, const char *bd_addr)\n{\n    dev_node_t *dev_discovered_node = NULL;\n\n    CMD_DBG("bonded device state:%d, addr:%s\\n", state, bd_addr);\n\n    dev_discovered_node = btmg_dev_list_find_device(discovered_devices, bd_addr);\n    if (state == BTMG_BOND_STATE_BONDED) {\n        if (dev_discovered_node != NULL) {\n            btmg_dev_list_remove_device(discovered_devices, bd_addr);\n        }\n        CMD_DBG("Pairing state for %s is BONDED \\n", bd_addr);\n    } else if (state == BTMG_BOND_STATE_BOND_FAILED) {\n        CMD_DBG("Pairing state for %s is BOND_FAILED \\n", bd_addr);\n    }\n}\n\nvoid btcli_device_pindcoe_request_cb(const char *addr)\n{\n    CMD_DBG("dev:%s,pindcoe request, Please enter pincode\\n", addr);\n    memcpy(pair_req.addr, addr, sizeof(pair_req.addr));\n    pair_req.flag = AUTH_PIN_CODE;\n}\n\nvoid btcli_device_passkey_request_cb(const char *addr)\n{\n    CMD_DBG("dev:%s,passkey_request, Please enter passkey!\\n", addr);\n    memcpy(pair_req.addr, addr, sizeof(pair_req.addr));\n    pair_req.flag = AUTH_ENTER_PASSKEY;\n}\n\nvoid btcli_device_passkey_confirm_cb(const char *addr, uint32_t passkey)\n{\n    CMD_DBG("please confirm the passkey(%d) sent by the %s device!\\n", passkey, addr);\n    memcpy(pair_req.addr, addr, sizeof(pair_req.addr));\n    pair_req.passkey = passkey;\n    pair_req.flag = AUTH_PASSKEY_CONFIRM;\n}\n\nvoid btcli_device_pairing_confirm_cb(const char *addr, uint32_t passkey)\n{\n    CMD_DBG("dev:%s,pairing_confirm,please compare the passkey numeric value: %d\\n", addr, passkey);\n    memcpy(pair_req.addr, addr, sizeof(pair_req.addr));\n    pair_req.passkey = passkey;\n    pair_req.flag = AUTH_PAIRING_CONFIRM;\n}\n\nvoid btcli_adapter_status_cb(btmg_adapter_state_t status)\n{\n    char bt_addr[18] = { 0 };\n    char bt_name_buf[64] = { 0 };\n    char bt_name[64] = { 0 };\n\n    if (status == BTMG_ADAPTER_OFF) {\n        CMD_DBG("BT is off\\n");\n    } else if (status == BTMG_ADAPTER_ON) {\n        CMD_DBG("BT is on\\n");\n        btmg_adapter_get_address(bt_addr);\n        if (bt_addr[0] != \'\\0\') {\n            snprintf(bt_name_buf, 12, "aw-btcli-%s-", (char *)(bt_addr + 12));\n            sprintf(bt_name, "%s-%s", bt_name_buf, (char *)(bt_addr + 15));\n            btmg_adapter_set_name(bt_name);\n        } else {\n            btmg_adapter_set_name("aw-btcli");\n        }\n        btmg_adapter_set_io_capability(BTMG_IO_CAP_NOINPUTNOOUTPUT);\n        btmg_adapter_set_scanmode(BTMG_SCAN_MODE_CONNECTABLE_DISCOVERABLE);\n    } else if (status == BTMG_ADAPTER_TURNING_ON) {\n        CMD_DBG("BT is turnning on\\n");\n    } else if (status == BTMG_ADAPTER_TURNING_OFF) {\n        CMD_DBG("BT is turnning off\\n");\n    }\n}\n\n/* btcli pincode <0000~9999> */\nenum cmd_status btcli_pincode(char *cmd)\n{\n    if (pair_req.flag != AUTH_PIN_CODE) {\n        CMD_ERR("No need to enter pin code now\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argv[0]);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_device_pincode_reply(argv[0]);\n    pair_req.flag = AUTH_IDLE;\n\n    return CMD_STATUS_OK;\n}\n\n#if (BT_SSP_INCLUDED == TRUE)\n/* btcli passkey <000000~999999> */\nenum cmd_status btcli_passkey(char *cmd)\n{\n    if (pair_req.flag != AUTH_ENTER_PASSKEY) {\n        CMD_ERR("No need to enter passkey now\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    uint32_t passkey = 0;\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n    passkey = atoi(argv[0]);\n    if (passkey > 999999) {\n        CMD_ERR("Passkey should be between 0-999999");\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_device_passkey_reply(passkey);\n    pair_req.flag = AUTH_IDLE;\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli passkey_confirm */\nenum cmd_status btcli_passkey_confirm(char *cmd)\n{\n    if (pair_req.flag != AUTH_PASSKEY_CONFIRM) {\n        CMD_ERR("No need to enter this command now\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    btmg_device_passkey_confirm(pair_req.passkey);\n    pair_req.flag = AUTH_IDLE;\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli pairing_confirm */\nenum cmd_status btcli_pairing_confirm(char *cmd)\n{\n    if (pair_req.flag != AUTH_PAIRING_CONFIRM) {\n        CMD_ERR("No need to need to enter this command now\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    btmg_device_pairing_confirm();\n    pair_req.flag = AUTH_IDLE;\n\n    return CMD_STATUS_OK;\n}\n#endif\n\n/* btcli scan_list */\nenum cmd_status btcli_scan_list(char *cmd)\n{\n    dev_node_t *dev_node = NULL;\n\n    if (discovered_devices == NULL) {\n        CMD_WRN("scan list is empty\\n");\n        return CMD_STATUS_OK;\n    }\n\n    dev_node = discovered_devices->head;\n    while (dev_node != NULL) {\n        CMD_DBG("addr: %s, name: %s\\n", dev_node->dev_addr, dev_node->dev_name);\n        dev_node = dev_node->next;\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli paired_list */\nenum cmd_status btcli_paired_list(char *cmd)\n{\n    int device_num = -1;\n    btmg_err ret;\n\n    btmg_get_paired_device_num(&device_num);\n    if (device_num <= 0) {\n        CMD_DBG("no device is bonded!\\n");\n        return CMD_STATUS_OK;\n    }\n\n    btmg_paired_device_t paired_list[device_num];\n\n    if ((ret = btmg_get_paired_devices(device_num, paired_list)) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n\n    CMD_DBG("get paired device_list:\\n");\n    for (int i = 0; i < device_num; i++) {\n        CMD_DBG("device[%s]\\n", paired_list[i].address);\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli scan_mode <0~2> */\nenum cmd_status btcli_set_scanmode(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    int mode;\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n    mode = cmd_atoi(argv[0]);\n\n    btmg_adapter_set_scanmode(mode);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli scan <on/off> */\nenum cmd_status btcli_scan(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, cmd_nitems(argv));\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if (!strcmp(argv[0], "on")) {\n        if (discovered_devices != NULL) {\n            btmg_dev_list_free(discovered_devices);\n            discovered_devices = NULL;\n        }\n        discovered_devices = btmg_dev_list_new();\n        if (discovered_devices == NULL)\n            return CMD_STATUS_FAIL;\n        btmg_adapter_start_scan();\n    } else if (!strcmp(argv[0], "off")) {\n        btmg_adapter_stop_scan();\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli io_cap <0~4> */\nenum cmd_status btcli_set_io_cap(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    int io_cap;\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n    io_cap = cmd_atoi(argv[0]);\n\n    btmg_adapter_set_io_capability(io_cap);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli get_dev_name */\nenum cmd_status btcli_get_device_name(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_device_get_name(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli get_name */\nenum cmd_status btcli_get_adapter_name(char *cmd)\n{\n    btmg_adapter_get_name();\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli set_name <name> */\nenum cmd_status btcli_set_adapter_name(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_adapter_set_name(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli get_mac */\nenum cmd_status btcli_get_adapter_mac(char *cmd)\n{\n    char mac[18] = { 0 };\n\n    btmg_adapter_get_address(mac);\n    CMD_DBG("adapter mac is:%s", mac);\n\n    return CMD_STATUS_OK;\n}\n\nstatic bool btcli_init_state = false;\nstatic int profile = 0;\n\n/* btcli init or btcli init -p a2dp-source -d 4 */\nenum cmd_status btcli_init(char *cmd)\n{\n    int i = 0;\n    int argc;\n    char *argv[10];\n\n    btmg_log_level_t debug;\n\n    argc = cmd_parse_argv(cmd, argv, cmd_nitems(argv));\n\n    for (i = 0; i < argc; i++) {\n        if (strcmp(argv[i], "-h") == 0) {\n            CMD_DBG("Usage:\\n"\n                   "  [OPTION]...\\n"\n                   "\\nOptions:\\n"\n                   "  -h, --help\\t\\tprint this help and exit\\n"\n                   "  -d, --debug\\t open debug :-d [0~5]\\n"\n                   "  -p, --profile=NAME\\tenable bluetooth profile\\n"\n                   "  [supported profile name]:\\n"\n                   "  - a2dp-source\\tAdvanced Audio Source\\n"\n                   "  - a2dp-sink\\tAdvanced Audio Sink\\n"\n                   "  - hfp-hf\\tHands-Free\\n"\n                   "  - spp-server\\tSerial Port Profile-Server role\\n"\n                   "  - spp-client\\tSerial Port Profile-Client role\\n"\n                   "  - gatt-server\\tble gatt server\\n"\n                   "  - gatt-client\\tble gatt client\\n");\n            return CMD_STATUS_OK;\n        }\n\n        if (strcmp(argv[i], "-p") == 0) {\n            if (i + 1 < argc) {\n                int c;\n                struct {\n                    const char *name;\n                    int value;\n                } map[] = {\n                    { "a2dp-sink",      BTMG_A2DP_SINK },\n                    { "a2dp-source",    BTMG_A2DP_SOURCE },\n                    { "hfp-hf",         BTMG_HFP_HF},\n                    { "hfp-ag",         BTMG_HFP_AG},\n                    { "spp-server",     BTMG_SPP_SERVER },\n                    { "spp-client",     BTMG_SPP_CLIENT },\n                    { "gatt-server",    BTMG_GATT_SERVER },\n                    { "gatt-client",    BTMG_GATT_CLIENT},\n                };\n\n                for (c = 0; c < ARRAY_SIZE(map); c++) {\n                    if (strcasecmp(argv[i+1], map[c].name) == 0) {\n                        profile |= map[c].value;\n                        break;\n                    }\n                }\n                if (c == ARRAY_SIZE(map)) {\n                    CMD_ERR("Invalid BT profile name: %s\\n", argv[i+1]);\n                }\n            }else {\n                CMD_ERR("invalid parameter, please specify a profile\\n");\n                break;\n            }\n        }\n\n        if (strcmp(argv[i], "-d") == 0) {\n            if (i + 1 < argc) {\n                debug = (btmg_log_level_t)atoi(argv[i+1]);\n                CMD_DBG("debug loglevel :%d\\n", (int)debug);\n                btmg_set_loglevel(debug);\n            } else {\n                CMD_ERR("invalid parameter, please specify a level\\n");\n                break;\n            }\n        }\n    }\n    if (btcli_init_state) {\n        CMD_WRN("BT is already INIT!\\n");\n        return CMD_STATUS_OK;\n    }\n\n    if (profile == 0) {\n        CMD_DBG("use default profile\\n");\n        profile |= BTMG_A2DP_SINK;\n    }\n\n    btmg_cbs.btmg_adapter_cb.state_cb = btcli_adapter_status_cb;\n    btmg_cbs.btmg_adapter_cb.scan_status_cb = btcli_scan_status_cb;\n    btmg_cbs.btmg_device_cb.device_add_cb = btcli_scan_dev_add_cb;\n    btmg_cbs.btmg_adapter_cb.bonded_device_cb = btcli_bonded_device_cb;\n    btmg_cbs.btmg_adapter_cb.get_name_cb = btcli_adapter_name_cb;\n    btmg_cbs.btmg_device_cb.pindcoe_request_cb = btcli_device_pindcoe_request_cb;\n    btmg_cbs.btmg_device_cb.passkey_request_cb = btcli_device_passkey_request_cb;\n    btmg_cbs.btmg_device_cb.passkey_confirm_cb = btcli_device_passkey_confirm_cb;\n    btmg_cbs.btmg_device_cb.pairing_confirm_cb = btcli_device_pairing_confirm_cb;\n#ifdef CONFIG_BT_A2DP_ENABLE\n    if (profile & BTMG_A2DP_SINK) {\n        btmg_cbs.btmg_a2dp_sink_cb.conn_state_cb = btcli_a2dp_sink_connection_state_cb;\n        btmg_cbs.btmg_a2dp_sink_cb.audio_state_cb = btcli_a2dp_sink_audio_state_cb;\n    }\n    if (profile & BTMG_A2DP_SOURCE) {\n        btmg_cbs.btmg_a2dp_source_cb.conn_state_cb = btcli_a2dp_source_connection_state_cb;\n        btmg_cbs.btmg_a2dp_source_cb.audio_state_cb = btcli_a2dp_source_audio_state_cb;\n    }\n    btmg_cbs.btmg_avrcp_cb.avrcp_ct_play_state_cb = btcli_avrcp_ct_play_state_cb;\n    btmg_cbs.btmg_avrcp_cb.avrcp_ct_play_position_cb = btcli_avrcp_ct_play_position_cb;\n    btmg_cbs.btmg_avrcp_cb.avrcp_ct_track_changed_cb = btcli_avrcp_ct_track_changed_cb;\n    btmg_cbs.btmg_avrcp_cb.avrcp_tg_play_state_cb = btcli_avrcp_tg_play_state_cb;\n    btmg_cbs.btmg_avrcp_cb.avrcp_audio_volume_cb = btcli_avrcp_audio_volume_cb;\n#endif\n#ifdef CONFIG_BT_SPP_ENABLED\n    if (profile & BTMG_SPP_CLIENT) {\n        btmg_cbs.btmg_sppc_cb.conn_state_cb = btcli_sppc_conn_status_cb;\n        btmg_cbs.btmg_sppc_cb.recvdata_cb = btcli_sppc_recvdata_cb;\n    }\n    if (profile & BTMG_SPP_SERVER) {\n        btmg_cbs.btmg_spps_cb.conn_state_cb = btcli_spps_conn_status_cb;\n        btmg_cbs.btmg_spps_cb.recvdata_cb = btcli_spps_recvdata_cb;\n    }\n#endif\n#ifdef CONFIG_BT_HFP_CLIENT_ENABLE\n    if (profile & BTMG_HFP_HF) {\n        btmg_cbs.btmg_hfp_hf_cb.conn_state_cb = btcli_hfp_hf_connection_state_cb;\n        btmg_cbs.btmg_hfp_hf_cb.event_cb = btcli_hfp_hf_event_cb;\n    }\n#endif\n#ifdef CONFIG_BT_HFP_AG_ENABLE\n    if (profile & BTMG_HFP_AG) {\n        btmg_cbs.btmg_hfp_ag_cb.conn_state_cb = btcli_hfp_ag_connection_state_cb;\n        btmg_cbs.btmg_hfp_ag_cb.event_cb = btcli_hfp_ag_event_cb;\n        btmg_cbs.btmg_hfp_ag_cb.audio_incoming_cb = btcli_hfp_ag_audio_incoming_cb;\n        btmg_cbs.btmg_hfp_ag_cb.audio_outgoing_cb = btcli_hfp_ag_audio_outgoing_cb;\n    }\n#endif\n    if (profile & BTMG_GATT_SERVER) {\n        btmg_cbs.btmg_gatts_cb.conn_cb = btcli_ble_connection_cb;\n        btmg_cbs.btmg_gatts_cb.get_db_cb = btcli_gatts_get_db_cb;\n        btmg_cbs.btmg_gatts_cb.char_read_req_cb = btcli_gatts_char_read_req_cb;\n        btmg_cbs.btmg_gatts_cb.char_write_req_cb = btcli_gatts_char_write_req_cb;\n        btmg_cbs.btmg_gatts_cb.ccc_cfg_cb = btcli_gatts_ccc_cfg_cb;\n    }\n    if (profile & BTMG_GATT_CLIENT) {\n        btmg_cbs.btmg_gattc_cb.le_scan_cb = btcli_ble_scan_cb;\n        btmg_cbs.btmg_gattc_cb.conn_cb = btcli_ble_connection_cb;\n        btmg_cbs.btmg_gattc_cb.dis_att_cb = btcli_gattc_dis_att_cb;\n        btmg_cbs.btmg_gattc_cb.read_cb = btcli_gattc_read_cb;\n        btmg_cbs.btmg_gattc_cb.write_cb = btcli_gattc_write_cb;\n        btmg_cbs.btmg_gattc_cb.notify_indicate_cb = btcli_gattc_notify_indicate_cb;\n    }\n\n    btmg_core_init();\n    btmg_register_callback(&btmg_cbs);\n    btmg_set_profile(profile);\n    btmg_adapter_enable(true);\n    btcli_init_state = true;\n\n    if (profile & BTMG_GATT_SERVER) {\n        ble_gatt_register_service();\n        ble_advertise_on();\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_deinit(char *cmd)\n{\n    if (profile & BTMG_GATT_SERVER) {\n        ble_gatt_unregister_service();\n        btmg_le_enable_adv(false);\n        btmg_gatt_attr_destory(db);\n        db  = NULL;\n    }\n    btmg_adapter_enable(false);\n    btmg_core_deinit();\n    btmg_unregister_callback();\n    btcli_init_state = false;\n\n    if (discovered_devices != NULL) {\n        btmg_dev_list_free(discovered_devices);\n        discovered_devices = NULL;\n    }\n\n    return CMD_STATUS_OK;\n}\n\nstatic enum cmd_status btcli_source_help(char *cmd);\n\n#define A2DP_SRC_BUFF_SIZE (512)\n\nXR_OS_Thread_t a2dp_play_thread;\nint music_fd = -1;\n\ntypedef enum {\n    STOP = 0,\n    PLAY,\n    PAUSE,\n    FORWARD,\n    BACKWARD,\n} play_state_t;\n\ntypedef struct {\n    char music_path[128];\n    int number;\n} wav_musiclist_t;\n\ntypedef struct {\n    char type;\n    char parameter[128];\n} a2dp_src_thread_args_t;\n\ntypedef struct {\n    unsigned int riff_type;\n    unsigned int riff_size;\n    unsigned int wave_type;\n    unsigned int format_type;\n    unsigned int format_size;\n    unsigned short compression_code;\n    unsigned short num_channels;\n    unsigned int sample_rate;\n    unsigned int bytes_per_second;\n    unsigned short block_align;\n    unsigned short bits_per_sample;\n    unsigned int data_type;\n    unsigned int data_size;\n} wav_header_t;\n\nstatic bool a2dp_src_loop = false;\nstatic bool is_folder_play = false;\nwav_musiclist_t *musiclist = NULL;\nstatic int musiclist_number = 1;\nstatic a2dp_src_thread_args_t *thread_args = NULL;\nplay_state_t play_state;\nbool dev_connnect, music_canwrite, is_pause = true;\n\nstatic play_state_t get_play_state(void)\n{\n    return play_state;\n}\n\nstatic void set_play_state(play_state_t state)\n{\n    play_state = state;\n}\n\nvoid btcli_avrcp_tg_play_state_cb(const char *bd_addr, btmg_avrcp_play_state_t state)\n{\n    if (state == BTMG_AVRCP_PLAYSTATE_STOPPED) {\n        CMD_DBG("Receive event[STOP] from devices device: %s\\n", bd_addr);\n        set_play_state(STOP);\n    } else if (state == BTMG_AVRCP_PLAYSTATE_PLAYING) {\n        CMD_DBG("Receive event[PLAY] from devices device: %s\\n", bd_addr);\n        set_play_state(PLAY);\n    } else if (state == BTMG_AVRCP_PLAYSTATE_PAUSED) {\n        CMD_DBG("Receive event[PAUSE] from devices device: %s\\n", bd_addr);\n        set_play_state(PAUSE);\n    } else if (state == BTMG_AVRCP_PLAYSTATE_FORWARD) {\n        CMD_DBG("Receive event[FORWARD] from devices device: %s\\n", bd_addr);\n        if (!is_folder_play) {\n            CMD_WRN("need specify the folder with -p to start\\n");\n            return;\n        }\n        set_play_state(FORWARD);\n    } else if (state == BTMG_AVRCP_PLAYSTATE_BACKWARD) {\n        CMD_DBG("Receive event[BACKWARD] from devices device: %s\\n", bd_addr);\n        if (!is_folder_play) {\n            CMD_WRN("need specify the folder with -p to start\\n");\n            return;\n        }\n        set_play_state(BACKWARD);\n    }\n}\n\nstatic int open_file(char *file_path)\n{\n    return open(file_path, O_RDONLY);\n}\n\nstatic void close_file(int fd)\n{\n    close(fd);\n}\n\nstatic int traverse_musiclist(char *foldpath)\n{\n    char file_format[8] = { 0 };\n    DIR *record_dir = NULL;\n    struct dirent *de = NULL;\n    FILE *file = NULL;\n    int file_count = 0;\n\n    record_dir = opendir(foldpath);\n    if (record_dir == NULL) {\n        CMD_ERR("Path OPEN error \\n");\n        return -1;\n    }\n\n    if (musiclist != NULL) {\n        free(musiclist);\n    }\n\n    musiclist_number = 1;\n    musiclist = (wav_musiclist_t *)malloc(1 * sizeof(wav_musiclist_t));\n\n    while ((de = readdir(record_dir)) != 0) {\n        if (strcmp(de->d_name, ".") == 0 || strcmp(de->d_name, "..") == 0) {\n            continue;\n        } else if (de->d_type == 1) { /* file */\n            int filelen = strlen(de->d_name);\n            memset(file_format, \'\\0\', sizeof(file_format));\n            strncpy(file_format, de->d_name + filelen - 3, 3); /* \u8bb0\u5f55\u6587\u4ef6\u683c\u5f0f */\n            if (!strcmp("wav", file_format)) {\n                wav_musiclist_t *ml = &musiclist[musiclist_number - 1];\n                if (foldpath[strlen(foldpath) - 1] != \'/\')\n                    sprintf(ml->music_path, "%s/%s", foldpath, de->d_name);\n                else\n                    sprintf(ml->music_path, "%s%s", foldpath, de->d_name);\n\n                ml->number = musiclist_number;\n                musiclist_number++;\n                CMD_DBG("find path:%s\\n", ml->music_path);\n\n                wav_musiclist_t *new_musiclist;\n                new_musiclist = (wav_musiclist_t *)realloc(\n                        musiclist, musiclist_number * sizeof(wav_musiclist_t));\n                if (new_musiclist == NULL) {\n                    CMD_ERR("realloc fail\\n");\n                    free(musiclist);\n                    musiclist = NULL;\n                    return -1;\n                } else {\n                    musiclist = new_musiclist;\n                }\n            }\n        }\n    }\n\n    closedir(record_dir);\n    return 0;\n}\n\nstatic void btcli_a2dp_src_thread(void *arg)\n{\n    int ret = -1;\n    int send_len = -1;\n    int path_length = 0;\n    wav_header_t wav_header;\n    static int wav_number = 0;\n    char buffer[A2DP_SRC_BUFF_SIZE] = { 0 };\n    char muisc_path[128] = { 0 };\n    unsigned int c = 0, written = 0, count = 0, len = 0;\n    a2dp_src_thread_args_t *thread_arg = (a2dp_src_thread_args_t *)arg;\n    char type = thread_arg->type;\n\n    if (type == \'f\') {\n        strcpy(muisc_path, thread_arg->parameter);\n    } else if (type == \'p\' | type == \'P\') {\n        ret = traverse_musiclist(thread_arg->parameter);\n        if (ret == -1) {\n            CMD_ERR("traverse musiclist fail \\n");\n            goto failed;\n        }\n        strcpy(muisc_path, (const char *)&musiclist[wav_number].music_path);\n    }\n\nstart:\n    c = 0, written = 0, count = 0, len = 0;\n    path_length = strlen(muisc_path);\n    if (path_length < 5) { //File path meets at least length 5\n        CMD_ERR("Please enter the correct file path \\n");\n        goto failed;\n    }\n\n    if (strcmp(".wav", &muisc_path[path_length - 4])) {\n        CMD_ERR("Please enter the correct audio format - \'wav\'\\n");\n        goto failed;\n    }\n\n    if (music_fd > 0) {\n        CMD_DBG("close music fd\\n");\n        close_file(music_fd);\n    }\n\n    music_fd = open_file(muisc_path);\n    if (music_fd < 0) {\n        CMD_ERR("Cannot open input file\\n");\n    }\n\n    ret = read(music_fd, &wav_header, sizeof(wav_header_t));\n    if (ret != sizeof(wav_header_t)) {\n        CMD_ERR("read wav file header failed\\n");\n        close_file(music_fd);\n        goto failed;\n    }\n\n    CMD_DBG("btcli_a2dp_src_thread start !\\n");\n    memset(buffer, 0, sizeof(buffer));\n    btmg_a2dp_source_set_audio_param(wav_header.num_channels, wav_header.sample_rate);\n    count = wav_header.data_size;\n    CMD_DBG("start a2dp src loop, data size:%d, ch:%d, sample:%d ,path: %s \\n",\n            wav_header.data_size, wav_header.num_channels, wav_header.sample_rate, muisc_path);\n\n    a2dp_src_loop = true;\n    set_play_state(PLAY);\n\n    while (a2dp_src_loop) {\n        switch (get_play_state()) {\n        case PLAY:\n            if (is_pause) {\n                btmg_a2dp_source_play_start();\n                is_pause = false;\n            }\n            if (!music_canwrite) {\n                /* Wait for the callback to complete before the\n                other party\'s audio channel is actually opened */\n                usleep(5);\n                break;\n            }\n            if (send_len != 0) {\n                c = count - written;\n                if (c > A2DP_SRC_BUFF_SIZE) {\n                    c = A2DP_SRC_BUFF_SIZE;\n                }\n                len = read(music_fd, buffer, c);\n                if (len == 0) {\n                    lseek(music_fd, 0, SEEK_SET);\n                    written = 0;\n                    CMD_DBG("audio file read complete\\n");\n                    continue;\n                }\n                if (len < 0) {\n                    CMD_DBG("read file error,ret:%d,c=%d\\n", len, c);\n                    break;\n                }\n            } else {\n                usleep(5);\n            }\n            if (len > 0) {\n                if (get_play_state() != PLAY) {\n                    usleep(5);\n                    break;\n                }\n                send_len = btmg_a2dp_source_send_data(buffer, len);\n                written += send_len;\n            }\n            break;\n        case PAUSE:\n            if (!is_pause) {\n                btmg_a2dp_source_play_stop(false);\n                music_canwrite = false, is_pause = true;\n            }\n            usleep(10 * 1000);\n            break;\n        case FORWARD:\n            wav_number++;\n            if (wav_number >= musiclist_number - 1) {\n                wav_number = 0;\n            }\n            memset(muisc_path, 0, sizeof(muisc_path));\n            strcpy(muisc_path, (const char *)&musiclist[wav_number].music_path);\n            close_file(music_fd);\n            music_fd = 0;\n            a2dp_src_loop = false;\n            goto start;\n            break;\n        case BACKWARD:\n            wav_number--;\n            if (wav_number < 0) {\n                wav_number = musiclist_number - 1 - 1;\n            }\n            memset(muisc_path, 0, sizeof(muisc_path));\n            strcpy(muisc_path, (const char *)&musiclist[wav_number].music_path);\n            close_file(music_fd);\n            music_fd = 0;\n            a2dp_src_loop = false;\n            goto start;\n            break;\n        case STOP:\n            CMD_DBG("A2DP SRC Thread STOP\\n");\n            a2dp_src_loop = false;\n            break;\n        default:\n            break;\n        }\n    }\n\n    close_file(music_fd);\n    music_fd = 0;\nfailed:\n    CMD_DBG("Delete a2dp_play_thread\\n");\n    music_canwrite = false, is_pause = true;\n    btmg_a2dp_source_play_stop(true);\n    if (musiclist != NULL) {\n        free(musiclist);\n        musiclist = NULL;\n    }\n    if (thread_args != NULL) {\n        free(thread_args);\n        thread_args = NULL;\n    }\n    XR_OS_ThreadDelete(&a2dp_play_thread);\n    return;\n}\n\nvoid btcli_a2dp_source_audio_state_cb(const char *bd_addr, btmg_a2dp_source_audio_state_t state)\n{\n    if (state == BTMG_A2DP_SOURCE_AUDIO_STARTED) {\n        music_canwrite = true;\n        set_play_state(PLAY);\n        CMD_DBG("start btcli_a2dp_src_thread from devices device: %s\\n", bd_addr);\n    } else if (state == BTMG_A2DP_SOURCE_AUDIO_STOPPED) {\n        music_canwrite = false;\n        set_play_state(PAUSE); //need PAUSE not STOP\n        CMD_DBG("stop btcli_a2dp_src_thread from devices device: %s\\n", bd_addr);\n    } else if (state == BTMG_A2DP_SOURCE_AUDIO_SUSPENDED) {\n        /*SUSPENDED protocol stack not used???*/\n        music_canwrite = false;\n        set_play_state(PAUSE);\n        CMD_DBG("a2dp source audio suspend from devices device: %s\\n", bd_addr);\n    }\n}\n\nvoid btcli_a2dp_source_connection_state_cb(const char *bd_addr,\n                                           btmg_a2dp_source_connection_state_t state)\n{\n    if (state == BTMG_A2DP_SOURCE_DISCONNECTED) {\n        /* It should be noted that there will be no disconnecting callback\n        when the other party disconnects abnormally, so it is necessary to\n        ensure that the thread can be released */\n        set_play_state(STOP);\n        dev_connnect = false;\n        CMD_DBG("A2DP source disconnected with device: %s\\n", bd_addr);\n    } else if (state == BTMG_A2DP_SOURCE_CONNECTING) {\n        CMD_DBG("A2DP source connecting with device: %s\\n", bd_addr);\n    } else if (state == BTMG_A2DP_SOURCE_CONNECTED) {\n        dev_connnect = true;\n        CMD_DBG("A2DP source connected with device: %s\\n", bd_addr);\n    } else if (state == BTMG_A2DP_SOURCE_DISCONNECTING) {\n        //The disconnecting stage should exit the playback thread\n        set_play_state(STOP);\n        CMD_DBG("A2DP source disconnecting with device: %s\\n", bd_addr);\n    }\n}\n\n/* btcli a2dp_src connect <device mac> */\nenum cmd_status btcli_source_connect(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_a2dp_source_connect(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli a2dp_src disconnect <device mac> */\nenum cmd_status btcli_source_disconnect(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_a2dp_source_disconnect(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli a2dp_src start -f xxx.wav or btcli a2dp_src start -p /data */\nenum cmd_status btcli_source_start(char *cmd)\n{\n    int ret = -1, i = 0, argc = 0, len = 0;\n    char *argv[2];\n\n    if (!dev_connnect) {\n        CMD_ERR("Please complete the device connection first\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    if (get_play_state() != STOP | a2dp_src_loop == true) {\n        CMD_WRN("a2dp_src_play_t thread already started\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    is_folder_play = false;\n\n    argc = cmd_parse_argv(cmd, argv, 2);\n\n    if (a2dp_src_loop == false) {\n        if (thread_args)\n            free(thread_args);\n        thread_args = (a2dp_src_thread_args_t *)malloc(sizeof(a2dp_src_thread_args_t));\n        if (strcmp("-f", argv[0]) == 0 || strcmp("-F", argv[0]) == 0) {\n            thread_args->type = \'f\';\n            memset(thread_args->parameter, 0, sizeof(thread_args->parameter));\n            strcpy(thread_args->parameter, argv[1]);\n        } else if (strcmp("-p", argv[0]) == 0 || strcmp("-P", argv[0]) == 0) {\n            thread_args->type = \'p\';\n            is_folder_play = true;\n            memset(thread_args->parameter, 0, sizeof(thread_args->parameter));\n            strcpy(thread_args->parameter, argv[1]);\n        } else {\n            CMD_ERR("please enter the parameters correctly \\n");\n            free(thread_args);\n            thread_args = NULL;\n            return CMD_STATUS_FAIL;\n        }\n    }\n\n    XR_OS_ThreadCreate(&a2dp_play_thread, "a2dp_src_play_t", btcli_a2dp_src_thread,\n                        thread_args, 2, 1024 * 6);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli a2dp_src stop */\nenum cmd_status btcli_source_stop(char *cmd)\n{\n    set_play_state(STOP);\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_source_control(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if (!dev_connnect) {\n        CMD_ERR("Please complete the device connection first\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    if (get_play_state() == STOP) {\n        CMD_ERR("Please run first a2dp_src:  btcli a2dp_src start xxxx\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    if (strcmp("play", argv[0]) == 0) {\n        set_play_state(PLAY);\n    } else if (strcmp("pause", argv[0]) == 0) {\n        set_play_state(PAUSE);\n    } else if (strcmp("forward", argv[0]) == 0) {\n        if (!is_folder_play) {\n            CMD_ERR("need specify the folder with -p to start\\n");\n            CMD_STATUS_FAIL;\n        }\n        set_play_state(FORWARD);\n    } else if (strcmp("backward", argv[0]) == 0) {\n        if (!is_folder_play) {\n            CMD_ERR("need specify the folder with -p to start\\n");\n            CMD_STATUS_FAIL;\n        }\n        set_play_state(BACKWARD);\n    } else {\n        CMD_ERR("This operation is not supported\\n");\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli a2dp_src vol */\nenum cmd_status btcli_source_vol(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n    int val = cmd_atoi(argv[0]);\n    printf("val is %d", val);\n    if (val < 0 || val > 99) {\n        CMD_ERR("return failed\\n");\n        return CMD_STATUS_FAIL;\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/*\n    $btcli a2dp_src connect <mac>\n    $btcli a2dp_src disconnect <mac>\n    $btcli a2dp_src start\n    $btcli a2dp_src stop\n    $btcli a2dp_src control\n    $btcli a2dp_src vol <val>\n*/\nstatic const struct cmd_data a2dp_source_cmds[] = {\n    { "connect",    btcli_source_connect,    CMD_DESC("<device mac>")},\n    { "disconnect", btcli_source_disconnect, CMD_DESC("<device mac>")},\n    { "start",      btcli_source_start,      CMD_DESC("<-p [folder path] or -f [file path]>")},\n    { "control",    btcli_source_control,    CMD_DESC("<cmd>(pause play forward backward)")},\n    { "stop",       btcli_source_stop,       CMD_DESC("No parameters")},\n    { "vol",        btcli_source_vol,        CMD_DESC("<val>(val:0~100)")},\n    { "help",       btcli_source_help,       CMD_DESC(CMD_HELP_DESC)},\n};\n\n/* btcli a2dp_src help */\nstatic enum cmd_status btcli_source_help(char *cmd)\n{\n    return cmd_help_exec(a2dp_source_cmds, cmd_nitems(a2dp_source_cmds), 10);\n}\n\nenum cmd_status btcli_a2dp_source(char *cmd)\n{\n    return cmd_exec(cmd, a2dp_source_cmds, cmd_nitems(a2dp_source_cmds));\n}\n'})}),"\n",(0,_.jsx)(e.h5,{id:"\u521d\u59cb\u5316-1",children:"\u521d\u59cb\u5316"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u603b\u56de\u8c03\u7ed3\u6784\u4f53\u662f btmg_callback_t\uff0c\u5148\u8bbe\u7f6e a2dp source \u76f8\u5173\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_core_init \u521d\u59cb\u5316 btmanager;"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_register_callback \u6ce8\u518c\u6b65\u9aa4 1 \u8bbe\u7f6e\u597d\u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_set_profile(BTMG_A2DP_SOURCE) \u4f7f\u80fd\u84dd\u7259 Profile\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_adapter_enable(true) \u4f7f\u80fd\u84dd\u7259\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u84dd\u7259\u4f7f\u80fd\u6210\u529f\u540e\u89e6\u53d1 state_cb\uff0c\u53c2\u8003 btcli_adapter_status_cb\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_name\uff0c\u8bbe\u7f6e\u84dd\u7259\u540d\u79f0\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_io_capability\uff0c\u8bbe\u7f6e io_capability \u80fd\u529b\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_scanmode\uff0c\u8bbe\u7f6e\u53d1\u73b0\u6a21\u5f0f\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u626b\u63cf\u8fde\u63a5",children:"\u626b\u63cf\u8fde\u63a5"}),"\n",(0,_.jsx)(e.p,{children:"\u84dd\u7259\u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u626b\u63cf\u548c\u8fde\u63a5\u5468\u56f4\u8bbe\u5907\u3002"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_adapter_start_scan \u626b\u63cf\u5468\u56f4\u8bbe\u5907\uff0c\u53ef\u53c2\u8003 btcli_scan\u3002\u53d1\u8d77\u626b\u63cf\u540e\uff0c\u626b\u5230\u7684\u8bbe\u5907\u4f1a\u901a\u8fc7 btmg_device_cb.device_add_cb \u56de\u8c03\uff0c\u6b64\u65f6\u5e94\u7528\u53ef\u4ee5\u628a\u8bbe\u5907\u7ba1\u7406\u8d77\u6765\uff0c\u5efa\u7acb\u5e94\u7528\u7684\u626b\u63cf\u5217\u8868\uff0c\u53ef\u53c2\u8003 btcli_scan_dev_add_cb\uff0c\u626b\u63cf\u5217\u8868\u53ef\u4ee5\u53c2\u8003 btcli_scan_list\uff0c\u8bf7\u6839\u636e\u81ea\u8eab\u9700\u6c42\u7ba1\u7406\u8bbe\u5907\u5217\u8868\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03 \u7528 btmg_a2dp_source_connect \u6307 \u5b9a \u8bbe \u5907 \uff08mac \u5730 \u5740\uff09 \u53d1 \u8d77 \u8fde \u63a5\uff0c \u8fde \u63a5 \u72b6 \u6001 \u901a \u8fc7btmg_a2dp_source_cb.conn_state_cb \u4e0a\u62a5\uff0c\u6839\u636e\u8fde\u63a5\u6216\u65ad\u5f00\u505a\u5e94\u7528\u903b\u8f91\u5f00\u53d1\uff0c\u53ef\u53c2\u8003btcli_a2dp_source_connection_state_cb\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u97f3\u9891\u64ad\u653e",children:"\u97f3\u9891\u64ad\u653e"}),"\n",(0,_.jsx)(e.p,{children:"\u8bbe\u5907\u8fde\u63a5\u540e\uff0c\u53ef\u4ee5\u5f80 A2DP Sink \u8bbe\u5907\u63a8\u6d41\u3002\u97f3\u9891\u64ad\u653e\u6839\u636e\u6570\u636e\u5904\u7406\u7684\u65b9\u5f0f\u4e0d\u540c\u5206\u4e3a\u4e24\u79cd\uff1a"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"btmanager \u901a\u8def"}),"\n"]}),"\n",(0,_.jsx)(e.p,{children:"btmanager \u5305\u542b\u6296\u52a8 fifo\u3001\u97f3\u9891\u91cd\u91c7\u6837\u7684\u529f\u80fd\uff0c\u76f4\u63a5\u4f7f\u7528 A2DP Source API \u5f00\u53d1\u5373\u53ef\u3002"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"Audio System \u901a\u8def"}),"\n"]}),"\n",(0,_.jsx)(e.p,{children:"Audio System \u5bf9\u63a5 btmanager\uff0c\u628a A2DP Source \u84dd\u7259\u8bbe\u5907\u62bd\u8c61\u4e3a\u4e00\u4e2a\u58f0\u5361\uff0c\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003 Audio \u7684\u5f00\u53d1\u6307\u5357\u6587\u6863\u3002btmanager \u4e5f\u9700\u8981\u505a\u76f8\u5e94\u7684\u914d\u7f6e\uff0cbtmanager \u901a\u8def\u548c Audio System \u901a\u8def\u53ea\u80fd\u4e8c\u9009\u4e00\uff1b"}),"\n",(0,_.jsx)(e.h6,{id:"bt_manager-\u901a\u8def",children:"bt_manager \u901a\u8def"}),"\n",(0,_.jsx)(e.p,{children:"\u8bf7\u53c2\u8003 btcli_a2dp_source.c \u7684\u5b9e\u73b0\uff0c\u76ee\u524d\u53ea\u652f\u6301\u63a5\u6536 PCM \u6570\u636e\uff0c\u56e0\u6b64\u5e94\u7528\u63a8\u9001\u7684\u97f3\u9891\u6d41\u52a1\u5fc5\u662fPCM \u6570\u636e\uff0c\u53d1\u9001\u6d41\u7a0b\u5982\u4e0b\uff1a"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u901a\u8fc7 btmg_a2dp_source_play_start \u51fd\u6570\u901a\u77e5\u534f\u8bae\u6808\u51c6\u5907\u5f00\u59cb\u5904\u7406\u6570\u636e\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u901a\u8fc7 btmg_a2dp_source_set_audio_param \u628a\u5c06\u8981\u64ad\u653e\u97f3\u9891\u6d41\u7684\u901a\u9053\u6570\u548c\u91c7\u6837\u7387\u4f20\u9012\u7ed9btmanager\u3002\u9664\u7b2c\u4e00\u6b21\u5916\uff0c\u4ee5\u540e\u5728\u97f3\u9891\u53c2\u6570\u53d8\u5316\u65f6\u8c03\u7528\u5373\u53ef\u3002\u4f8b\u5982\u5f53\u524d\u64ad\u653e\u7684\u662f 44100HZ\uff0c\u5355\u58f0\u9053\u7684\u97f3\u9891 A\uff0c\u64ad\u653e\u5b8c\u97f3\u9891 A \u4e4b\u540e\uff0c\u9700\u8981\u5982\u679c\u8981\u64ad\u653e44100HZ\uff0c\u5355\u58f0\u9053\u7684\u97f3\u9891 B\uff0c\u53ef\u4ee5\u4e0d\u7528\u8fdb\u884c\u91cd\u65b0\u8bbe\u7f6e\u3002\u4f46\u5982\u679c\u8981\u64ad\u653e\u7684\u662f 48000HZ\uff0c\u5355\u58f0\u9053\u7684\u97f3\u9891 C\uff0c\u52a1\u5fc5\u8c03\u7528\uff0c\u5426\u5219\u64ad\u653e\u4e0d\u6b63\u5e38\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u901a\u8fc7 btmg_a2dp_source_send_data \u628a pcm \u4f20\u9012\u7ed9 bt_manager\uff0c\u5efa\u8bae\u6bcf\u6b21\u53d1\u9001 512 \u5b57\u8282\uff0cbt_manager \u5185\u90e8\u5bf9\u6570\u636e\u5904\u7406\uff08\u7f13\u5b58\u4e0e\u91cd\u91c7\u6837\uff09\uff0c\u518d\u628a\u6570\u636e\u4f20\u7ed9\u534f\u8bae\u6808\uff0c\u534f\u8bae\u6808\u628a\u6570\u636e\u7f16\u7801\u6210 SBC \u683c\u5f0f\u7ed9\u5230\u84dd\u7259\u63a7\u5236\u5668\uff0c\u84dd\u7259\u63a7\u5236\u5668\u6700\u7ec8\u901a\u8fc7\u65e0\u7ebf\u5c04\u9891\u4f20\u7ed9\u5bf9\u7aef\u84dd\u7259\u8bbe\u5907\u3002\u53cd\u590d\u8c03\u7528send_data \u63a5\u53e3\u76f4\u5230\u6570\u636e\u53d1\u5b8c\u5b8c\u6bd5\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8bbe\u7f6e/\u83b7\u53d6\u84dd\u7259\u97f3\u4e50\u64ad\u653e\u97f3\u91cf\u53ef\u4ee5\u901a\u8fc7 btmg_avrc_set_absolute_volume/btmg_avrc_get_absolute_volume \u63a5\u53e3;"}),"\n",(0,_.jsx)(e.li,{children:"\u5982\u679c\u4e0d\u518d\u53d1\u9001\u6570\u636e\uff0c\u52a1\u5fc5\u8c03\u7528 btmg_a2dp_source_play_stop \u544a\u77e5\u534f\u8bae\u6808\u505c\u6b62\u6570\u636e\u5904\u7406;"}),"\n"]}),"\n",(0,_.jsx)(e.h6,{id:"audio-system-\u901a\u8def",children:"Audio System \u901a\u8def"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u9ed8\u8ba4\u4e0d\u8d70\u6b64\u901a\u8def\uff0cRV \u6838\u9700\u8981\u505a\u4ee5\u4e0b\u914d\u7f6e"}),"\n"]}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"System components \u2011\u2011\u2011>\n    aw components \u2011\u2011\u2011>\n        wireless \u2011\u2011\u2011>\n            [*] btmanager \u2011\u2011\u2011>\n               [*] Enable AudioTrack send audio data\n\n        AudioSystem Support\u2011\u2011\u2011>\n            AW Audio System Support \u2011\u2011\u2011>\n                Audio HW Support \u2011\u2011\u2011>\n"})}),"\n",(0,_.jsx)(e.h5,{id:"\u53cd\u521d\u59cb\u5316",children:"\u53cd\u521d\u59cb\u5316"}),"\n",(0,_.jsx)(e.p,{children:"\u53cd\u521d\u59cb\u5316\u662f\u6307\u5173\u95ed\u84dd\u7259\uff0c\u53ef\u4ee5\u53c2\u8003 btcli_deinit\uff0c\u4e3b\u8981\u662f\u4ee5\u4e0b\u51fd\u6570\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"btmg_adapter_enable(false);\nbtmg_core_deinit();\nbtmg_unregister_callback(void);\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u8fd8\u9700\u8981\u5173\u6ce8\u91ca\u653e\u5e94\u7528\u989d\u5916\u7533\u8bf7\u7684\u5185\u5b58\u8d44\u6e90\u7b49\u3002"}),"\n",(0,_.jsx)(e.h3,{id:"hfp-hf-\u5f00\u53d1",children:"HFP HF \u5f00\u53d1"}),"\n",(0,_.jsx)(e.h4,{id:"hfp-hf-api",children:"HFP HF API"}),"\n",(0,_.jsxs)(e.table,{children:[(0,_.jsx)(e.thead,{children:(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"API \u63a5\u53e3"}),(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"\u8bf4\u660e"})]})}),(0,_.jsxs)(e.tbody,{children:[(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_connect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8fde\u63a5\u6307\u5b9a\u8bbe\u5907"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_disconnect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u65ad\u5f00\u4e0e\u6307\u5b9a\u8bbe\u5907\u7684\u8fde\u63a5"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_start_voice_recognition"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5f00\u542f\u8bed\u97f3\u8bc6\u522b"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_stop_voice_recognition"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5173\u95ed\u8bed\u97f3\u8bc6\u522b"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_spk_vol_update"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u66f4\u65b0\u6269\u97f3\u5668\u97f3\u91cf"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_mic_vol_update"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u66f4\u65b0\u9ea6\u514b\u98ce\u97f3\u91cf"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_dial"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u6307\u5b9a\u53f7\u7801\u62e8\u6253\u7535\u8bdd"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_dial_memory"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5feb\u901f\u62e8\u53f7\uff0c\u624b\u673a\u5fc5\u987b\u6709\u8bbe\u7f6e\u5feb\u901f\u62e8\u53f7\u7684\u53f7\u7801"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_send_chld_cmd"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u591a\u65b9\u901a\u8bdd\u63a7\u5236"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_send_btrh_cmd"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u9001\u54cd\u5e94\u548c\u4fdd\u6301\u52a8\u4f5c\u7684\u547d\u4ee4"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_answer_call"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u63a5\u542c\u6765\u7535"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_reject_call"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u62d2\u7edd\u6765\u7535"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_query_calls"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u67e5\u8be2\u5f53\u524d\u901a\u8bdd\u5217\u8868"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_query_operator"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u67e5\u8be2\u5f53\u524d\u9009\u62e9\u7684\u7f51\u7edc\u8fd0\u8425\u5546\u540d\u79f0"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_query_number"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u67e5\u9605\u672c\u673a\u53f7\u7801"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_send_dtmf"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5728\u901a\u8bdd\u8fc7\u7a0b\u4e2d\u4f20\u8f93 DTMF \u7801\uff0c\u5373\u5728\u901a\u8bdd\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u952e\u76d8\u8f93\u5165\u5185\u5bb9"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_request_last_voice_tag_number"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5411 AG \u8bf7\u6c42\u4e0e\u6700\u540e\u5f55\u5236\u7684\u8bed\u97f3\u6807\u7b7e\u76f8\u5bf9\u5e94\u7684\u7535\u8bdd\u53f7\u7801"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_hfp_hf_send_nrec"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5173\u95ed\u56de\u58f0\u6d88\u9664\u548c\u964d\u566a"})]})]})]}),"\n",(0,_.jsx)(e.h4,{id:"hfp-hf-api-\u8c03\u7528\u6d41\u7a0b",children:"HFP HF API \u8c03\u7528\u6d41\u7a0b"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:'#include <AudioSystem.h>\n\nstatic enum cmd_status btcli_hfp_help(char *cmd);\n\nstatic const char *s_hfp_event_str[] = { "BTMG_HFP_HF_BVRA_EVT",\n                                         "BTMG_HFP_HF_CIND_CALL_EVT",\n                                         "BTMG_HFP_HF_CIND_CALL_SETUP_EVT",\n                                         "BTMG_HFP_HF_CIND_CALL_HELD_EVT",\n                                         "BTMG_HFP_HF_CIND_SERVICE_AVAILABILITY_EVT",\n                                         "BTMG_HFP_HF_CIND_SIGNAL_STRENGTH_EVT",\n                                         "BTMG_HFP_HF_CIND_ROAMING_STATUS_EVT",\n                                         "BTMG_HFP_HF_CIND_BATTERY_LEVEL_EVT",\n                                         "BTMG_HFP_HF_COPS_CURRENT_OPERATOR_EVT",\n                                         "BTMG_HFP_HF_BTRH_EVT",\n                                         "BTMG_HFP_HF_CLIP_EVT",\n                                         "BTMG_HFP_HF_CCWA_EVT",\n                                         "BTMG_HFP_HF_CLCC_EVT",\n                                         "BTMG_HFP_HF_VOLUME_CONTROL_EVT",\n                                         "BTMG_HFP_HF_CNUM_EVT",\n                                         "BTMG_HFP_HF_BSIR_EVT",\n                                         "BTMG_HFP_HF_BINP_EVT",\n                                         "BTMG_HFP_HF_RING_IND_EVT" };\n\nstatic const char *_hfp_event_to_string(btmg_hfp_hf_event_t event)\n{\n    return s_hfp_event_str[event - 2];\n}\n\n#ifdef XRADIO_HFP_ADJUST_VOLUME\n#define XRADIO_AMIXER_HFP_MAX 63\nstatic uint8_t bluedroid_amixer(uint8_t volume)\n{\n    int ret = 0;\n    int type = AUDIO_STREAM_SYSTEM;\n    uint32_t volume_value = 0;\n    uint8_t max_volume = 0;\n\n    ret = softvol_control_with_streamtype(type, &volume_value, 2);\n    if (ret != 0) {\n        CMD_ERR("get softvol range failed:%d\\n", ret);\n        return -1;\n    }\n    max_volume = (volume_value >> 16) & 0xffff;\n    volume_value = (value * max_volume / 100) & 0xffff;\n    ret = softvol_control_with_streamtype(type, &volume_value, 1);\n    if (ret != 0) {\n        CMD_ERR("set softvol failed:%d\\n", ret);\n        return -1;\n    }\n\n    return ret;\n}\n#endif\n\nvoid btcli_hfp_hf_connection_state_cb(const char *bd_addr, btmg_hfp_hf_connection_state_t state)\n{\n    if (state == BTMG_HFP_HF_DISCONNECTED) {\n        CMD_DBG("hfp hf disconnected with device: %s\\n", bd_addr);\n    } else if (state == BTMG_HFP_HF_CONNECTING) {\n        CMD_DBG("hfp hf connecting with device: %s\\n", bd_addr);\n    } else if (state == BTMG_HFP_HF_CONNECTED) {\n        CMD_DBG("hfp hf connected with device: %s\\n", bd_addr);\n    } else if (state == BTMG_HFP_HF_SLC_CONNECTED) {\n        CMD_DBG("hfp hf slc_connected with device: %s\\n", bd_addr);\n    } else if (state == BTMG_HFP_HF_DISCONNECTING) {\n        CMD_DBG("hfp hf disconnecting with device: %s\\n", bd_addr);\n    }\n}\n\nvoid btcli_hfp_hf_event_cb(btmg_hfp_hf_event_t event, void *data)\n{\n    CMD_DBG("event:%s \\n", _hfp_event_to_string(event));\n}\n\n/* btcli hfp voice_rec <0/1> */\nstatic enum cmd_status btcli_hfp_voice_recognition(char *cmd)\n{\n    btmg_err ret;\n    int start = 0;\n\n    /* get param */\n    int cnt = cmd_sscanf(cmd, "%d ", &start);\n    if (cnt != 1) {\n        CMD_ERR("invalid param number %d\\n", cnt);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if (start == 1) {\n        if ((ret = btmg_hfp_hf_start_voice_recognition()) != BT_OK) {\n            CMD_ERR("return failed: %d\\n", ret);\n            return CMD_STATUS_FAIL;\n        }\n    } else if (start == 0) {\n        if ((ret = btmg_hfp_hf_stop_voice_recognition() != BT_OK)) {\n            CMD_ERR("return failed: %d\\n", ret);\n            return CMD_STATUS_FAIL;\n        }\n    } else {\n        CMD_ERR("invalid param %d\\n", start);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp vol_update <spk/mic> <vol> */\nstatic enum cmd_status btcli_hfp_vol_update(char *cmd)\n{\n    btmg_err ret;\n    char devc[10] = { 0 };\n    int vol;\n\n    /* get param */\n    int cnt = cmd_sscanf(cmd, "%s %d", devc, &vol);\n    if (cnt != 2) {\n        CMD_ERR("invalid param number %d\\n", cnt);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if (!cmd_strcmp(devc, "spk")) {\n        if ((ret = btmg_hfp_hf_spk_vol_update(vol)) != BT_OK) {\n            CMD_ERR("return failed: %d\\n", ret);\n            return CMD_STATUS_FAIL;\n        }\n#ifdef XRADIO_HFP_ADJUST_VOLUME\n        int ret = -1;\n        CMD_DBG("adjusting the volume by ourselves\\n");\n        vol = XRADIO_AMIXER_HFP_MAX - (uint32_t)vol * 4;\n        CMD_DBG("volume is %d\\n", vol);\n        ret = bluedroid_amixer(vol);\n        if (ret != XR_OK) {\n            CMD_ERR("Set vol by ourself failed \\n");\n        }\n#endif\n    } else if (!cmd_strcmp(devc, "mic")) {\n        if ((ret = btmg_hfp_hf_mic_vol_update(vol)) != BT_OK) {\n            CMD_ERR("return failed: %d\\n", ret);\n            return CMD_STATUS_FAIL;\n        }\n    } else {\n        CMD_ERR("invalid param %s\\n", devc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp dial 10086 */\nstatic enum cmd_status btcli_hfp_dial(char *cmd)\n{\n    btmg_err ret;\n    char number[30] = { 0 };\n\n    /* get param */\n    int cnt = cmd_sscanf(cmd, "%s", number);\n    if (cnt != 1) {\n        CMD_ERR("invalid param number %d\\n", cnt);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if ((ret = btmg_hfp_hf_dial(number)) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp dial_mem 2 */\nstatic enum cmd_status btcli_hfp_dial_mem(char *cmd)\n{\n    btmg_err ret;\n    int loc;\n\n    /* get param */\n    int cnt = cmd_sscanf(cmd, "%d", &loc);\n    if (cnt != 1) {\n        CMD_ERR("invalid param number %d\\n", cnt);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if ((ret = btmg_hfp_hf_dial_memory(loc)) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp chld 0 0 */\nstatic enum cmd_status btcli_hfp_chld(char *cmd)\n{\n    btmg_err ret;\n    int chld;\n    int idx = 0;\n\n    /* get param */\n    int cnt = cmd_sscanf(cmd, "%d %d", &chld, &idx);\n    if (cnt != 2 && (chld == BTMG_HF_CHLD_TYPE_REL_X || chld == BTMG_HF_CHLD_TYPE_PRIV_X)) {\n        CMD_ERR("invalid param number %d\\n", cnt);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if ((ret = btmg_hfp_hf_send_chld_cmd((btmg_hf_chld_type_t)chld, idx)) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp btrh <hold/accept/reject> */\nstatic enum cmd_status btcli_hfp_btrh(char *cmd)\n{\n    btmg_err ret;\n    char btrhcmd[10] = { 0 };\n    btmg_hf_btrh_cmd_t btrh;\n\n    /* get param */\n    int cnt = cmd_sscanf(cmd, "%s", btrhcmd);\n    if (cnt != 1) {\n        CMD_ERR("invalid param number %d\\n", cnt);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if (!cmd_strcmp(btrhcmd, "hold"))\n        btrh = BTMG_HF_BTRH_CMD_HOLD;\n    else if (!cmd_strcmp(btrhcmd, "accept"))\n        btrh = BTMG_HF_BTRH_CMD_ACCEPT;\n    else if (!cmd_strcmp(btrhcmd, "reject"))\n        btrh = BTMG_HF_BTRH_CMD_REJECT;\n    else {\n        CMD_ERR("invalid param %s\\n", btrhcmd);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if ((ret = btmg_hfp_hf_send_btrh_cmd(btrh)) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp answer */\nstatic enum cmd_status btcli_hfp_answer(char *cmd)\n{\n    btmg_err ret;\n\n    if ((ret = btmg_hfp_hf_answer_call() != BT_OK)) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp reject */\nstatic enum cmd_status btcli_hfp_reject(char *cmd)\n{\n    btmg_err ret;\n\n    if ((ret = btmg_hfp_hf_reject_call()) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp query <call/name> */\nstatic enum cmd_status btcli_hfp_query(char *cmd)\n{\n    btmg_err ret;\n    char query[10] = { 0 };\n\n    /* get param */\n    int cnt = cmd_sscanf(cmd, "%s", query);\n    if (cnt != 1) {\n        CMD_ERR("invalid param number %d\\n", cnt);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if (!cmd_strcmp(query, "call")) {\n        if ((ret = btmg_hfp_hf_query_calls()) != BT_OK) {\n            CMD_ERR("return failed: %d\\n", ret);\n            return CMD_STATUS_FAIL;\n        }\n    } else if (!cmd_strcmp(query, "name")) {\n        if ((ret = btmg_hfp_hf_query_operator()) != BT_OK) {\n            CMD_ERR("return failed: %d\\n", ret);\n            return CMD_STATUS_FAIL;\n        }\n    } else {\n        CMD_ERR("invalid param %s\\n", query);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp number */\nstatic enum cmd_status btcli_hfp_phone_number(char *cmd)\n{\n    btmg_err ret;\n\n    if ((ret = btmg_hfp_hf_query_number()) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp dtmf <0-9/#/ * > */\nstatic enum cmd_status btcli_hfp_dtmf(char *cmd)\n{\n    btmg_err ret;\n    char c = \'\\0\';\n\n    /* get param */\n    int cnt = cmd_sscanf(cmd, "%c", &c);\n    if (cnt != 1) {\n        CMD_ERR("invalid param number %d\\n", cnt);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if ((ret = btmg_hfp_hf_send_dtmf(c)) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp last_vnum */\nstatic enum cmd_status btcli_hfp_last_vnum(char *cmd)\n{\n    btmg_err ret;\n\n    if ((ret = btmg_hfp_hf_request_last_voice_tag_number()) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n    return CMD_STATUS_OK;\n}\n\n/* btcli hfp nrec_close */\nstatic enum cmd_status btcli_hfp_nrec_close(char *cmd)\n{\n    btmg_err ret;\n\n    if ((ret = btmg_hfp_hf_send_nrec()) != BT_OK) {\n        CMD_ERR("return failed: %d\\n", ret);\n        return CMD_STATUS_FAIL;\n    }\n    return CMD_STATUS_OK;\n}\n\nstatic const struct cmd_data hfp_cmds[] = {\n    { "voice_rec",  btcli_hfp_voice_recognition,  CMD_DESC("<state\uff1a1/0>") },\n    { "vol_update", btcli_hfp_vol_update,         CMD_DESC("<spk/mic> <vol>")},\n    { "dial",       btcli_hfp_dial,               CMD_DESC("<phone_num>")},\n    { "dial_mem",   btcli_hfp_dial_mem,           CMD_DESC("<local>")},\n    { "chld",       btcli_hfp_chld,               CMD_DESC("<type\uff1a0~6> <index>")},\n    { "btrh",       btcli_hfp_btrh,               CMD_DESC("<hold/accept/reject>")},\n    { "answer",     btcli_hfp_answer,             CMD_DESC("No parameters")},\n    { "reject",     btcli_hfp_reject,             CMD_DESC("No parameters")},\n    { "query",      btcli_hfp_query,              CMD_DESC("<call/name>")},\n    { "number",     btcli_hfp_phone_number,        CMD_DESC("No parameters")},\n    { "dtmf",       btcli_hfp_dtmf,               CMD_DESC("<code\uff1a0-9\uff0c#\uff0c*\uff0cA-D>")},\n    { "last_vnum",  btcli_hfp_last_vnum,          CMD_DESC("No parameters")},\n    { "nrec_close", btcli_hfp_nrec_close,         CMD_DESC("No parameters")},\n    { "help",       btcli_hfp_help,               CMD_DESC(CMD_HELP_DESC) },\n};\n\nstatic enum cmd_status btcli_hfp_help(char *cmd)\n{\n    return cmd_help_exec(hfp_cmds, cmd_nitems(hfp_cmds), 10);\n}\n\nenum cmd_status btcli_hfp(char *cmd)\n{\n    return cmd_exec(cmd, hfp_cmds, cmd_nitems(hfp_cmds));\n}\n'})}),"\n",(0,_.jsx)(e.h5,{id:"\u521d\u59cb\u5316-2",children:"\u521d\u59cb\u5316"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u603b\u56de\u8c03\u7ed3\u6784\u4f53\u662f btmg_callback_t\uff0c\u5148\u8bbe\u7f6e hfp hf \u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_core_init \u521d\u59cb\u5316 bt_manager;"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_register_callback \u6ce8\u518c\u6b65\u9aa4 1 \u8bbe\u7f6e\u597d\u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_set_profile(BTMG_HFP_HF) \u4f7f\u80fd\u84dd\u7259 Profile\uff1b\u5982\u679c\u4e0e A2DP Sink \u4e00\u8d77\u4f7f\u7528\uff0c\u8c03\u7528 btmg_set_profile(BTMG_HFP_HF | BTMG_A2DP_SINK )\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_adapter_enable(true) \u4f7f\u80fd\u84dd\u7259\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u84dd\u7259\u4f7f\u80fd\u6210\u529f\u540e\u89e6\u53d1 state_cb\uff0c\u53c2\u8003 btcli_adapter_status_cb\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_name\uff0c\u8bbe\u7f6e\u84dd\u7259\u540d\u79f0\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_io_capability\uff0c\u8bbe\u7f6e io_capability \u80fd\u529b\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_scanmode\uff0c\u8bbe\u7f6e\u53d1\u73b0\u6a21\u5f0f\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u8bbe\u5907\u8fde\u63a5",children:"\u8bbe\u5907\u8fde\u63a5"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u624b\u673a\u53ef\u4ee5\u641c\u7d22\u4e0e\u8fde\u63a5\uff0c\u8fde\u63a5\u7684\u56de\u8c03\u51fd\u6570 btmg_hfp_hf_cb.conn_state_cb\u3002\u5728\u8fde\u63a5\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u5b58\u5728 AT \u547d\u4ee4\u7684\u4ea4\u4e92\uff0c\u56e0\u6b64\u4f1a\u6536\u5230\u76f8\u5173 AT \u7684\u4e8b\u4ef6\uff0c\u5728btmg_hfp_hf_cb.event_cb \u56de\u8c03\u4e0a\u6765\uff0c\u5728\u793a\u4f8b\u4e2d\u53ea\u662f\u628a\u76f8\u5173\u4e8b\u4ef6\u6253\u5370\u51fa\u6765\u3002"}),"\n",(0,_.jsx)(e.li,{children:"\u5982\u679c\u9700\u8981\u4e3b\u52a8\u8fde\u63a5\u4e0e\u65ad\u5f00\uff0c\u4f7f\u7528 btmg_hfp_hf_connect \u6216 btmg_hfp_hf_disconnect \u63a5\u53e3\u3002"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u901a\u8bdd\u4e0e\u63a7\u5236",children:"\u901a\u8bdd\u4e0e\u63a7\u5236"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u624b\u673a\u6536\u5230\u6765\u7535\uff0c\u5e76\u4e14\u624b\u673a\u7aef\u4e3b\u52a8\u63a5\u542c\u7535\u8bdd\u540e\uff0c\u8bbe\u5907\u4f1a\u63a5\u7ba1\u624b\u673a\u7684\u901a\u8bdd\u529f\u80fd\uff0c\u901a\u8bdd\u7684\u58f0\u97f3\u4f1a\u5728\u8bbe\u5907\u626c\u58f0\u5668\u64ad\u653e\uff0c\u901a\u8bdd\u7684\u5f55\u97f3\u4e5f\u4f1a\u4f7f\u7528\u8bbe\u5907\u7684\u9ea6\u514b\u98ce\u3002\u5f53\u524d\u64ad\u653e\u548c\u5f55\u97f3\u7684\u5904\u7406\u653e\u5728 bt_manager\u5185\u90e8\u5904\u7406\uff0c\u540e\u7eed\u8ba1\u5212\u900f\u51fa\u76f8\u5173\u7684\u6570\u636e cb\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5982\u679c\u9700\u8981\u5728\u8bbe\u5907\u4e0a\u63a5\u542c\u7535\u8bdd\uff0c\u6302\u65ad\u7535\u8bdd\u7b49\u63a7\u5236\uff0c\u4e00\u822c\u9700\u8981\u901a\u8fc7\u53d1\u9001 AT \u547d\u4ee4\uff0c\u76f8\u5173\u7684\u547d\u4ee4\u5df2\u7ecf\u901a\u8fc7 API \u7684\u65b9\u5f0f\u96c6\u6210\uff0c\u7528\u6237\u53ef\u4ee5\u53c2\u8003 btcli_hfp.c \u76f8\u5173\u547d\u4ee4\u7684\u5b9e\u73b0\u3002"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u53cd\u521d\u59cb\u5316-1",children:"\u53cd\u521d\u59cb\u5316"}),"\n",(0,_.jsx)(e.p,{children:"\u53cd\u521d\u59cb\u5316\u53c2\u8003 btcli_deinit\uff0c\u4e3b\u8981\u662f\u4ee5\u4e0b\u51fd\u6570\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"btmg_adapter_enable(false);\nbtmg_core_deinit();\nbtmg_unregister_callback(void);\n"})}),"\n",(0,_.jsx)(e.h3,{id:"spp-client-\u5f00\u53d1",children:"SPP Client \u5f00\u53d1"}),"\n",(0,_.jsx)(e.p,{children:"SPP Profile \u4e00\u822c\u7528\u4e8e\u6570\u636e\u900f\u4f20\uff0c\u5e38\u89c1\u5e94\u7528\u662f\u8fde\u63a5\u84dd\u7259\u6253\u5370\u673a\u53d1\u9001\u6253\u5370\u6570\u636e\u3002"}),"\n",(0,_.jsx)(e.h4,{id:"spp-client-api",children:"SPP Client API"}),"\n",(0,_.jsxs)(e.table,{children:[(0,_.jsx)(e.thead,{children:(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"API \u63a5\u53e3"}),(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"\u8bf4\u660e"})]})}),(0,_.jsxs)(e.tbody,{children:[(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_sppc_connect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8fde\u63a5 SPP Server \u8bbe\u5907"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_sppc_disconnect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u65ad\u5f00\u4e0e\u5bf9\u7aef\u8bbe\u5907\u8fde\u63a5"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_sppc_write"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u9001\u6570\u636e\u7ed9\u5bf9\u7aef\u8bbe\u5907"})]})]})]}),"\n",(0,_.jsx)(e.h4,{id:"spp-client-api-\u8c03\u7528\u6d41\u7a0b",children:"SPP Client API \u8c03\u7528\u6d41\u7a0b"}),"\n",(0,_.jsx)(e.p,{children:"HFP HF \u529f\u80fd\u7684\u4f7f\u7528\u793a\u4f8b\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:'#include <stdint.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\n#include "cmd_util.h"\n#include "bt_manager.h"\n\nstatic enum cmd_status btcli_sppc_help(char *cmd);\n\nvoid btcli_sppc_conn_status_cb(const char *bd_addr, btmg_spp_connection_state_t state)\n{\n    if (state == BTMG_SPP_DISCONNECTED) {\n        CMD_DBG("spp client disconnected with device: %s\\n", bd_addr);\n    } else if (state == BTMG_SPP_CONNECTING) {\n        CMD_DBG("spp client connecting with device: %s\\n", bd_addr);\n    } else if (state == BTMG_SPP_CONNECTED) {\n        CMD_DBG("spp client connected with device: %s\\n", bd_addr);\n    } else if (state == BTMG_SPP_DISCONNECTING) {\n        CMD_DBG("spp client disconnecting with device: %s\\n", bd_addr);\n    } else if (state == BTMG_SPP_CONNECT_FAILED) {\n        CMD_DBG("spp client connect with device: %s failed!\\n", bd_addr);\n    } else if (state == BTMG_SPP_DISCONNEC_FAILED) {\n        CMD_DBG("spp client disconnect with device: %s failed!\\n", bd_addr);\n    }\n}\n\nvoid btcli_sppc_recvdata_cb(const char *bd_addr, char *data, int data_len)\n{\n    char recv_data[data_len + 1];\n\n    memcpy(recv_data, data, data_len);\n    recv_data[data_len] = \'\\0\';\n\n    CMD_DBG("sppc recv from dev:[%s],[len=%d][data:%s]\\n", bd_addr, data_len,\n            recv_data);\n}\n\n/* btcli sppc connect <device mac> */\nstatic enum cmd_status btcli_sppc_connect(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_sppc_connect(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli sppc disconnect <device mac> */\nstatic enum cmd_status btcli_sppc_disconnect(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_sppc_disconnect(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli sppc write <data> */\nstatic enum cmd_status btcli_sppc_write(char *cmd)\n{\n    int argc;\n    char *argv[1];\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_sppc_write(argv[0], strlen(argv[0]));\n\n    return CMD_STATUS_OK;\n}\n\nstatic const struct cmd_data sppc_cmds[] = {\n    { "connect",    btcli_sppc_connect,     CMD_DESC("<device mac>")},\n    { "disconnect", btcli_sppc_disconnect,  CMD_DESC("<device mac>")},\n    { "write",      btcli_sppc_write,       CMD_DESC("<data>")},\n    { "help",       btcli_sppc_help,      CMD_DESC(CMD_HELP_DESC)},\n};\n\n/* btcli sppc help */\nstatic enum cmd_status btcli_sppc_help(char *cmd)\n{\n    return cmd_help_exec(sppc_cmds, cmd_nitems(sppc_cmds), 10);\n}\n\nenum cmd_status btcli_sppc(char *cmd)\n{\n    return cmd_exec(cmd, sppc_cmds, cmd_nitems(sppc_cmds));\n}\n'})}),"\n",(0,_.jsx)(e.h5,{id:"\u521d\u59cb\u5316-3",children:"\u521d\u59cb\u5316"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u603b\u56de\u8c03\u7ed3\u6784\u4f53\u662f btmg_callback_t\uff0c\u5148\u8bbe\u7f6e spp client \u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_core_init \u521d\u59cb\u5316 bt_manager;"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_register_callback \u6ce8\u518c\u6b65\u9aa4 1 \u8bbe\u7f6e\u597d\u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_set_profile(BTMG_SPP_CLIENT) \u4f7f\u80fd\u84dd\u7259 Profile\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_adapter_enable(true) \u4f7f\u80fd\u84dd\u7259\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u84dd\u7259\u4f7f\u80fd\u6210\u529f\u540e\u89e6\u53d1 state_cb\uff0c\u53c2\u8003 btcli_adapter_status_cb\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_name\uff0c\u8bbe\u7f6e\u84dd\u7259\u540d\u79f0\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_io_capability\uff0c\u8bbe\u7f6e io_capability \u80fd\u529b\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_scanmode\uff0c\u8bbe\u7f6e\u53d1\u73b0\u6a21\u5f0f\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u626b\u63cf\u8fde\u63a5-1",children:"\u626b\u63cf\u8fde\u63a5"}),"\n",(0,_.jsx)(e.p,{children:"\u521d\u59cb\u5316\u5b8c\u6210\u540e\u53ef\u4ee5\u53d1\u8d77\u626b\u63cf\u8fde\u63a5"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u626b\u63cf\u63a5\u53e3\u4f7f\u7528 btmg_adapter_start_scan\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u626b\u63cf\u5230\u76ee\u6807\u8bbe\u5907\u540e\uff0c\u5148\u4f7f\u7528btmg_adapter_stop_scan\u505c\u6b62\u626b\u63cf\uff0c\u518d\u4f7f\u7528btmg_sppc_connect\u53d1\u8d77\u8fde\u63a5\uff1b\u8fde\u63a5\u72b6\u6001\u901a\u8fc7\u56de\u8c03\u51fd\u6570 btmg_sppc_cb.conn_state_cb \u4e0a\u62a5\u3002"}),"\n",(0,_.jsx)(e.li,{children:"\u5982\u679c\u9700\u8981\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\u4f7f\u7528 btmg_sppc_disconnect\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u6570\u636e\u6536\u53d1",children:"\u6570\u636e\u6536\u53d1"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u901a\u8fc7 btmg_sppc_write \u53d1\u9001\u6570\u636e\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5982\u679c\u5bf9\u7aef\u56de\u590d\u6570\u636e\uff0c\u4f1a\u901a\u8fc7 btmg_sppc_cb.recvdata_cb \u56de\u8c03\u3002"}),"\n"]}),"\n",(0,_.jsx)(e.h3,{id:"spp-server-\u5f00\u53d1",children:"SPP Server \u5f00\u53d1"}),"\n",(0,_.jsx)(e.h4,{id:"spp-server-api",children:"SPP Server API"}),"\n",(0,_.jsxs)(e.table,{children:[(0,_.jsx)(e.thead,{children:(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"API \u63a5\u53e3"}),(0,_.jsx)(e.th,{children:"\u8bf4\u660e"})]})}),(0,_.jsxs)(e.tbody,{children:[(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_spps_start"}),(0,_.jsx)(e.td,{children:"\u6307\u5b9a Server Channel \u542f\u52a8 SPP server"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_spps_stop"}),(0,_.jsx)(e.td,{children:"\u505c\u6b62 SPP server"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_spps_write"}),(0,_.jsx)(e.td,{children:"\u53d1\u9001\u6570\u636e\u7ed9\u5bf9\u7aef\u8bbe\u5907"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_spps_disconnect"}),(0,_.jsx)(e.td,{children:"\u65ad\u5f00\u8bbe\u5907\u8fde\u63a5"})]})]})]}),"\n",(0,_.jsx)(e.h4,{id:"spp-server-api-\u8c03\u7528\u6d41\u7a0b",children:"SPP Server API \u8c03\u7528\u6d41\u7a0b"}),"\n",(0,_.jsx)(e.p,{children:"HFP HF \u529f\u80fd\u7684\u4f7f\u7528\u793a\u4f8b"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:'#include <stdint.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n\n#include "cmd_util.h"\n#include "bt_manager.h"\n\nstatic enum cmd_status btcli_spps_help(char *cmd);\n\nvoid btcli_spps_conn_status_cb(const char *bd_addr, btmg_spp_connection_state_t state)\n{\n    if (state == BTMG_SPP_DISCONNECTED) {\n        CMD_DBG("spp server disconnected with device: %s\\n", bd_addr);\n    } else if (state == BTMG_SPP_CONNECTING) {\n        CMD_DBG("spp server connecting with device: %s\\n", bd_addr);\n    } else if (state == BTMG_SPP_CONNECTED) {\n        CMD_DBG("spp server connected with device: %s\\n", bd_addr);\n    } else if (state == BTMG_SPP_DISCONNECTING) {\n        CMD_DBG("spp server disconnecting with device: %s\\n", bd_addr);\n    } else if (state == BTMG_SPP_CONNECT_FAILED) {\n        CMD_DBG("spp server connect with device: %s failed!\\n", bd_addr);\n    } else if (state == BTMG_SPP_DISCONNEC_FAILED) {\n        CMD_DBG("spp server disconnect with device: %s failed!\\n", bd_addr);\n    }\n}\n\nvoid btcli_spps_recvdata_cb(const char *bd_addr, char *data, int data_len)\n{\n    char recv_data[data_len + 1];\n\n    memcpy(recv_data, data, data_len);\n    recv_data[data_len] = \'\\0\';\n    CMD_DBG("spps recv from dev:[%s][len=%d][data:%s]\\n", bd_addr, data_len,\n            recv_data);\n}\n\n/* btcli spps start <scn> */\nstatic enum cmd_status btcli_spps_start(char *cmd)\n{\n    int argc;\n    int scn = 0;\n    char *argv[1];\n    argc = cmd_parse_argv(cmd, argv, 1);\n\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    scn = cmd_atoi(argv[0]);\n\n    if (btmg_spps_start(scn) != BT_OK) {\n        CMD_ERR("spps start fail\\n");\n    }\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli spps stop */\nstatic enum cmd_status btcli_spps_stop(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    argc = cmd_parse_argv(cmd, argv, 1);\n\n    if (argc > 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_spps_stop();\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli spps disconnect <device mac> */\nstatic enum cmd_status btcli_spps_disconnect(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    argc = cmd_parse_argv(cmd, argv, 1);\n\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_spps_disconnect(argv[0]);\n\n    return CMD_STATUS_OK;\n}\n\n/* btcli spps write <data>*/\nstatic enum cmd_status btcli_spps_write(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    argc = cmd_parse_argv(cmd, argv, 1);\n\n    if (argc != 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_spps_write(argv[0], strlen(argv[0]));\n\n    return CMD_STATUS_OK;\n}\n\nstatic const struct cmd_data spps_cmds[] = {\n    { "start",      btcli_spps_start,      CMD_DESC("<scn>")},\n    { "stop",       btcli_spps_stop,       CMD_DESC("No parameters")},\n    { "disconnect", btcli_spps_disconnect, CMD_DESC("<device mac>")},\n    { "write",      btcli_spps_write,      CMD_DESC("<data>")},\n    { "help",       btcli_spps_help,       CMD_DESC(CMD_HELP_DESC)},\n};\n\n/* btcli spps help */\nstatic enum cmd_status btcli_spps_help(char *cmd)\n{\n    return cmd_help_exec(spps_cmds, cmd_nitems(spps_cmds), 10);\n}\n\nenum cmd_status btcli_spps(char *cmd)\n{\n    return cmd_exec(cmd, spps_cmds, cmd_nitems(spps_cmds));\n}\n'})}),"\n",(0,_.jsx)(e.h5,{id:"\u521d\u59cb\u5316-4",children:"\u521d\u59cb\u5316"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u603b\u56de\u8c03\u7ed3\u6784\u4f53\u662f btmg_callback_t\uff0c\u8bbe\u7f6e spp server \u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_core_init \u521d\u59cb\u5316 bt_manager;"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_register_callback \u6ce8\u518c\u6b65\u9aa4 1 \u8bbe\u7f6e\u597d\u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_set_profile(BTMG_SPP_SERVER) \u4f7f\u80fd\u84dd\u7259 Profile\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_adapter_enable(true) \u4f7f\u80fd\u84dd\u7259\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u84dd\u7259\u4f7f\u80fd\u6210\u529f\u540e\u89e6\u53d1 state_cb\uff0c\u53c2\u8003 btcli_adapter_status_cb\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_name\uff0c\u8bbe\u7f6e\u84dd\u7259\u540d\u79f0\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_io_capability\uff0c\u8bbe\u7f6e io_capability \u80fd\u529b\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_adapter_set_scanmode\uff0c\u8bbe\u7f6e\u53d1\u73b0\u6a21\u5f0f\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728 state_cb \u4e2d\u8c03\u7528 btmg_spps_start \u6307\u5b9a Channel \u628a SPP Server \u771f\u6b63\u542f\u52a8\u8d77\u6765\u3002"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u8fde\u63a5",children:"\u8fde\u63a5"}),"\n",(0,_.jsx)(e.p,{children:"\u5b8c\u6210\u4ee5\u4e0a\u521d\u59cb\u5316\u540e\uff0c\u624b\u673a\u7b49 SPP Client \u8bbe\u5907\u53ef\u4ee5\u641c\u7d22\u5e76\u53d1\u8d77\u8fde\u63a5\u3002\u8fde\u63a5\u72b6\u6001\u53ef\u4ee5\u901a\u8fc7btmg_spps_cb.conn_state_cb \u83b7\u53d6\u3002"}),"\n",(0,_.jsx)(e.p,{children:"\u5982\u9700\u4e3b\u52a8\u65ad\u5f00\uff0c\u8bf7\u4f7f\u7528 btmg_spps_disconnect \u63a5\u53e3\u3002"}),"\n",(0,_.jsx)(e.h5,{id:"\u6570\u636e\u6536\u53d1-1",children:"\u6570\u636e\u6536\u53d1"}),"\n",(0,_.jsx)(e.p,{children:"\u8bbe\u5907\u8fde\u63a5\u6210\u529f\u540e\uff0c\u53ef\u8fdb\u884c\u6570\u636e\u53d1\u9001\u548c\u63a5\u6536\uff1a"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u901a\u8fc7 btmg_spps_write \u53d1\u9001\u6570\u636e\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u901a\u8fc7 btmg_spps_cb.recvdata_cb \u56de\u8c03\u63a5\u6536\u5bf9\u65b9\u6570\u636e\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u53cd\u521d\u59cb\u5316-2",children:"\u53cd\u521d\u59cb\u5316"}),"\n",(0,_.jsx)(e.p,{children:"\u53cd\u521d\u59cb\u5316\u53c2\u8003 btcli_deinit\uff0c\u4e3b\u8981\u662f\u4ee5\u4e0b\u51fd\u6570\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"btmg_adapter_enable(false);\nbtmg_core_deinit();\nbtmg_unregister_callback(void);\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u9700\u8981\u6ce8\u610f\u5bf9\u4e8e SPP Server\uff0c\u9700\u8981\u5148\u8c03\u7528 btmg_spps_stop \u518d\u8fdb\u884c\u53cd\u521d\u59cb\u5316\uff0c\u5426\u5219\u4e0b\u4e00\u6b21\u542f\u52a8 SPP Server \u4f1a\u6709\u5f02\u5e38\u548c\u5185\u5b58\u6cc4\u6f0f\u3002"}),"\n",(0,_.jsx)(e.h2,{id:"ble-\u5f00\u53d1\u4ecb\u7ecd",children:"BLE \u5f00\u53d1\u4ecb\u7ecd"}),"\n",(0,_.jsx)(e.p,{children:"BLE \u6839\u636e\u4ea4\u4e92\u884c\u4e3a\u5212\u5206\u4e3a Central \u4e0e Peripheral \u4e24\u4e2a\u89d2\u8272\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5ba2\u6237\u7aef\u2011\u670d\u52a1\u7aef\u7ed3\u6784\u3002"}),"\n",(0,_.jsxs)(e.ul,{children:["\n",(0,_.jsx)(e.li,{children:"Central \uff08\u4e2d\u5fc3\u8bbe\u5907\uff09\uff1a\u4f5c\u4e3a\u5ba2\u6237\u7aef\uff0c\u4e00\u822c\u9700\u8981\u914d\u5408 BLE \u626b\u63cf\uff0c\u4e3b\u52a8\u8fde\u4e0a Perpheral \u8bbe\u5907\uff0c\u8fdb\u884c\u6570\u636e\u4ea4\u4e92\u3002\u4ece\u84dd\u7259 Profile \u7684\u89d2\u5ea6\u79f0\u4e3a GATT Client\u3002\u4f8b\u5982\uff1a\u624b\u673a\u4e00\u822c\u4f1a\u4f5c\u4e3a Central \u8bbe\u5907\u4f7f\u7528\u3002"}),"\n",(0,_.jsx)(e.li,{children:"Peripheral\uff08\u5916\u56f4\u8bbe\u5907\uff09\uff1a\u4f5c\u4e3a\u670d\u52a1\u7aef\uff0c\u4e00\u822c\u9700\u8981\u5411\u5916\u5e7f\u64ad\u6570\u636e\u5305\uff0c\u8ba9 Central \u53ef\u4ee5\u626b\u63cf\u5230\u3002\u5b83\u5305\u542b\u4e00\u4e2a\u6216\u8005\u591a\u4e2a Service\uff0c\u4ece\u84dd\u7259 Profile \u7684\u89d2\u5ea6\u79f0\u4e3a GATT Server\u3002\u4f8b\u5982: \u8bbe\u5907\u4f7f\u7528 BLE \u914d\u7f51\u4f5c\u4e3a Peripheral \u8bbe\u5907\u3002"}),"\n"]}),"\n",(0,_.jsx)(e.h3,{id:"ble-\u57fa\u7840\u529f\u80fd",children:"BLE \u57fa\u7840\u529f\u80fd"}),"\n",(0,_.jsx)(e.p,{children:"GATT Server \u548c GATT Client \u7684\u5f00\u53d1\u57fa\u4e8e BLE \u7684\u57fa\u7840 API\uff0c\u6bd4\u5982\u626b\u63cf\u3001\u8fde\u63a5\u3001\u5e7f\u64ad\u7b49\u529f\u80fd\u3002\u8bbe\u5907\u5efa\u7acb\u8d77\u8fde\u63a5\u540e\u624d\u80fd\u901a\u8fc7 GATT \u6570\u636e\u4ea4\u4e92\u3002\u672c\u6587\u6863\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u4e86\u89e3\u5728\u5f00\u53d1 GATT Server \u6216\u8005 GATTClient \u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u4f7f\u7528\u5230\u54ea\u4e9b BLE \u57fa\u7840 API\uff0c\u4f1a\u5c06 BLE \u57fa\u7840 API \u7684\u8bf4\u660e\u9644\u52a0\u5728\u5177\u4f53\u7684\u529f\u80fd API \u8bf4\u660e\u4e2d\u3002"}),"\n",(0,_.jsx)(e.h3,{id:"gatt-server",children:"GATT Server"}),"\n",(0,_.jsx)(e.h4,{id:"gatt-server-api",children:"GATT Server API"}),"\n",(0,_.jsx)(e.p,{children:"\u5217\u51fa\u5f00\u53d1 GATT Server \u529f\u80fd\u6240\u9700\u7684 API\uff0c\u5305\u542b BLE \u57fa\u7840\u63a5\u53e3"}),"\n",(0,_.jsxs)(e.table,{children:[(0,_.jsx)(e.thead,{children:(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"API \u63a5\u53e3"}),(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"\u8bf4\u660e"})]})}),(0,_.jsxs)(e.tbody,{children:[(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gatt_attr_create"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u521b\u5efa GATT Database"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gatt_attr_destory"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u9500\u6bc1 GATT Database"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gatt_attr_primary_service"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5f80 Database \u4e2d\u6dfb\u52a0 service"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gatt_attr_characteristic"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5f80 Database \u4e2d\u6dfb\u52a0 characteristic"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gatt_attr_ccc"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5f80 Database \u4e2d\u6dfb\u52a0 ccc"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gatt_register_service"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u628a\u6784\u5efa\u597d\u7684 service \u6ce8\u518c\u5230\u534f\u8bae\u6808"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gatt_unregister_service"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u6ce8\u9500\u5df2\u6ce8\u518c\u7684 service"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gatt_get_db"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u904d\u5386\u672c\u5730\u7684 Database"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gatts_notify"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u9001 notify"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gatts_indicate"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u9001 indicate"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_set_name"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e\u672c\u5730 ble \u540d\u5b57"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_get_name"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u672c\u5730 ble \u540d\u5b57"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_enable_adv"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u6253\u5f00\u6216\u8005\u5173\u95ed\u5e7f\u64ad\uff1b\u6253\u5f00\u5e7f\u64ad\u4e4b\u524d\u5148\u8bbe\u7f6e\u5e7f\u64ad\u7684\u53c2\u6570\u548c\u5185\u5bb9"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_set_adv_param"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e\u5e7f\u64ad\u53c2\u6570\uff0c\u5982\u5e7f\u64ad\u7684\u95f4\u9694\uff0c\u5e7f\u64ad\u7684\u7c7b\u578b\u7b49"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_set_adv_scan_rsp_data"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e\u5e7f\u64ad\u6570\u636e\u5185\u5bb9\uff1a\u4f8b\u5982 UUID\u3001BLE \u8bbe\u5907\u540d\u79f0\u7b49\uff1b\u8bbe\u7f6e\u626b\u63cf\u54cd\u5e94\u6570\u636e"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_whitelist_add"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u6dfb\u52a0\u767d\u540d\u5355\uff0c\u6ce8\u610f\u767d\u540d\u5355\u4fdd\u5b58\u5728 controller \u4e2d\uff1b\u901a\u8fc7\u767d\u540d\u5355\uff0c\u53ef\u4ee5\u53ea\u5141\u8bb8\u7279\u5b9a\u7684\u84dd\u7259\u8bbe\u5907\uff08\u767d\u540d\u5355\u4e2d\u5217\u51fa\u7684\uff09\u626b\u63cf\uff08Scan\uff09\u3001\u8fde\u63a5\uff08connect\uff09"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_white_list_remove"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5c06\u6307\u5b9a\u8bbe\u5907\u4ece controller \u4e2d\u7684\u767d\u540d\u5355\u4e2d\u6e05\u9664"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_whitelist_clear"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5c06 controller \u4e2d\u7684\u767d\u540d\u5355\u6e05\u7a7a"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_get_connected_num"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u5df2\u8fde\u63a5\u8bbe\u5907\u6570\u91cf"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_get_connected_list"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u5df2\u8fde\u63a5\u8bbe\u5907\u5217\u8868"})]})]})]}),"\n",(0,_.jsx)(e.h4,{id:"gatt-server-api-\u8c03\u7528\u6d41\u7a0b",children:"GATT Server API \u8c03\u7528\u6d41\u7a0b"}),"\n",(0,_.jsx)(e.p,{children:"GATT Server \u529f\u80fd\u7684\u4f7f\u7528\u793a\u4f8b"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:'#include "cmd_util.h"\n#include "ctype.h"\n#include <bt_manager.h>\n\nstatic enum cmd_status btcli_ble_help(char *cmd);\n\n#define REASON_TO_STR(def)                                                                         \\\n    case BTMG_BLE_##def:                                                                           \\\n        return #def\n\nstatic inline char *btcli_le_disconect_reason_to_str(gattc_disconnect_reason_t reason)\n{\n    switch (reason) {\n        REASON_TO_STR(STATUS_CODE_SUCCESS);\n        REASON_TO_STR(AUTHENTICATION_FAILURE);\n        REASON_TO_STR(CONNECTION_TIMEOUT);\n        REASON_TO_STR(REMOTE_USER_TERMINATED);\n        REASON_TO_STR(LOCAL_HOST_TERMINATED);\n        REASON_TO_STR(LMP_RESPONSE_TIMEOUT);\n        REASON_TO_STR(FAILED_TO_BE_ESTABLISHED);\n        REASON_TO_STR(UNKNOWN_OTHER_ERROR);\n    default:\n        return "UNKNOWN_OTHER_ERROR";\n    }\n}\n\nstatic int btcli_addr_from_str(const char *str, btmg_addr_t *addr)\n{\n    int i, j;\n    uint8_t tmp;\n\n    if (strlen(str) != 17U) {\n        return -1;\n    }\n    for (i = 5, j = 1; *str != \'\\0\'; str++, j++) {\n        if (!(j % 3) && (*str != \':\')) {\n            return -1;\n        } else if (*str == \':\') {\n            i--;\n            continue;\n        }\n        addr->val[6 - i] = addr->val[6 - i] << 4;\n        if (char2hex(*str, &tmp) < 0) {\n            return -1;\n        }\n        addr->val[6 - i] |= tmp;\n    }\n    return 0;\n}\n\nstatic int btcli_le_addr_from_str(const char *str, const char *type, btmg_le_addr_t *addr)\n{\n    int err;\n\n    err = btcli_addr_from_str(str, &addr->addr);\n    if (err < 0) {\n        return err;\n    }\n\n    if (!strcmp(type, "public") || !strcmp(type, "(public)")) {\n        addr->type = BTMG_LE_PUBLIC_ADDRESS;\n    } else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {\n        addr->type = BTMG_LE_RANDOM_ADDRESS;\n    } else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {\n        addr->type = BTMG_LE_PUBLIC_ADDRESS_ID;\n    } else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {\n        addr->type = BTMG_LE_RANDOM_ADDRESS_ID;\n    } else {\n        return -1;\n    }\n\n    return 0;\n}\n\nstatic int btcli_le_addr_to_str(btmg_le_addr_t addr, char *str, int len)\n{\n    char type[10];\n\n    switch (addr.type) {\n    case BTMG_LE_RANDOM_ADDRESS:\n        strcpy(type, "random");\n        break;\n    case BTMG_LE_PUBLIC_ADDRESS:\n        strcpy(type, "public");\n        break;\n    case BTMG_LE_RANDOM_ADDRESS_ID:\n        strcpy(type, "random-id");\n        break;\n    case BTMG_LE_PUBLIC_ADDRESS_ID:\n        strcpy(type, "public-id");\n        break;\n    default:\n        snprintk(type, sizeof(type), "0x%02x", addr.type);\n        break;\n    }\n\n    return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)", addr.addr.val[0],\n                    addr.addr.val[1], addr.addr.val[2], addr.addr.val[3], addr.addr.val[4],\n                    addr.addr.val[5], type);\n}\n\nvoid btcli_ble_scan_cb(le_scan_cb_para_t *data)\n{\n    char addr[30];\n\n    btcli_le_addr_to_str(data->addr, addr, sizeof(addr));\n    CMD_DBG("[DEVICE]: %s, AD evt type %u, RSSI %i %s\\n", addr, data->adv_type, data->rssi, data->name);\n}\n\nvoid btcli_ble_connection_cb(le_connection_para_t *data)\n{\n    char addr[30];\n    btcli_le_addr_to_str(data->addr, addr, 30);\n\n    if (data->role == 0) {\n        if (data->status == LE_CONNECTED) {\n           CMD_DBG("gattc connect success,id=[%d] %s\\n", data->conn_id, addr);\n        } else if (data->status == LE_CONNECT_FAIL){\n           CMD_DBG("gattc connect failed,id=[%d] %s\\n", data->conn_id, addr);\n        } else if (data->status == LE_DISCONNECTED) {\n           CMD_DBG("gattc disconnected, reason= %s, id=[%d] %s\\n",\n                    btcli_le_disconect_reason_to_str(data->reason), data->conn_id, addr);\n        }\n    } else {\n        if (data->status == LE_CONNECTED) {\n           CMD_DBG("gatts connected,id=[%d] %s\\n", data->conn_id, addr);\n        } else if (data->status == LE_CONNECT_FAIL){\n           CMD_DBG("gatts connect failed,id=[%d] %s\\n", data->conn_id, addr);\n        } else if (data->status == LE_DISCONNECTED) {\n           CMD_DBG("gatts disconnected, reason[0x%02x]= %s, id=[%d] %s\\n",\n                    data->reason ,btcli_le_disconect_reason_to_str(data->reason), data->conn_id, addr);\n        }\n    }\n}\n\nenum cmd_status btcli_ble_scan(char *cmd)\n{\n    int argc;\n    char *argv[5];\n    int err;\n    int i = 0;\n\n    argc = cmd_parse_argv(cmd, argv, 5);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_le_scan_param_t scan_param = { 0 };\n    {\n        scan_param.scan_type = LE_SCAN_TYPE_ACTIVE;\n        scan_param.scan_interval = 0x0320;\n        scan_param.scan_window = 0x0190;\n        scan_param.filter_duplicate = LE_SCAN_DUPLICATE_DISABLE;\n        scan_param.filter_policy = LE_SCAN_FILTER_POLICY_ALLOW_ALL;\n        scan_param.timeout = 0;\n    }\n\n    while (i < argc) {\n        if (!cmd_strcmp(argv[i], "on")) {\n            CMD_DBG("Use default scan parameters\\n");\n        } else if (!cmd_strcmp(argv[i], "off")) {\n            err = btmg_le_scan_stop();\n            if (err) {\n                CMD_ERR("LE scan stop failed\\n");\n                return err;\n            } else {\n                CMD_DBG("LE scan stopped successfully\\n");\n            }\n            return CMD_STATUS_OK;\n        } else if (!cmd_strcmp(argv[i], "passive")) {\n            scan_param.scan_type = LE_SCAN_TYPE_PASSIVE;\n        } else if (!cmd_strcmp(argv[i], "dups")) {\n            scan_param.filter_duplicate = LE_SCAN_DUPLICATE_DISABLE;\n        } else if (!cmd_strcmp(argv[i], "nodups")) {\n            scan_param.filter_duplicate = LE_SCAN_DUPLICATE_ENABLE;\n        } else if (!cmd_strcmp(argv[i], "wl")) {\n            scan_param.filter_policy = LE_SCAN_FILTER_POLICY_ONLY_WLIST;\n        } else if (!cmd_strcmp(argv[i], "active")) {\n            scan_param.scan_type = LE_SCAN_TYPE_ACTIVE;\n        } else if (!cmd_strcmp(argv[i], "timeout")) {\n            scan_param.timeout = strtoul(argv[i], NULL, 16);\n        } else if (!cmd_strncmp(argv[i], "int=0x", 4)) {\n            uint32_t num;\n            int cnt = cmd_sscanf(argv[i] + 4, "%x", &num);\n            if (cnt != 1) {\n                CMD_ERR("invalid param %s\\n", argv[i] + 4);\n                return CMD_STATUS_INVALID_ARG;\n            }\n            scan_param.scan_interval = num;\n            CMD_DBG("scan interval 0x%x\\n", scan_param.scan_interval);\n        } else if (!cmd_strncmp(argv[i], "win=0x", 4)) {\n            uint32_t num;\n            int cnt = cmd_sscanf(argv[i] + 4, "%x", &num);\n            if (cnt != 1) {\n                CMD_ERR("invalid param %s\\n", argv[i] + 4);\n                return CMD_STATUS_INVALID_ARG;\n            }\n            scan_param.scan_window = num;\n            CMD_DBG("scan window 0x%x\\n", scan_param.scan_window);\n        } else {\n            CMD_ERR("invalid param %s\\n", argv[i]);\n            return CMD_STATUS_INVALID_ARG;\n        }\n        i++;\n    }\n    err = btmg_le_scan_start(&scan_param);\n    if (err) {\n        CMD_ERR("LE scan start failed\\n");\n        return err;\n    } else {\n        CMD_DBG("LE scan started!\\n");\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_ble_adv(char *cmd)\n{\n    int argc;\n    char *argv[5];\n    int i = 0;\n    int err;\n    int start_adv = 0;\n    btmg_adv_scan_rsp_data_t btmg_adv_data = { 0 };\n    btmg_adv_scan_rsp_data_t btmg_scan_data = { 0 };\n\n    argc = cmd_parse_argv(cmd, argv, 5);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    while (i < argc) {\n        if (!cmd_strcmp(argv[i], "on")) {\n            start_adv = 1;\n        } else if (!cmd_strcmp(argv[i], "off")) {\n            err = btmg_le_enable_adv(0);\n            if (err) {\n                CMD_ERR("Disable Advertising failed,(err %d)\\n");\n                return err;\n            } else {\n                CMD_DBG("Advertising stopped\\n");\n            }\n            return 0;\n        } else if (!cmd_strncmp(argv[i], "adv=", 4)) {\n            btmg_adv_data.data_len = hex2bin(argv[i] + 4, strlen(argv[i]) - 4, btmg_adv_data.data,\n                                             sizeof(btmg_adv_data.data));\n            if (btmg_adv_data.data_len == 0) {\n                CMD_ERR("No data set\\n");\n                return CMD_STATUS_INVALID_ARG;\n            }\n        } else if (!cmd_strncmp(argv[i], "scan=", 5)) {\n            btmg_scan_data.data_len = hex2bin(argv[i] + 5, strlen(argv[i]) - 5, btmg_scan_data.data,\n                                              sizeof(btmg_scan_data.data));\n            if (btmg_scan_data.data_len == 0) {\n                CMD_ERR("No data set\\n");\n                return CMD_STATUS_INVALID_ARG;\n            }\n        }\n        i++;\n    }\n    btmg_le_set_adv_scan_rsp_data(&btmg_adv_data, &btmg_scan_data);\n    if (start_adv = 1) {\n        btmg_le_set_adv_param(NULL);\n        err = btmg_le_enable_adv(true);\n        CMD_DBG("Advertising started\\n");\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_ble_name(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    int err;\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n\n    if (argc < 1) {\n        CMD_DBG("Bluetooth Local ble Name: %s\\n", btmg_le_get_name());\n        return CMD_STATUS_OK;\n    }\n\n    err = btmg_le_set_name(argv[0]);\n    if (err) {\n        CMD_DBG("Unable to set ble name %s (err %d)\\n", argv[0], err);\n        return CMD_STATUS_FAIL;\n    }\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_ble_connect(char *cmd)\n{\n    int argc;\n    char *argv[5];\n    int err;\n    bt_addr_le_t addr;\n\n    argc = cmd_parse_argv(cmd, argv, 5);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    err = bt_addr_le_from_str(argv[0], argv[1], &addr);\n    if (err) {\n        CMD_ERR("Invalid peer address (err %d)\\n", err);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    btmg_le_addr_t peer;\n    peer.type = BTMG_LE_RANDOM_ADDRESS;\n\n    btmg_le_conn_param_t conn_param;\n    conn_param.min_conn_interval = 0x0010;\n    conn_param.max_conn_interval = 0x0020;\n    conn_param.slave_latency = 0x0000;\n    conn_param.conn_sup_timeout = 0x0050;\n    memcpy(peer.addr.val, addr.a.val, 6);\n\n    if (addr.type == BT_ADDR_LE_PUBLIC) {\n        peer.type = BTMG_LE_PUBLIC_ADDRESS;\n    } else if (addr.type == BT_ADDR_LE_RANDOM) {\n        peer.type = BTMG_LE_RANDOM_ADDRESS;\n    } else {\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    int i = 2;\n    while (i < argc) {\n        if (!cmd_strncmp(argv[i], "lat=", 4)) {\n            uint32_t num;\n            int cnt = cmd_sscanf(argv[i] + 4, "%x", &num);\n            if (cnt != 1) {\n                CMD_ERR("invalid param %s\\n", argv[i] + 4);\n                return CMD_STATUS_INVALID_ARG;\n            }\n            conn_param.slave_latency = (uint16_t)(num);\n            CMD_DBG("conn latency 0x%x\\n", conn_param.slave_latency);\n        } else if (!cmd_strncmp(argv[i], "to=", 3)) {\n            uint32_t num;\n            int cnt = cmd_sscanf(argv[i] + 3, "%x", &num);\n            if (cnt != 1) {\n                CMD_ERR("invalid param %s\\n", argv[i] + 4);\n                return CMD_STATUS_INVALID_ARG;\n            }\n            conn_param.conn_sup_timeout = (uint16_t)(num);\n            CMD_DBG("conn timeout 0x%x\\n", conn_param.conn_sup_timeout);\n        } else if (!cmd_strncmp(argv[i], "min=", 4)) {\n            uint32_t num;\n            int cnt = cmd_sscanf(argv[i] + 4, "%x", &num);\n            if (cnt != 1) {\n                CMD_ERR("invalid param %s\\n", argv[i] + 4);\n                return CMD_STATUS_INVALID_ARG;\n            }\n            conn_param.min_conn_interval = (uint16_t)(num);\n            CMD_DBG("conn interval_min 0x%x\\n", conn_param.min_conn_interval);\n        } else if (!cmd_strncmp(argv[i], "max=", 4)) {\n            uint32_t num;\n            int cnt = cmd_sscanf(argv[i] + 4, "%x", &num);\n            if (cnt != 1) {\n                CMD_ERR("invalid param %s\\n", argv[i] + 4);\n                return CMD_STATUS_INVALID_ARG;\n            }\n            conn_param.max_conn_interval = (uint16_t)(num);\n            CMD_DBG("conn interval_max 0x%x\\n", conn_param.max_conn_interval);\n        } else {\n            CMD_ERR("invalid param %s\\n", argv[i]);\n            return CMD_STATUS_INVALID_ARG;\n        }\n        i++;\n    }\n    err = btmg_le_connect(&peer, &conn_param);\n    if (err) {\n        CMD_ERR("ble connect failed\\n");\n        return -1;\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_ble_disconnect(char *cmd)\n{\n    int argc;\n    char *argv[3];\n    int err;\n    uint8_t default_conn_id = 0;\n\n    argc = cmd_parse_argv(cmd, argv, 3);\n\n    if (default_conn_id >= 0 && argc < 3) {\n        err = btmg_le_disconnect(default_conn_id, 0);\n    } else {\n        // bt_addr_le_t addr;\n        // if (argc < 3) {\n        //     shell_help(shell);\n        //     return SHELL_CMD_HELP_PRINTED;\n        // }\n        // err = bt_addr_le_from_str(argv[1], argv[2], &addr);\n        // if (err) {\n        //     shell_error(shell, "Invalid peer address (err %d)", err);\n        //     return err;\n        // }\n        // err = btmg_le_disconnect(0, 0);\n    }\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_ble_connections(char *cmd)\n{\n\n    char addr[30];\n    int dev_num = 0;\n\n    btmg_le_get_connected_num(&dev_num);\n    gattc_connected_list_para_t param[dev_num];\n    btmg_le_get_connected_list(param);\n\n    for (int i = 0; i < dev_num; i++) {\n        btcli_le_addr_to_str(param[i].addr, addr, 30);\n        CMD_DBG("DEVICE[%s],conn_id[%d]\\n", addr, param[i].conn_id);\n    }\n    return CMD_STATUS_OK;\n}\n\n#if defined(CONFIG_BT_WHITELIST)\nenum cmd_status btcli_ble_wl_add(char *cmd)\n{\n    int argc;\n    char *argv[2];\n    int err;\n    btmg_le_addr_t addr;\n\n    argc = cmd_parse_argv(cmd, argv, 2);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    err = btcli_le_addr_from_str(argv[0], argv[1], &addr);\n    if (err) {\n        CMD_ERR("Invalid peer address (err %d)\\n", err);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    err = btmg_le_whitelist_add(&addr);\n    if (err) {\n        CMD_ERR("Add to whitelist failed (err %d)\\n", err);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_ble_wl_rem(char *cmd)\n{\n    int argc;\n    char *argv[2];\n    int err;\n    btmg_le_addr_t addr;\n\n    argc = cmd_parse_argv(cmd, argv, 2);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    err = btcli_le_addr_from_str(argv[0], argv[1], &addr);\n    if (err) {\n        CMD_ERR("Invalid peer address (err %d)\\n", err);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    err = btmg_le_white_list_remove(&addr);\n    if (err) {\n        CMD_ERR("Remove from whitelist failed (err %d)\\n", err);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_ble_wl_clear(char *cmd)\n{\n    int err;\n\n    err = btmg_le_whitelist_clear();\n    if (err) {\n        CMD_ERR("Clearing whitelist failed (err %d)\\n", err);\n        return CMD_STATUS_FAIL;\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status blecli_ble_wl_connect(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    int err;\n    btmg_le_conn_param_t conn_param;\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    conn_param.min_conn_interval = 0x0018;\n    conn_param.max_conn_interval = 0x0028;\n    conn_param.slave_latency = 0;\n    conn_param.conn_sup_timeout = 400;\n\n    if (!strcmp(argv[0], "on")) {\n        err = btmg_le_connect_auto_start(&conn_param);\n        if (err) {\n            CMD_ERR("Auto connect failed (err %d)\\n", err);\n            return CMD_STATUS_OK;\n        }\n    } else if (!strcmp(argv[0], "off")) {\n        err = btmg_le_connect_auto_stop();\n        if (err) {\n            CMD_ERR("Auto connect stop failed (err %d)\\n", err);\n            return CMD_STATUS_OK;\n        }\n    }\n\n    return CMD_STATUS_OK;\n}\n#else //!defined(CONFIG_BT_WHITELIST)\nenum cmd_status btcli_ble_auto_conn(char *cmd)\n{\n    int argc;\n    char *argv[3];\n    int err;\n    btmg_le_addr_t addr;\n    btmg_le_conn_param_t conn_param;\n\n    argc = cmd_parse_argv(cmd, argv, 3);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    conn_param.min_conn_interval = 0x0018;\n    conn_param.max_conn_interval = 0x0028;\n    conn_param.slave_latency = 0;\n    conn_param.conn_sup_timeout = 400;\n\n    err = btmg_addr_le_from_str(argv[0], argv[1], &addr);\n    if (err) {\n        CMD_ERR("Invalid peer address (err %d)\\n", err);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if (argc < 4) {\n        return btmg_le_set_auto_connect(&addr, &conn_param);\n    } else if (!strcmp(argv[2], "on")) {\n        return btmg_le_set_auto_connect(&addr, &conn_param);\n    } else if (!strcmp(argv[2], "off")) {\n        return btmg_le_set_auto_connect(&addr, NULL);\n    }\n}\n#endif\n\n#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)\nenum cmd_status btcli_ble_get_sec(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    int conn_id = 0;\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    conn_id = strtoul(argv[0], NULL, 16);\n\n    int sec = btmg_le_get_security(conn_id);\n    CMD_ERR("conn_id=%d, security=%d\\n", conn_id, sec);\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_ble_set_sec(char *cmd)\n{\n    int argc;\n    char *argv[2];\n    int sec, ret, conn_id = 0;\n\n    argc = cmd_parse_argv(cmd, argv, 2);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    sec = strtoul(argv[0], NULL, 16);\n    if (argc == 2) {\n        conn_id = strtoul(argv[1], NULL, 16);\n    }\n    ret = btmg_le_set_security(conn_id, sec);\n    if (ret) {\n        CMD_ERR("conn_id=%d, security=%d failed\\n", conn_id, sec);\n        return CMD_STATUS_OK;\n    }\n    CMD_ERR("conn_id=%d, security=%d success\\n", conn_id, sec);\n\n    return CMD_STATUS_OK;\n}\n#endif\n\nstatic const struct cmd_data ble_cmds[] = {\n    { "scan",           btcli_ble_scan,          CMD_DESC("<on/off/passive> [int=0x0100] [win=0x0100] [silent]")},\n    { "adv",            btcli_ble_adv,           CMD_DESC("<on/off> [adv=020106] [scan=]")},\n    { "name",           btcli_ble_name,          CMD_DESC("[name]")},\n    { "connect",        btcli_ble_connect,       CMD_DESC("<address: XX:XX:XX:XX:XX:XX> <type: (public|random)> [min=] [max=] [to=]")},\n    { "disconnect",     btcli_ble_disconnect,    CMD_DESC("[none]")},\n    { "connections",    btcli_ble_connections,   CMD_DESC("[none]")},\n#if defined(CONFIG_BT_WHITELIST)\n    { "wl_add",         btcli_ble_wl_add,        CMD_DESC("<address: XX:XX:XX:XX:XX:XX> <type: (public|random)>")},\n    { "wl_rem",         btcli_ble_wl_rem,        CMD_DESC("<address: XX:XX:XX:XX:XX:XX> <type: (public|random)>")},\n    { "wl_clear",       btcli_ble_wl_clear,      CMD_DESC("[none]")},\n    { "wl_connect",     btcli_ble_connect,       CMD_DESC("<on, off>")},\n#else\n    { "auto_conn",      btcli_ble_auto_conn,     CMD_DESC("<address: XX:XX:XX:XX:XX:XX> <type: (public|random)> [value:on,off]")},\n#endif\n#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)\n    { "get_sec",        btcli_ble_get_sec,       CMD_DESC("[conn_id]")},\n    { "set_sec",        btcli_ble_set_sec,       CMD_DESC("<security level: >=1 > [conn_id]")},\n#endif\n    { "help",           btcli_ble_help,          CMD_DESC(CMD_HELP_DESC)},\n};\n\n/* btcli ble help */\nstatic enum cmd_status btcli_ble_help(char *cmd)\n{\n    return cmd_help_exec(ble_cmds, cmd_nitems(ble_cmds), 10);\n}\n\nenum cmd_status btcli_ble(char *cmd)\n{\n    return cmd_exec(cmd, ble_cmds, cmd_nitems(ble_cmds));\n}\n\n#include "cmd_util.h"\n#include "ctype.h"\n#include <bt_manager.h>\n\nstatic enum cmd_status btcli_gatt_help(char *cmd);\n\nstatic void btcli_print_chrc_props(uint8_t properties)\n{\n    printf("Properties: ");\n    if (properties & BT_GATT_CHRC_BROADCAST) {\n        printf("[bcast] ");\n    }\n    if (properties & BT_GATT_CHRC_READ) {\n        printf("[read] ");\n    }\n    if (properties & BT_GATT_CHRC_WRITE) {\n        printf("[write] ");\n    }\n    if (properties & BT_GATT_CHRC_WRITE_WITHOUT_RESP) {\n        printf("[write without rsp] ");\n    }\n    if (properties & BT_GATT_CHRC_NOTIFY) {\n        printf("[notify] ");\n    }\n    if (properties & BT_GATT_CHRC_INDICATE) {\n        printf("[indicate] ");\n    }\n    if (properties & BT_GATT_CHRC_AUTH) {\n        printf("[auth] ");\n    }\n    if (properties & BT_GATT_CHRC_EXT_PROP) {\n        printf("[ext prop] ");\n    }\n    printf("\\n");\n}\n\nstatic void btcli_uuid_to_str(btmg_uuid_t *uuid, char *str, size_t len)\n{\n    uint32_t tmp1, tmp5;\n    uint16_t tmp0, tmp2, tmp3, tmp4;\n\n    switch (uuid->type) {\n    case BTMG_UUID_16:\n        snprintk(str, len, "%04x", uuid->value.u16);\n        break;\n    case BTMG_UUID_32:\n        snprintk(str, len, "%08x", uuid->value.u32);\n        break;\n    case BTMG_UUID_128:\n        memcpy(&tmp0, &uuid->value.u128[0], sizeof(tmp0));\n        memcpy(&tmp1, &uuid->value.u128[2], sizeof(tmp1));\n        memcpy(&tmp2, &uuid->value.u128[6], sizeof(tmp2));\n        memcpy(&tmp3, &uuid->value.u128[8], sizeof(tmp3));\n        memcpy(&tmp4, &uuid->value.u128[10], sizeof(tmp4));\n        memcpy(&tmp5, &uuid->value.u128[12], sizeof(tmp5));\n\n        snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x", tmp5, tmp4, tmp3, tmp2, tmp1, tmp0);\n        break;\n    default:\n        memset(str, 0, len);\n        return;\n    }\n}\n\nvoid btcli_gattc_dis_att_cb(gattc_dis_cb_para_t *data)\n{\n    char uuid_str1[37];\n    char uuid_str2[37];\n\n    switch (data->type) {\n    case BTMG_DIS_PRIMARY_SERVER:\n    case BTMG_DIS_SECONDARY_SERVER:\n    case BTMG_DIS_INCLUDE_SERVER:\n        btcli_uuid_to_str(&(data->uuid), uuid_str1, sizeof(uuid_str1));\n        btcli_uuid_to_str(&(data->server_uuid), uuid_str2, sizeof(uuid_str2));\n        printf("start_handle [0x%04x]------------end_handle [0x%04x]\\n",\n                                    data->start_handle, data->end_handle);\n        printf("-------|--------------------------------------------\\n");\n        printf("0x%04x | Service declaration[%s] | %s\\n", data->start_handle, uuid_str1,\n            data->type == BTMG_DIS_PRIMARY_SERVER ? "PRIMARY_SERVER" : "SECONDARY_SERVER");\n        printf("0x%04x | Service uuid[%s]        | %s\\n", data->start_handle+1, uuid_str2,\n                !strcmp(uuid_str2, "1800") ?"Generic Access" :\n                (!strcmp(uuid_str2, "1801")? "Generic Attribute": "Unknow Service"));\n        printf("----------------------------------------------------\\n");\n        break;\n    case BTMG_DIS_CHARACTERISTIC:\n        btcli_uuid_to_str(&(data->uuid), uuid_str1, sizeof(uuid_str1));\n        btcli_uuid_to_str(&(data->char_uuid), uuid_str2, sizeof(uuid_str2));\n        printf("-------|--------------------------------------------\\n");\n        printf("0x%04x | Characteristic declaration[%s]\\n", data->char_handle, uuid_str1);\n        printf("0x%04x | Characteristic [%s]\\n", data->value_handle, uuid_str2);\n        if (data->properties & BT_GATT_CHRC_NOTIFY | data->properties & BT_GATT_CHRC_INDICATE) {\n            printf("0x%04x | CCCD[2902]\\n", data->value_handle+1);\n        }\n        btcli_print_chrc_props(data->properties);\n        break;\n    case BTMG_DIS_ATTRIBUTE:\n        btcli_uuid_to_str(&(data->uuid), uuid_str1, sizeof(uuid_str1));\n        printf("-------|--------------------------------------------\\n");\n        printf("0x%04x | Attribute uuid [%s]\\n", data->attr_handle, uuid_str1);\n        break;\n    default:\n        break;\n    }\n}\n\nvoid btcli_gattc_notify_indicate_cb(gattc_notify_indicate_cb_para_t *data)\n{\n    char recv_data[data->length + 1];\n    memcpy(recv_data, data->value, data->length);\n    recv_data[data->length] = \'\\0\';\n\n    CMD_DBG("subscribe recv [handle=0x%04X][len=%d][data:%s]\\n", data->value_handle,\n              data->length, recv_data);\n}\n\nvoid btcli_gattc_read_cb(gattc_read_cb_para_t *data)\n{\n    int i;\n\n    if (!data->success) {\n        CMD_DBG("gattc read failed:(0x%02x),handle[0x%04x]\\n", data->att_ecode, data->handle);\n        return;\n    }\n\n    printf("\\ngattc read handle[0x%04x],", data->handle);\n\n    if (data->length == 0) {\n        CMD_DBG(": 0 bytes\\n");\n        return;\n    }\n\n    printf(" [len=%d],value: ", data->length);\n\n    for (i = 0; i < data->length; i++)\n        printf("%02x ", data->value[i]);\n\n    printf("\\n");\n}\n\nvoid btcli_gattc_write_cb(gattc_write_cb_para_t *data)\n{\n    if (data->success) {\n        CMD_DBG("gattc write OK,handle[0x%04x]\\n", data->handle);\n    } else {\n        CMD_DBG("gattc write failed:(0x%02x), handle[0x%04x]\\n", data->att_ecode, data->handle);\n    }\n}\n\nvoid btcli_gatts_get_db_cb(gatts_get_db_t *data)\n{\n    char str[37];\n    char str2[37];\n\n    btcli_uuid_to_str(&(data->uuid), str, sizeof(str));\n    btcli_uuid_to_str(&(data->uuid_value), str2, sizeof(str2));\n    printf("[handle=0x%04X],[uuid=%s][uuid2=%s][perm=%d]\\n", data->attr_handle, str, str2,\n              data->perm);\n}\n\nvoid btcli_gatts_char_read_req_cb(gatts_char_read_req_t *data)\n{\n    char readdata[] = "read request received";\n\n    memcpy(data->out_data, readdata, sizeof(readdata));\n    data->out_len = sizeof(readdata);\n    CMD_DBG("receive char read: [conn_id=%d][handle=0x%04X],[data:%s]\\n", data->conn_id, data->attr_handle, readdata);\n}\n\nvoid btcli_gatts_char_write_req_cb(gatts_char_write_req_t *data)\n{\n    char recv_data[data->value_len + 1];\n    memcpy(recv_data, data->value, data->value_len);\n    recv_data[data->value_len] = \'\\0\';\n\n    CMD_DBG("receive char write: [conn_id=%d][handle=0x%04X][len=%d][value=%s]\\n", data->conn_id,\n              data->attr_handle, data->value_len,  recv_data);\n}\n\nvoid btcli_gatts_ccc_cfg_cb(gatts_ccc_cfg_t *data)\n{\n    if (data->value == 0) {\n        CMD_DBG("Notifications and indications disabled, characteristics handle:%#x\\n", data->attr_handle);\n    } else if (data->value == 1) {\n        CMD_DBG("Notifications enabled, characteristics handle:%#x\\n", data->attr_handle);\n    } else if (data->value == 2) {\n        CMD_DBG("Indications enabled, characteristics handle:%#x\\n", data->attr_handle);\n    }\n}\n\nenum cmd_status btcli_gattc_discover(char *cmd)\n{\n    int argc;\n    char *argv[2];\n    uint8_t conn_id = 0;\n    btmg_uuid_t *uuid = NULL;\n    int dis_tpye = 0;\n    uint16_t start_handle = 0x0001;\n    uint16_t end_handle = 0xFFFF;\n\n    argc = cmd_parse_argv(cmd, argv, 2);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    if (!cmd_strcmp(argv[0], "service")) {\n            dis_tpye = 1;\n    } else if (!cmd_strcmp(argv[0], "char")) {\n            dis_tpye = 2;\n    } else if (!cmd_strcmp(argv[0], "desc")) {\n            dis_tpye = 3;\n    }\n\n    if (argc == 2) {\n        conn_id = strtoul(argv[1], NULL, 16);\n    }\n\n    if (dis_tpye == 0) {\n        btmg_gattc_discover_all_services(conn_id, uuid, start_handle, end_handle);\n    } else if (dis_tpye == 1) {\n        btmg_gattc_discover_primary_services(conn_id, uuid, start_handle, end_handle);\n    } else if (dis_tpye == 2) {\n        btmg_gattc_discover_characteristic(conn_id);\n    } else if (dis_tpye == 3) {\n        btmg_gattc_discover_descriptor(conn_id);\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_gattc_write(char *cmd)\n{\n    int argc;\n    char *argv[4];\n    int err;\n    uint16_t handle, conn_id = 0;\n    size_t len = 0;\n    uint8_t gatt_write_buf[512] = { 0 };\n\n    argc = cmd_parse_argv(cmd, argv, 4);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    handle = strtoul(argv[0], NULL, 16);\n\n    if (argc > 2 && !cmd_strcmp(argv[2], "string")) {\n        len = MIN(strlen(argv[1]), sizeof(gatt_write_buf));\n        strncpy((char *)gatt_write_buf, argv[1], len);\n    } else {\n        len = hex2bin(argv[1], strlen(argv[1]), gatt_write_buf, sizeof(gatt_write_buf));\n        if (len == 0) {\n            CMD_ERR("No data set \\n");\n           return CMD_STATUS_INVALID_ARG;\n        }\n    }\n\n    if (argc == 4) {\n        conn_id = strtoul(argv[3], NULL, 16);\n    }\n\n    err = btmg_gattc_write(conn_id, handle, gatt_write_buf, len);\n\n    if (err) {\n        CMD_ERR("Write failed (err %d)\\n", err);\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_gattc_read(char *cmd)\n{\n    int argc;\n    char *argv[2];\n    int err;\n    uint16_t handle, conn_id = 0;\n\n    argc = cmd_parse_argv(cmd, argv, 2);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    handle = strtoul(argv[0], NULL, 16);\n\n    if (argc == 2) {\n        conn_id = strtoul(argv[1], NULL, 16);\n    }\n\n    err = btmg_gattc_read(conn_id, handle);\n\n    if (err) {\n        CMD_ERR("Read failed (err %d)\\n", err);\n    }\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_gattc_subscribe(char *cmd)\n{\n    int argc;\n    char *argv[2];\n    int err;\n    uint16_t handle, conn_id = 0;\n    bool is_indicate = false;\n\n    argc = cmd_parse_argv(cmd, argv, 2);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    handle = strtoul(argv[0], NULL, 16);\n    if (argc > 1) {\n        conn_id = strtoul(argv[1], NULL, 16);\n    }\n\n    btmg_gattc_subscribe(conn_id, handle);\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_gattc_unsubscribe(char *cmd)\n{\n    int argc;\n    char *argv[2];\n    int err;\n    uint16_t handle, conn_id = 0;\n\n    argc = cmd_parse_argv(cmd, argv, 2);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    handle = strtoul(argv[0], NULL, 16);\n    if (argc > 1) {\n        conn_id = strtoul(argv[1], NULL, 16);\n    }\n\n    err = btmg_gattc_unsubscribe(conn_id, handle);\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_gatts_show_db(char *cmd)\n{\n    btmg_gatt_get_db();\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_gatts_notify(char *cmd)\n{\n    int argc;\n    char *argv[4];\n    int err;\n    uint16_t handle, offset, conn_id = 0;\n    size_t len = 0;\n    uint8_t gatt_write_buf[1024] = { 0 };\n\n    argc = cmd_parse_argv(cmd, argv, 4);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    handle = strtoul(argv[0], NULL, 16);\n\n    if (argc >= 4 && !cmd_strcmp(argv[2], "string")) {\n        len = MIN(strlen(argv[1]), sizeof(gatt_write_buf));\n        strncpy((char *)gatt_write_buf, argv[1], len);\n        if (argc == 4) {\n            conn_id = strtoul(argv[3], NULL, 16);\n        }\n    } else {\n        len = hex2bin(argv[1], strlen(argv[1]), gatt_write_buf, sizeof(gatt_write_buf));\n        if (len == 0) {\n            CMD_ERR("No data set\\n");\n            return CMD_STATUS_INVALID_ARG;\n        }\n        if (argc == 3) {\n            conn_id = strtoul(argv[2], NULL, 16);\n        }\n    }\n    btmg_gatts_notify(conn_id, handle, gatt_write_buf, len);\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_gatts_indicate(char *cmd)\n{\n    int argc;\n    char *argv[4];\n    int err;\n    uint16_t handle, offset, conn_id = 0;\n    size_t len = 0;\n    uint8_t gatt_write_buf[1024] = { 0 };\n\n    argc = cmd_parse_argv(cmd, argv, 4);\n    if (argc < 1) {\n        CMD_ERR("invalid param number %d\\n", argc);\n        return CMD_STATUS_INVALID_ARG;\n    }\n\n    handle = strtoul(argv[0], NULL, 16);\n\n    if (argc >= 4 && !cmd_strcmp(argv[2], "string")) {\n        len = MIN(strlen(argv[1]), sizeof(gatt_write_buf));\n        strncpy((char *)gatt_write_buf, argv[1], len);\n        conn_id = strtoul(argv[3], NULL, 16);\n    } else {\n        len = hex2bin(argv[1], strlen(argv[1]), gatt_write_buf, sizeof(gatt_write_buf));\n        if (len == 0) {\n            CMD_ERR("No data set\\n");\n            return CMD_STATUS_INVALID_ARG;\n        }\n        if (argc == 3) {\n            conn_id = strtoul(argv[2], NULL, 16);\n        }\n    }\n\n    btmg_gatts_notify(conn_id, handle, gatt_write_buf, len);\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_gatt_exchange_mtu(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    int conn_id = 0;\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n    if (argc == 1) {\n        conn_id = atoi(argv[0]);\n    }\n\n    btmg_le_gatt_mtu_exchange(conn_id);\n    CMD_DBG("conn %d mtu_exchange \\n", conn_id);\n\n    return CMD_STATUS_OK;\n}\n\nenum cmd_status btcli_gatt_get_mtu(char *cmd)\n{\n    int argc;\n    char *argv[1];\n    int mtu = 0;\n    int conn_id = 0;\n\n    argc = cmd_parse_argv(cmd, argv, 1);\n\n    if (argc == 1) {\n        conn_id = atoi(argv[0]);\n    }\n\n    mtu = btmg_le_conn_get_mtu(conn_id);\n    CMD_DBG("Get conn:%d,MTU=%d\\n", conn_id, mtu);\n\n    return CMD_STATUS_OK;\n}\n\nstatic const struct cmd_data gatt_cmds[] = {\n    { "discover",       btcli_gattc_discover,     CMD_DESC("[type: service, char, desc] [conn_id]")},\n    { "write",          btcli_gattc_write,        CMD_DESC("<handle> <data> [string] [conn_id]")},\n    { "read",           btcli_gattc_read,         CMD_DESC("<handle> [conn_id]")},\n    { "subscribe",      btcli_gattc_subscribe,    CMD_DESC("<char_handle> [conn_id]")},\n    { "unsubscribe",    btcli_gattc_unsubscribe,  CMD_DESC("<char_handle> [conn_id]")},\n    { "show",           btcli_gatts_show_db,      CMD_DESC("[none]")},\n    { "notify",         btcli_gatts_notify,       CMD_DESC("<handle> <data> [string] [conn_id]")},\n    { "indicate",       btcli_gatts_indicate,     CMD_DESC("<handle> <data> [string] [conn_id]")},\n    { "exchange_mtu",   btcli_gatt_exchange_mtu,  CMD_DESC("[conn_id]")},\n    { "get_mtu",        btcli_gatt_get_mtu,       CMD_DESC("[conn_id]")},\n    { "help",           btcli_gatt_help,          CMD_DESC(CMD_HELP_DESC)},\n};\n\n/* btcli gatt help */\nstatic enum cmd_status btcli_gatt_help(char *cmd)\n{\n    return cmd_help_exec(gatt_cmds, cmd_nitems(gatt_cmds), 10);\n}\n\nenum cmd_status btcli_gatt(char *cmd)\n{\n    return cmd_exec(cmd, gatt_cmds, cmd_nitems(gatt_cmds));\n}\n'})}),"\n",(0,_.jsx)(e.h5,{id:"\u521d\u59cb\u5316-5",children:"\u521d\u59cb\u5316"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u603b\u56de\u8c03\u7ed3\u6784\u4f53\u662f btmg_callback_t\uff0c\u5148\u8bbe gatt server \u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_core_init \u521d\u59cb\u5316 btmanager;"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_register_callback \u6ce8\u518c\u6b65\u9aa4 1 \u8bbe\u7f6e\u597d\u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_set_profile(BTMG_GATT_SERVER) \u4f7f\u80fd\u84dd\u7259 Profile\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_adapter_enable(true) \u4f7f\u80fd\u84dd\u7259\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u84dd\u7259\u4f7f\u80fd\u6210\u529f\u540e\u89e6\u53d1 state_cb\uff0c\u53ef\u4ee5\u83b7\u53d6\u84dd\u7259\u7684\u5f00\u5173\u72b6\u6001\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u6ce8\u518c-service",children:"\u6ce8\u518c SERVICE"}),"\n",(0,_.jsx)(e.p,{children:"\u6b63\u5e38\u6253\u5f00\u84dd\u7259\u540e\uff0c\u7d27\u63a5\u7740\u6ce8\u518c service\uff0c\u53ef\u4ee5\u53c2\u8003 ble_gatt_register_service \u7684\u5199\u6cd5\uff0c\u5927\u81f4\u6b65\u9aa4\u5982\u4e0b\uff1a"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u901a\u8fc7 btmg_gatt_attr_create(int num_attr) \u521b\u5efa\u672c\u5730\u6570\u636e\u5e93\uff0c\u53c2\u6570\u6307\u652f\u6301\u7684 attribute \u6700\u5927\u6570\u91cf\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_gatt_attr_primary_service \u521b\u5efa\u4e00\u4e2a service\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u63a5\u7740\u8c03\u7528 btmg_gatt_attr_characteristic \u6dfb\u52a0 characteristic \u5230\u6b65\u9aa4 2 \u7684 service \u4e2d\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5982 \u679c characteristic \u9700 \u8981 \u6dfb \u52a0 Client Characteristic Configuration Descriptor\uff0c \u5c31 \u5728btmg_gatt_attr_characteristic \u540e\u9762\u8c03\u7528 btmg_gatt_attr_ccc\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5982\u679c\u9700\u8981\u589e\u52a0\u65b0\u7684 service\uff0c\u8c03\u7528\u9700\u8981\u518d\u6b21 btmg_gatt_attr_primary_service\uff0c\u5373btmg_gatt_attr_primary_service \u51fd\u6570\u662f\u4e0d\u540c service \u7684\u4ea4\u754c\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5728\u8bbe\u7f6e\u5b8c\u6240\u6709\u9700\u8981\u6dfb\u52a0\u7684\u670d\u52a1\u540e\uff0c\u6700\u540e\u901a\u8fc7 btmg_gatt_register_service \u6ce8\u518c\u5230\u534f\u8bae\u6808\u4e2d\uff1b\u4f8b\u5982\u4ee5\u4e0b\u7684\u5199\u6cd5\uff0c\u5305\u542b\u4e24\u4e2a service\uff1a"}),"\n"]}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"db = btmg_gatt_attr_primary_service //service1 start\nbtmg_gatt_attr_characteristic\nbtmg_gatt_attr_ccc\nbtmg_gatt_attr_characteristic //service1 end\nbtmg_gatt_attr_primary_service //service2 start\nbtmg_gatt_attr_characteristic //service2 end\nbtmg_gatt_register_service(db)\n"})}),"\n",(0,_.jsx)(e.h5,{id:"\u5e7f\u64ad",children:"\u5e7f\u64ad"}),"\n",(0,_.jsx)(e.p,{children:"\u6253\u5f00\u5e7f\u64ad\u53ef\u4ee5\u53c2\u8003 btcli.c \u7684 ble_advertise_on\uff1a"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_le_set_adv_param \u914d\u7f6e\u5e7f\u64ad\u53c2\u6570\uff0c\u626b\u63cf\u53c2\u6570\u8bf7\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8bbe\u7f6e\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_le_set_adv_scan_rsp_data \u8bbe\u7f6e\u5e7f\u64ad\u6570\u636e\u6216\u626b\u63cf\u76f8\u5e94\u6570\u636e\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_le_enable_adv(true) \u5f00\u542f\u5e7f\u64ad\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u5982\u9700\u5173\u95ed\u5e7f\u64ad\u8c03\u7528 btmg_le_enable_adv(false);"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u8fde\u63a5-1",children:"\u8fde\u63a5"}),"\n",(0,_.jsx)(e.p,{children:"GATT Server \u8bbe\u5907\u5728\u5f00\u542f BLE \u5e7f\u64ad\u540e\uff0c\u53ef\u4ee5\u88ab GATT Client \u8bbe\u5907\u626b\u63cf\u8fde\u63a5\u3002\u8fde\u63a5\u72b6\u6001\u901a\u8fc7 btmg_gatts_cb.conn_cb \u4e0a\u62a5\u3002"}),"\n",(0,_.jsx)(e.p,{children:"\u53ef\u4ee5\u53c2\u8003 btcli_ble_connection_cb\u3002"}),"\n",(0,_.jsx)(e.h5,{id:"\u6570\u636e\u4ea4\u4e92",children:"\u6570\u636e\u4ea4\u4e92"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u6536\u5230\u5bf9\u7aef\u8bbe\u5907\u7684\u8bfb\u8bf7\u6c42\uff0c\u4f1a\u89e6\u53d1 btmg_gatts_cb.char_read_req_cb \u56de\u8c03\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u6536\u5230\u5bf9\u7aef\u8bbe\u5907\u7684\u5199\u8bf7\u6c42\uff0c\u4f1a\u89e6\u53d1 btmg_gatts_cb.char_write_req_cb \u56de\u8c03\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u6536\u5230\u5bf9\u7aef\u8bbe\u5907\u5bf9 ccc \u7684\u914d\u7f6e\uff0c\u4f1a\u89e6\u53d1 btmg_gatts_cb.ccc_cfg_cb \u56de\u8c03\uff1b\uff081\uff09\u5bf9\u65b9\u914d\u7f6e\u4f7f\u80fd Indication \u540e\uff0c\u53ef\u4ee5\u8c03\u7528 btmg_gatts_indicate \u53d1\u9001\u6307\u793a\uff1b\uff082\uff09\u5bf9\u65b9\u914d\u7f6e\u4f7f\u80fd Notification \u540e\uff0c\u53ef\u4ee5\u8c03\u7528 btmg_gatts_notify \u53d1\u9001\u901a\u77e5\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u53cd\u521d\u59cb\u5316-3",children:"\u53cd\u521d\u59cb\u5316"}),"\n",(0,_.jsx)(e.p,{children:"\u53cd\u521d\u59cb\u5316\u65f6\uff0c\u9700\u8981\u628a\u5df2\u7ecf\u6ce8\u518c\u7684 service \u6ce8\u9500\u3001\u5173\u95ed\u5e7f\u64ad\u3001\u9500\u6bc1\u524d\u9762\u521b\u5efa\u7684 Database\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"btmg_gatt_unregister_service\nbtmg_le_enable_adv(false);\nbtmg_gatt_attr_destory;\nbtmg_adapter_enable(false);\nbtmg_core_deinit();\nbtmg_unregister_callback(void);\n"})}),"\n",(0,_.jsx)(e.h3,{id:"gatt-client",children:"GATT Client"}),"\n",(0,_.jsx)(e.h4,{id:"gatt-client-api",children:"GATT Client API"}),"\n",(0,_.jsx)(e.p,{children:"\u5217\u51fa\u5f00\u53d1 GATT Client \u529f\u80fd\u6240\u9700\u7684 API\uff0c\u5305\u542b BLE \u57fa\u7840\u63a5\u53e3"}),"\n",(0,_.jsxs)(e.table,{children:[(0,_.jsx)(e.thead,{children:(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"API \u63a5\u53e3"}),(0,_.jsx)(e.th,{style:{textAlign:"left"},children:"\u8bf4\u660e"})]})}),(0,_.jsxs)(e.tbody,{children:[(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_discover_all_services"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u4ece\u6307\u5b9a handle \u8303\u56f4\u4e2d\u53d1\u73b0\u6240\u6709 service \u6216\u6307\u5b9aUUID \u670d\u52a1\uff1b\u53d1\u73b0\u7684\u7ed3\u679c\u901a\u8fc7btmg_gattc_cb.dis_att_cb \u8fd4\u56de"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_discover_primary_services"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u4ece\u6307\u5b9a handle \u8303\u56f4\u4e2d\u53d1\u73b0\u6240\u6709 primary service\u6216\u6307\u5b9a UUID \u670d\u52a1\uff1b\u53d1\u73b0\u7684\u7ed3\u679c\u901a\u8fc7btmg_gattc_cb.dis_att_cb \u8fd4\u56de"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_discover_characteristic"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u73b0\u6240\u6709 characteristic\uff1b\u53d1\u73b0\u7684\u7ed3\u679c\u901a\u8fc7btmg_gattc_cb.dis_att_cb \u8fd4\u56de"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_discover_descriptor"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d1\u73b0\u6240\u6709 descriptor\uff1b\u53d1\u73b0\u7684\u7ed3\u679c\u901a\u8fc7btmg_gattc_cb.dis_att_cb \u8fd4\u56de"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_read"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bfb\u53d6 GATT Server \u7684 Characteristic Value\uff1b\u8bfb\u53d6\u7ed3\u679c\u901a\u8fc7 btmg_gattc_cb.read_cb \u83b7\u53d6"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_read_long"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5982\u679c GATT Server \u7684 Characteristic Value \u957f\u5ea6\u592a\u957f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u65b9\u6cd5\u8bfb\u53d6\uff1b\u8bfb\u53d6\u7ed3\u679c\u901a\u8fc7btmg_gattc_cb.read_cb \u83b7\u53d6"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_write"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5199\u6570\u636e\u5230 GATT Server \u7684 Characteristic Value\uff0cServer \u9700\u8981 response\uff0cresponse \u901a\u8fc7btmg_gattc_cb.write_cb \u4e0a\u62a5"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_write_long"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5982\u679c\u5199\u5165\u7684\u6570\u636e\u592a\u957f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u51fd\u6570\uff0cServer \u4e5f\u9700\u8981 response\uff0cresponse \u901a\u8fc7 btmg_gattc_cb.write_cb \u4e0a\u62a5"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_write_without_response"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5199\u6570\u636e\u5230 GATT Server \u7684 Characteristic Value\uff0cServer \u4e0d\u9700\u8981 response"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_write_long_without_response"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5982\u679c\u5199\u5165\u7684\u6570\u636e\u592a\u957f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u51fd\u6570\uff0cServer \u4e0d\u9700\u8981 response"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_subscribe"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u6ce8\u518c notify \u6216 indicate\uff0c\u534f\u8bae\u6808\u5e95\u5c42\u5df2\u7ecf\u5305\u542b\u5199 CCC \u7684\u64cd\u4f5c\uff0c\u6ce8\u518c\u5b8c\u6210\u540e\uff0cServer \u7aef\u624d\u53ef\u4ee5\u5bf9 Client \u901a\u77e5\u6216\u8005\u6307\u793a"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_gattc_unsubscribe"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u6ce8\u9500 notify \u6216 indicate"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_scan_start"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5f00\u59cb BLE \u626b\u63cf\uff0c\u626b\u63cf\u7ed3\u679c\u901a\u8fc7btmg_gattc_cb.le_scan_cb \u4e0a\u62a5"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_scan_stop"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u505c\u6b62 BLE \u626b\u63cf"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_set_chan_map"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e channel map"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_get_connected_num"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u5df2\u8fde\u63a5\u8bbe\u5907\u6570\u91cf"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_get_connected_list"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u5df2\u8fde\u63a5\u8bbe\u5907\u5217\u8868"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_conn_param_update"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u66f4\u65b0 BLE \u8fde\u63a5\u53c2\u6570"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_connect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u6307\u5b9a\u8bbe\u5907\u53d1\u8d77 BLE \u8fde\u63a5"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_disconnect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u65ad\u5f00 BLE \u8bbe\u5907\u8fde\u63a5"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_unpair"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d6\u6d88 BLE \u914d\u5bf9"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_connect_auto_start"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u81ea\u52a8\u8fde\u63a5\u767d\u540d\u5355\u4e2d\u7684\u5bf9\u7aef BLE \u8bbe\u5907"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_connect_auto_stop"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u505c\u6b62\u81ea\u52a8\u8fde\u63a5"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_set_auto_connect"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u81ea\u52a8\u8fde\u63a5\u5230\u6307\u5b9a\u7684\u5bf9\u7aef BLE \u8bbe\u5907\uff0c\u542f\u7528\u6b64\u529f\u80fd\u540e\uff0c\u6bcf\u6b21 BLE \u8bbe\u5907\u65ad\u5f00\u4e0e\u5bf9\u7aef\u8bbe\u5907\u7684\u8fde\u63a5\u65f6\uff0c\u82e5\u6536\u5230\u5bf9\u7aef BLE \u8bbe\u5907\u7684\u5e7f\u64ad\u5305\uff0c\u5219\u5c06\u91cd\u65b0\u5efa\u7acb\u8fde\u63a5\u3002\u5728\u4e3b\u52a8\u626b\u63cf\u671f\u95f4\u9700\u8981\u7981\u6b62\u6b64\u529f\u80fd"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_get_security"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u5f53\u524d\u8fde\u63a5\u94fe\u8def\u7684\u5b89\u5168\u7b49\u7ea7"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_set_security"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8bbe\u7f6e\u8fde\u63a5\u94fe\u8def\u7684\u5b89\u5168\u7b49\u7ea7"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_smp_passkey_entry"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u8f93\u5165 passkey \u5bf9\u914d\u5bf9\u7ed1\u5b9a\u8fdb\u884c\u56de\u590d"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_smp_cancel"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u53d6\u6d88\u6b63\u5728\u8fdb\u884c\u7684\u914d\u5bf9\u7ed1\u5b9a\u6d41\u7a0b"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_smp_passkey_confirm"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5982\u679c\u786e\u8ba4\u4e86 passkey \u4e0e\u7528\u6237\u5339\u914d\uff0c\u5219\u4f7f\u7528\u6b64\u51fd\u6570\u8fdb\u884c\u56de\u590d"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_smp_pairing_confirm"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u5982\u679c\u7528\u6237\u5bf9\u914d\u5bf9\u7ed1\u5b9a\u8fdb\u884c\u786e\u8ba4\uff0c\u5219\u7528\u6b64\u51fd\u6570\u8fdb\u884c\u56de\u590d"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_gatt_mtu_exchange"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u4ea4\u6362 MTU"})]}),(0,_.jsxs)(e.tr,{children:[(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"btmg_le_conn_get_mtu"}),(0,_.jsx)(e.td,{style:{textAlign:"left"},children:"\u83b7\u53d6\u5f53\u524d\u8fde\u63a5\u534f\u5546\u540e\u4f7f\u7528\u7684 MTU \u5927\u5c0f"})]})]})]}),"\n",(0,_.jsx)(e.h4,{id:"gatt-client-api-\u8c03\u7528\u6d41\u7a0b",children:"GATT Client API \u8c03\u7528\u6d41\u7a0b"}),"\n",(0,_.jsx)(e.p,{children:"GATT Client \u529f\u80fd\u7684\u4f7f\u7528\u793a\u4f8b"}),"\n",(0,_.jsx)(e.h5,{id:"\u521d\u59cb\u5316-6",children:"\u521d\u59cb\u5316"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u603b\u56de\u8c03\u7ed3\u6784\u4f53\u662f btmg_callback_t\uff0c\u5148\u8bbe gatt client \u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_core_init \u521d\u59cb\u5316 bt_manager;"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_register_callback \u6ce8\u518c\u6b65\u9aa4 1 \u8bbe\u7f6e\u597d\u7684\u56de\u8c03\u51fd\u6570\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_set_profile(BTMG_GATT_CLIENT) \u4f7f\u80fd\u84dd\u7259 Profile\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_adapter_enable(true) \u4f7f\u80fd\u84dd\u7259\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u84dd\u7259\u4f7f\u80fd\u6210\u529f\u540e\u89e6\u53d1 state_cb\uff0c\u53ef\u4ee5\u83b7\u53d6\u84dd\u7259\u7684\u5f00\u5173\u72b6\u6001\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u4f7f\u7528 btmg_le_conn_param_update \u66f4\u65b0\u8fde\u63a5\u53c2\u6570\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u626b\u63cf\u8fde\u63a5-2",children:"\u626b\u63cf\u8fde\u63a5"}),"\n",(0,_.jsx)(e.p,{children:"\u6b63\u5e38\u6253\u5f00\u84dd\u7259\u540e\uff0c\u53ef\u4ee5\u626b\u63cf\u8fde\u63a5"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u8c03\u7528 btmg_le_scan_start \u5f00\u59cb\u626b\u63cf\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u626b\u63cf\u5230\u8bbe\u5907\u540e\uff0c\u8c03\u7528 btmg_le_scan_stop \u505c\u6b62\u626b\u63cf\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u83b7\u53d6\u5230\u5bf9\u65b9 mac \u5730\u5740\u540e\uff0c\u8c03\u7528 btmg_le_connect \u53d1\u8d77\u8fde\u63a5\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u652f\u6301\u8fde\u63a5\u591a\u4e2a\u8bbe\u5907\uff0c\u53ef\u4ee5\u901a\u8fc7 btmg_le_get_connected_num\u548c btmg_le_get_connected_list \u83b7\u53d6\u8bbe\u5907\u5217\u8868\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h5,{id:"\u6570\u636e\u901a\u4fe1",children:"\u6570\u636e\u901a\u4fe1"}),"\n",(0,_.jsxs)(e.ol,{children:["\n",(0,_.jsx)(e.li,{children:"\u53ef\u4ee5\u4f7f\u7528 btmg_gattc_discover_primary_services \u6216\u8005 btmg_gattc_discover_characteristic\u7b49\u63a5\u53e3\u83b7\u53d6 Server \u7aef\u6709\u54ea\u4e9b\u53ef\u4ee5\u8bfb\u5199\u7684 Characteristic Value\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u901a\u8fc7 btmg_gattc_read \u6216\u8005 btmg_gattc_read_long \u63a5\u53e3\u6307\u5b9a Characteristic Value handle \u8bfb\u53d6 Characteristic Value\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u901a\u8fc7 btmg_gattc_write \u6216\u8005 btmg_gattc_write_long \u63a5\u53e3\u6307\u5b9a Characteristic Value handle \u5199\u5165 Characteristic Value\uff1b"}),"\n",(0,_.jsx)(e.li,{children:"\u901a\u8fc7 btmg_gattc_subscribe \u6ce8\u518c notify \u6216 indicate\uff0c\u5f53\u6536\u5230 Server \u7684 notify \u6216 indicate\uff0c\u4f1a\u901a\u8fc7 btmg_gattc_cb.notify_indicate_cb \u4e0a\u62a5\uff1b"}),"\n"]}),"\n",(0,_.jsx)(e.h2,{id:"btcli-\u4f7f\u7528\u6307\u5357",children:"btcli \u4f7f\u7528\u6307\u5357"}),"\n",(0,_.jsx)(e.h3,{id:"\u547d\u4ee4\u7b80\u4ecb",children:"\u547d\u4ee4\u7b80\u4ecb"}),"\n",(0,_.jsx)(e.p,{children:"\u76ee\u524d RTOS \u5e73\u53f0\u4e0a btmanager \u7684\u6d4b\u8bd5 demo \u79f0\u4e3a btcli\uff0c\u652f\u6301 a2dp \u3001hfp\u3001spp\u3001gatt \u7b49\u529f\u80fd\u7684\u6d4b\u8bd5\u9a8c\u8bc1\u3002\u901a\u8fc7 btcli \u6216 btcli help \u53ef\u4ee5\u67e5\u770b\u547d\u4ee4\u5217\u8868\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{className:"language-c",children:"c906>btcli\n[*] init : Initialize bt adater\n[*] deinit : DeInitialize bt adater\n[*] scan_mode : <0~2>:0\u2011NONE,1\u2011page scan,2\u2011inquiry scan&page scan\n[*] scan : <on/off>: device discovery\n[*] scan_list : list available devices\n[*] io_cap : <0~3>:0\u2011displayonly,1\u2011displayyesno,2\u2011keyboardonly,3\u2011noinputnooutput\n[*] get_dev_name : get remote device name\n[*] get_name : get bt adapter name\n[*] set_name : <name>:set bt adapter name\n[*] get_mac : get bt adapter address\n[*] pincode : <0000~9999>:enter pincode\n[*] passkey : <000000~999999>:enter passkey\n[*] passkey_confirm : confirm passkey\n[*] pairing_confirm : confirm pairing\n[*] paired_list : list paired devices\n[*] unpair_dev : unpair bond devices\n[*] a2dp_src : support paly songs and other functions,use a2dp_src help view\n[*] a2dp_snk : support receive audio, use a2dp_snk help view\n[*] avrc : support audio playback control and other functions, use avrc help view\n[*] hfp : support answering, hanging up, rejecting, voice dialing and other functions, use hfp help view\n[*] spps : support data transmission, use spps help view\n[*] sppc : support data transmission, use sppc help view\n[*] ble : support ble, use ble help view\n[*] gatt : support gatt, use gatt help view\n[*] help : print this message and quit\nFor detail please use xxx help\n"})}),"\n",(0,_.jsx)(e.p,{children:"a2dp_src\u3001a2dp_snk\u3001avrc\u3001hfp\u3001spps\u3001sppc\u3001ble\u3001gatt\u8fd8\u6709\u4e8c\u7ea7\u547d\u4ee4\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\uff1a"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"btcli a2dp_src help\nbtcli a2dp_snk help\nbtcli avrc help\nbtcli hfp help\nbtcli spps help\nbtcli sppc help\nbtcli ble help\nbtcli gatt help\n"})}),"\n",(0,_.jsx)(e.p,{children:"\u4f8b\u5982\uff1abtcli a2dp_src help"}),"\n",(0,_.jsx)(e.pre,{children:(0,_.jsx)(e.code,{children:"c906>btcli a2dp_src help\n$ a2dp_src help\n[*] connect : <device mac>\n[*] disconnect : <device mac>\n[*] start : <\u2011p [folder path] or \u2011f [file path]>\n[*] control : <cmd>(pause play forward backward)\n[*] stop : No parameters\n[*] vol : <val>(val:0~100)\n[*] help : print this message and quit\n"})})]})}function b(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,_.jsx)(e,{...n,children:(0,_.jsx)(l,{...n})}):l(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>c,a:()=>i});var _=t(7294);const r={},a=_.createContext(r);function i(n){const e=_.useContext(a);return _.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),_.createElement(a.Provider,{value:e},n.children)}}}]);